' Gambas class file

Inherits NagatoDB

Create Static

Property Read CategoryCount As Integer
Property Read CategoryNames As String[]

Public Const TableCategory As String = "webpage_category"
Public Const ColumnCategory As String = "category"

Public Const TableHistory As String = "table_history"
Public Const ColumnId As String = "id"
Public Const ColumnPageName As String = "page_name"
Public Const ColumnUrl As String = "url"
Public Const ColumnLastAccessed As String = "last_accessed"

Public Const TableBookmark As String = "table_bookmark"
Public Const ColumnUserDefinedPageName As String = "user_defined_page_name"
Public Const ColumnCategoryId As String = "category_id"

Public Const TableIcon2 As String = "table_icon_2"
Public Const ColumnIcon As String = "icon"

Public _$uniqueName As String = "Web"

Private Sub checkAndCreateCategoryTable()
    
    Dim yukiTable As Table
    
    If Not Me._$connection.Tables.Exist(TableCategory) Then
        yukiTable = Me._$connection.Tables.Add(TableCategory)
        yukiTable.Fields.Add(ColumnId, db.Serial)
        yukiTable.Fields.Add(ColumnCategory, db.String)
        yukiTable.PrimaryKey = [ColumnId]
        yukiTable.Update()
    Endif

End

Private Sub checkAndCreateHistoryTable()
    
    Dim yukiTable As Table
    
    If Not Me._$connection.Tables.Exist(TableHistory) Then
        yukiTable = Me._$connection.Tables.Add(TableHistory)
        yukiTable.Fields.Add(ColumnId, db.Serial)
        yukiTable.Fields.Add(ColumnUrl, db.String)
        yukiTable.Fields.Add(ColumnPageName, db.String)
        yukiTable.Fields.Add(ColumnLastAccessed, db.Date)
        yukiTable.PrimaryKey = [ColumnId]
        yukiTable.Update()
    Endif

End

Private Sub checkAndCreateBookmarkTable()
    
    Dim yukiTable As Table
    
    If Not Me._$connection.Tables.Exist(TableBookmark) Then
        yukiTable = Me._$connection.Tables.Add(TableBookmark)
        yukiTable.Fields.Add(ColumnId, db.Serial)
        yukiTable.Fields.Add(ColumnUrl, db.String)
        yukiTable.Fields.Add(ColumnPageName, db.String)
        yukiTable.Fields.Add(ColumnUserDefinedPageName, db.String)
        yukiTable.Fields.Add(ColumnCategoryId, db.Integer)
        yukiTable.PrimaryKey = [ColumnId]
        yukiTable.Update()
    Endif

End

Private Sub checkAndCreateIconTable()
    
    Dim yukiTable As Table
    
    If Not Me._$connection.Tables.Exist(TableIcon2) Then
        yukiTable = Me._$connection.Tables.Add(TableIcon2)
        yukiTable.Fields.Add(ColumnId, db.Serial)
        yukiTable.Fields.Add(ColumnUrl, db.String)
        yukiTable.Fields.Add(ColumnIcon, db.Blob)
        yukiTable.Fields.Add(ColumnLastAccessed, gb.Date)
        yukiTable.PrimaryKey = [ColumnId]
        yukiTable.Update()
    Else
        ResizeIconTable()
    Endif

End

Private Sub pushIcon(argIcon As Picture, argUrl As String)
    
    Dim yukiResult As Result
    
    If HasIcon(argUrl) Then Return
    
    Me._$connection.Begin()
        yukiResult = Me._$connection.Create(TableIcon2)
        If argIcon Then
            yukiResult[ColumnUrl] = argUrl
            yukiResult[ColumnIcon] = MikuruBlob.GetBlobFromPicture(argIcon)
            yukiResult[ColumnLastAccessed] = Now
        Endif
        yukiResult.Update()
    Me._$connection.Commit()
    
Catch
    Debug Error.Text
    Me._$connection.Rollback()
    
End

Private Function getCategoryId(argCategoryName As String) As Integer
    
    Dim yukiResult As Result 
    
    If argCategoryName = "" Then argCategoryName = ("uncategorized")
    
    yukiResult = Me._$connection.Find(TableCategory, "category = &1", argCategoryName)
    
    If yukiResult.Count = 0 Then
        yukiResult = Me._$connection.Create(TableCategory)
        yukiResult[ColumnCategory] = argCategoryName
        yukiResult.Update()
    Endif

    yukiResult = Me._$connection.Find(TableCategory, "category = &1", argCategoryName)

    Return yukiResult[ColumnId]
    
End

Private Function hasBookmark(argUrl As String, argCategoryId As Integer) As Boolean
    
    If Me._$connection.Find(TableBookmark, "url = &1 and category_id = &2", argUrl, argCategoryId).Count = 0 Then
        Return False
    Else
        Return True
    Endif
    
End

Public Function HasBookmarkInCategory(argCategoryName As String) As Boolean
    
    Dim yukiCategoryId As Integer = getCategoryId(argCategoryName)
    
    If Me._$connection.Find(TableBookmark, "category_id = &1", yukiCategoryId).Count <> 0 Then
        Return True
    Endif
    
Finally
    Return False
    
End

Public Function GetIcon(argUrl As String) As Picture
    
    Dim yukiResult As Result = Me._$connection.Find(TableIcon2, "url = &1", argUrl)
    
    Return MikuruBlob.GetPictureFromBlob(yukiResult[ColumnIcon].Data)
    
Catch
    Return Null
    
End

Public Function HasIcon(argUrl As String) As Boolean
    
    Dim yukiResult As Result = Me._$connection.Find(TableIcon2, "url = &1", argUrl)
    Return (yukiResult.Count > 0)
    
End

Public Sub DeleteBookmark(argUrl As String)
    
    Me._$connection.Delete(TableBookmark, "url = &1", argUrl)
    
End

Public Sub RenameBookmark(argUrl As String, argNewName As String)
    
    Dim yukiResult As Result = Me._$connection.Edit(TableBookmark, "url = &1", argUrl)
    
    yukiResult[ColumnUserDefinedPageName] = argNewName
    yukiResult.Update()
    
End

Public Sub ChangeBookmarkCategory(argUrl As String, argCategory As String)
    
    Dim yukiResult As Result = Me._$connection.Edit(TableBookmark, "url = &1", argUrl)
    
    yukiResult[ColumnCategoryId] = getCategoryId(argCategory)
    yukiResult.Update()
    
End

Public Function GetBookmarkResultFindedByCategoryName(argCategoryName As String) As Result
    
    Dim yukiId As String = getCategoryId(argCategoryName)
    
    Return Me._$connection.Find(TableBookmark, "category_id = &1", yukiId)
    
End

Public Sub PushBookmark(argUrl As String, argTitle As String, argUserTitle As String, argCategory As String, Optional argIcon As Picture)
    
    Dim yukiCategoryId As Integer = getCategoryId(argCategory)
    Dim yukiResult As Result
    
    If hasBookmark(argUrl, yukiCategoryId) Then Return
    
    Me._$connection.Begin()
        yukiResult = Me._$connection.Create(TableBookmark)
        yukiResult[ColumnUrl] = argUrl
        yukiResult[ColumnPageName] = argTitle
        yukiResult[ColumnUserDefinedPageName] = argUserTitle
        yukiResult[ColumnCategoryId] = yukiCategoryId
        yukiResult.Update()
    Me._$connection.Commit()
    
    If argIcon Then pushIcon(argIcon, argUrl)
    
Catch
    Debug Error.Text
    Me._$connection.Rollback()
    
End

Public Function GetHistoryResultOrderedByLastAccessed(argLimit As Integer) As Result
    
    Dim yukiQuery As String 
    
    yukiQuery = Subst$("select * from &1 order by &2 desc limit &3", TableHistory, ColumnLastAccessed, argLimit)
    
    Return Me._$connection.Exec(yukiQuery)
    
End

Public Sub ResizeRecentPages()
    
    Dim yukiDate As Date = DateAdd(Now(), gb.Week, -1)
    
    Me._$connection.Delete(TableHistory, "last_accessed < &1", yukiDate)
   
End

Private Sub resizeIconTable()
    
    Dim yukiDate As Date = DateAdd(Now(), gb.Week, -1)
    
    Me._$connection.Delete(TableIcon2, "last_accessed < &1", yukiDate)
   
End

Private Function hasHistory(argUrl As String) As Boolean
    
    If Me._$connection.Find(TableHistory, "url = &1", argUrl).Count > 0 Then
        Return True
    Else
        Return False
    Endif
    
End

Private Sub changeHistoryDate(argUrl As String, argTitle As String)
    
    Dim yukiResult As Result
    Dim yukiCount As Integer = 0
    
    yukiResult = Me._$connection.Edit(TableHistory, "url = &1", argUrl)
    
    For Each yukiResult
        If yukiCount = 0 Then
            yukiResult[ColumnLastAccessed] = Now()
            yukiResult.Update()
            Inc yukiCount
        Else
            yukiResult.Delete()
        Endif
    Next

End

Private Sub createNewHistory(argUrl As String, argTitle As String, Optional argIcon As Picture)
    
    Dim yukiResult As Result
    
    Me._$connection.Begin()
        yukiResult = Me._$connection.Create(TableHistory)
        yukiResult[ColumnUrl] = argUrl
        yukiResult[ColumnPageName] = argTitle
        yukiResult[ColumnLastAccessed] = Now()
        If argIcon Then pushIcon(argIcon, argUrl)
        yukiResult.Update()
    Me._$connection.Commit()
    
Catch
    Debug "transaction error."
    Me._$connection.Rollback()
    
End

Public Sub PushHistory(argUrl As String, argTitle As String, Optional argIcon As Picture)
    
    Dim yukiResult As Result 
    
    If argIcon Then pushIcon(argIcon, argUrl)
    
    If hasHistory(argUrl) Then
        changeHistoryDate(argUrl, argTitle)
    Else
        createNewHistory(argUrl, argTitle)
    Endif
    
End

Public Sub ChangeLastAccessed(argUrl As String)
    
    Dim yukiResult As Result 
    
    Try yukiResult = Me._$connection.Edit(TableIcon2, "url = &1", argUrl)
    
    If yukiResult.Count > 0 Then
        yukiResult[ColumnLastAccessed] = Now()
        yukiResult.Update()
    End If
    
Catch
    Debug Error.Text
    
End

Public Sub _new()
    
    Me._SetConnection()
    checkAndCreateCategoryTable()
    checkAndCreateHistoryTable()
    checkAndCreateBookmarkTable()
    checkAndCreateIconTable()
    
End

Private Function CategoryCount_Read() As Integer

    Return Me._$connection.Find(TableCategory).Count

End

Private Function CategoryNames_Read() As String[]

    Dim yukiNames As New String[]
    Dim yukiResult As Result = Me._$connection.Find(TableCategory)
    
    For Each yukiResult
        yukiNames.Add(yukiResult[ColumnCategory])
    Next
    
    Return yukiNames.Sort()

End
