' Gambas class file

Property Read Name As String
Property Read Icon As String ' returns path to icon or icon name in theme.
Property Read Path As String


Private $desktopFile As DesktopFile
Private $categories As String[]

Static Public Function GetCaptionFromPath(argPath As String) As String
    
    Dim yukiDesktopFile As New DesktopFile(argPath)
    
    Return yukiDesktopFile.Name
    
End

Static Public Function GetIconFromPath(argPath As String, argSize As Integer) As Picture
    
    Dim yukiDesktopFile As New DesktopFile(argPath)
    Dim yukiImage As Image
    
    If yukiDesktopFile.Icon Begins "/" And If File.Ext(yukiDesktopFile.Icon) <> "svg" Then
        yukiImage = Image.Load(yukiDesktopFile.Icon)
        If yukiImage.Height > argSize Then yukiImage = yukiImage.Stretch(argSize, argSize)
        Return yukiImage.Picture
    Else If yukiDesktopFile.Icon Begins "/" And If File.Ext(yukiDesktopFile.Icon) = "svg" Then
        Return Image.Load(yukiDesktopFile.Icon).Stretch(argSize, argSize).Picture
    Else
        Return yukiDesktopFile.GetIcon(argSize).Picture
    Endif
    
End

Static Public Sub Run(argPath As String)
    
    Dim yukiDesktopFile As New DesktopFile(argPath)
    
    yukiDesktopFile.Run("")
    
End

Private Sub setCategory(argData As String)
    
    argData = Replace(argData, "Categories=", "")
    $categories = Split(argData, ";", "", True, False)
    
End

Private Sub getCategoryFromDesktopFile(argPath As String)
    
    Dim yukiStream As Stream
    Dim yukiLine As String
    
    yukiStream = Open argPath For Input
    
    Do While Not Eof(yukiStream)
        Line Input #yukiStream, yukiLine
        If yukiLine Begins "Categories=" Then
            setCategory(yukiLine)
            Break
        Endif
    Loop
    
   Close #yukiStream
    
End

Public Sub _new(argPath As String)
    
    $desktopFile = New DesktopFile(argPath)
    getCategoryFromDesktopFile(argPath)
    
End

Public Function HasCategory(argCategory As String) As Boolean
    
    If $categories.Exist(argCategory, gb.IgnoreCase) Then
        Return True
    Else
        Return False
    Endif
    
Catch
    Return False
    
End

Public Function GetIcon(argSize As Integer) As Picture
    
    Dim yukiImage As Image
    
    If $desktopFile.Icon Begins "/" And If File.Ext($desktopFile.Icon) <> "svg" Then
        yukiImage = Image.Load($desktopFile.Icon)
        yukiImage.Stretch(argSize, argSize)
        Return yukiImage.Picture
    Else If $desktopFile.Icon Begins "/" And If File.Ext($desktopFile.Icon) = "svg" 
        Return Image.Load($desktopFile.Icon).Stretch(argSize, argSize).Picture
    Else
        Return $desktopFile.GetIcon(argSize).Picture
    Endif
    
End

Private Function Name_Read() As String

    Return $desktopFile.Name
    
Catch
    Return ""

End

Private Function Icon_Read() As String

    Return $desktopFile.Icon
    
Catch
    Return Null

End

Private Function Path_Read() As String

    Return $desktopFile.Path
    
Catch
    Return ""

End
