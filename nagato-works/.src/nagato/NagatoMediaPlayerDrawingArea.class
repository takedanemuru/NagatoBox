' Gambas class file

Inherits NagatoMainPane

Property Read Title As String
Property Read Duration As Float
Property Position As Float
Property AudioVolume As Float

Private Const TIMER_DELAY As Integer = 1000 ' milli-second
Private Const TYPE_XIMAGESINK As String = "ximagesink"

Private $nagatoImage As Image
Private $drawingArea As DrawingArea
Private $mediaPlayer As MediaPlayer
Private $mediaControl As MediaControl
Private $visualizers As NagatoVisualizers
Private $path As String
Private $timer As Timer

Event NewTitle
Event Tick
Event Click

Private Sub initializeTimer()
    
    $timer = New Timer As "Timer"
    $timer.Delay = TIMER_DELAY
    $timer.Enabled = False
    
End

Private Sub setMainContent()
    
    $drawingArea = New DrawingArea(Me._$parent) As "DrawingArea"
    
    With $drawingArea
        .Expand = True
        .Cached = True
    End With
    
End

Private Sub setNagatoImage()
    
    Dim yukiImage As Image
    
    If Not Object.IsValid($mediaPlayer) Then Return
    If $mediaPlayer.State = Media.Playing Then Return
    
    yukiImage = $nagatoImage.Stretch($drawingArea.W, Int($nagatoImage.H * ($drawingArea.W / $nagatoImage.W)))
    
Catch
    Return
    
End

Private Sub initializeVisualizer()
    
    $visualizers = New NagatoVisualizers($mediaPlayer)
    $mediaPlayer.Video.Visualisation = $visualizers.GetVisualizer(0)
    
End

Private Sub initializeMediaPlayer()
    
    $mediaPlayer = New MediaPlayer As "MediaPlayer"
    $mediaControl = New MediaControl($mediaPlayer, TYPE_XIMAGESINK) As "MediaControl"
    $mediaPlayer.Video.Output = $mediaControl
    $mediaPlayer.Audio.Volume = 1
    initializeVisualizer()
    
End

Private Sub playNewFile()
    
    If $path = "" Then Return

    With $mediaPlayer
            .Stop()
            .URL = Media.URL($path)
            $mediaControl.SetWindow($drawingArea)
            Raise NewTitle
            .Play()
    End With
    
End

Public Sub _Initialize(argPath As String) 'override
    
    Debug argPath
    
    $nagatoImage = Image.Load("pictures/nagato-with-guiter_aura.jpg")
    $path = argPath
    initializeTimer()
    setMainContent()
    initializeMediaPlayer()
    playNewFile() ' don't worry, if argPath="" then playNewFile() should do nothing.
    If argPath = "" Then setNagatoImage()
    
End

Public Sub PlayWithFile(Optional argPath As String = "")
    
    $path = argPath
    playNewFile()
    
End

Public Sub Play()
    
    If $mediaPlayer.State = Media.Paused Then 
        $mediaPlayer.Play()
    Else If $mediaPlayer.State = Media.Playing Then
        Return
    Else
        playNewFile()
    Endif
    
End

Public Sub Pause()
    
    $mediaPlayer.Pause()
    
End

Public Sub Stop()
    
    $mediaPlayer.Stop()
    $timer.Stop()
    
End

Public Sub Reactive()
    
    setNagatoImage()
    
End

Public Sub Kill()
    
    If Not Object.IsValid($drawingArea) Then $mediaPlayer.Stop()
    
End

Public Sub Timer_Timer()
    
    Raise Tick
    
End

Public Sub Asakura_Close()
    
    Debug "HaruhiFulScreenClosed."
    $drawingArea.Reparent(Me._$parent)
    
End

Public Sub DrawingArea_DblClick()
    
    Raise Click
    
End

Public Sub DrawingArea_MouseDown()
    
    Raise Click
    
End

Public Sub DrawingArea_Arrange()
    
    setNagatoImage()
    
End

Public Sub MediaPlayer_State()
    
    If $mediaPlayer.State = Media.Playing Then 
        $timer.Start()
        NagatoMessaging.setMessage(Subst$("now playing : ", File.Name($path)))
    Else If $mediaPlayer.State = Media.Paused Then
        setNagatoImage()
    Endif
    
End

Public Sub MediaPlayer_End()
    
    If NagatoSettingsMediaPlayer.Repeat Then
        $mediaPlayer.Position = 0
    Else
        $mediaPlayer.Stop()
        $timer.Stop()
        setNagatoImage()
    Endif
    
End

Private Function Title_Read() As String

    If $path = "" Then
        Return ("media player")
    Else 
        Return File.BaseName($path)
    Endif

End

Private Function Duration_Read() As Float

    Return $mediaPlayer.Duration

End

Private Function Position_Read() As Float

    Return $mediaPlayer.Position

End

Private Sub Position_Write(Value As Float)

    $mediaPlayer.Position = Value

End

Private Function AudioVolume_Read() As Float

    Return $mediaPlayer.Audio.Volume

End

Private Sub AudioVolume_Write(Value As Float)

    $mediaPlayer.Audio.Volume = Value

End
