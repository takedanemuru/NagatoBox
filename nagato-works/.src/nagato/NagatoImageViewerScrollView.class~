' Gambas class file

Inherits NagatoMainPane

Property Read CurrentImage As Image
Property Read PreviousImage As Image

Private $scrollArea As ScrollView
Private $drawingArea As DrawingArea
Private $xPosition As Integer
Private $yPosition As Integer
Private $fitMode As Boolean
Private $zoomRate As Float 
Private $previousImage As Image = Null
Private $image As Image

Private Sub addScrollArea()
    
    $scrollArea = New ScrollView(Me._$parent)
    
    With $scrollArea
        .ScrollBar = Scroll.Both
        .Expand = True
    End With
    
End

Private Sub addDrawingArea()
    
    $drawingArea = New DrawingArea($scrollArea) As "DrawingArea"
    
End

Private Function getZoomedHeight() As Integer
    
    Return Int($image.Height * $zoomRate)
    
End

Private Function getZoomedWidth() As Integer
    
    Return Int($image.Width * $zoomRate)
    
End

Private Sub setDrawingAreaWidthAndXPosition()
    
    Dim yukiWidth As Integer = getZoomedWidth()
    
    If $scrollArea.ClientWidth > yukiWidth Then
        $drawingArea.Width = $scrollArea.ClientWidth + Style.ScrollbarSize
        $xPosition = ($drawingArea.Width - yukiWidth) / 2
    Else
        $drawingArea.Width = getZoomedWidth() + Style.ScrollbarSize
        $xPosition = 0
    Endif
    
Catch
    Return
    
End

Private Sub setDrawingAreaHeightAndYPosition()
    
    Dim yukiHeight As Integer = getZoomedHeight()
    
    If $scrollArea.ClientHeight > yukiHeight Then
        $drawingArea.Height = $scrollArea.ClientHeight + Style.ScrollbarSize
        $yPosition = ($drawingArea.Height - yukiHeight) / 2
    Else
        $drawingArea.Height = yukiHeight + Style.ScrollbarSize
        $yPosition = 0
    Endif
    
Catch
    Return ' to avoid error "DrawingArea being drawn"
    
End

Private Sub resizeAndRefreshDrawingArea()
    
    setDrawingAreaHeightAndYPosition()
    setDrawingAreaWidthAndXPosition()
    $drawingArea.Refresh()
    
End

Private Sub setDummyImage()
    
    $image = New Image(Me._$parent.Width, Me._$parent.Height, Color.Gray)
    resizeAndRefreshDrawingArea()
    
End

Private Sub initializeImage(argPath As String)
    
    $image = Image.Load(argPath)
    resizeAndRefreshDrawingArea()
    
End

Private Sub zoom(argNewZoomRate As Float)
    
    $zoomRate = argNewZoomRate
    resizeAndRefreshDrawingArea()
    
End

Public Sub SetFit()
    
    $fitMode = Not $fitMode
    
    With $scrollArea
        $zoomRate = IIf($fitMode, (.ClientHeight / $image.Height), (.ClientWidth / $image.Width))
    End With
    
    resizeAndRefreshDrawingArea()
    
End

Public Sub ZoomNormal()
    
    zoom(1)
    
End

Public Sub ZoomIn()
    
    zoom($zoomRate * 1.2)
    
End

Public Sub ZoomOut()
    
    zoom($zoomRate * 0.8)
    
End

Public Sub RotateRight()
    
    $image = $image.RotateRight()
    resizeAndRefreshDrawingArea()
    
End

Public Sub RotateLeft()
    
    $image = $image.RotateLeft()
    resizeAndRefreshDrawingArea()

End

Public Sub Resize(argHeight As Integer, argWidth As Integer)
    
    $image = $image.Stretch(argWidth, argHeight)
    resizeAndRefreshDrawingArea()
    
End

Public Sub ExecuteEffect(argEffectIndex As Integer)
    
    $previousImage = $image
    $image = NagatoImageEffect.ExecuteEffect(argEffectIndex, $image)
    $drawingArea.Refresh()
    
End

Public Sub SetImage(argPath As String)
    
    initializeImage(argPath)
    
End

Public Sub _Initialize(argPath As String) ' override NagatoMainPane Method
    
    $zoomRate = 1

    addScrollArea()
    addDrawingArea()
    If argPath <> "" Then
        initializeImage(argPath)
    Else
        setDummyImage()
    End If
    
End

Public Sub DrawingArea_Draw()
    
    Dim yukiImage As Image = $image.Stretch(getZoomedWidth(), getZoomedHeight())
    
    setDrawingAreaHeightAndYPosition()
    setDrawingAreaWidthAndXPosition()
    
   With Paint
        .Begin($drawingArea)
        .DrawImage(yukiImage, $xPosition + Style.ScrollbarSize, $yPosition + Style.ScrollbarSize)
        .End()
    End With
    
End

Private Function CurrentImage_Read() As Image

    Return $image

End

Private Function PreviousImage_Read() As Image

    Return $previousImage

End
