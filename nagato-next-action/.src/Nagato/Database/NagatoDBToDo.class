' Gambas class file

Inherits NagatoDB

Create Static

Property Read ToDoConnection As Connection

Public Const TableToDo As String = "todo"
Public Const ColumnId As String = "id"
Public Const ColumnStatus As String = "status"
Public Const ColumnProject As String = "project"
Public Const ColumnName As String = "name"
Public Const ColumnMemo As String = "memo"
Public Const ColumnDateDeadline As String = "date_deadline"
Public Const ColumnDateAdded As String = "date_added"

Public Const TableDone As String = "done"
Public Const ColumnDateDone As String = "date_done"

Public _$uniqueName As String = "ToDo"

Private Sub ensureTodoTable()
    
    Dim yukiTable As Table
    
    If Not Me._$connection.Tables.Exist(TableToDo) Then
        yukiTable = Me._$connection.Tables.Add(TableToDo)
        yukiTable.Fields.Add(ColumnId, db.Serial)
        yukiTable.Fields.Add(ColumnStatus, db.Integer)
        yukiTable.Fields.Add(ColumnProject, db.Integer)
        yukiTable.Fields.Add(ColumnName, db.String)
        yukiTable.Fields.Add(ColumnMemo, db.String)
        yukiTable.Fields.Add(ColumnDateDeadline, db.Date)
        yukiTable.Fields.Add(ColumnDateAdded, db.Date)
        yukiTable.Fields.Add(ColumnDateDone, db.Date)
        yukiTable.PrimaryKey = [ColumnId]
        yukiTable.Update()
    Endif

End

Private Sub ensureDoneTable()
    
    Dim yukiTable As Table
    
    If Not Me._$connection.Tables.Exist(TableDone) Then
        yukiTable = Me._$connection.Tables.Add(TableDone)
        yukiTable.Fields.Add(ColumnId, db.Serial)
        yukiTable.Fields.Add(ColumnProject, db.Integer)
        yukiTable.Fields.Add(ColumnDateDone, db.Date)
        yukiTable.PrimaryKey = [ColumnId]
        yukiTable.Update()
    Endif

End

Public Function AddItem(argName As String, Optional argProject As Integer, Optional argStatus As Integer, Optional argMemo As String, Optional argDeadLine As Date)
    
    Dim yukiResult As Result
    
    Me._$connection.Begin()
        yukiResult = Me._$connection.Create(TableToDo)
        yukiResult[ColumnName] = argName
        If argProject And If argProject <> -1 Then 
            yukiResult[ColumnProject] = argProject
        End If
        If argStatus And If argStatus <> -1 Then
            yukiResult[ColumnStatus] = argStatus
            If argStatus = MikuruStatus.Done Then yukiResult[ColumnDateDone] = Now()
        End If
        If argMemo Then yukiResult[ColumnMemo] = argMemo
        If argDeadLine Then yukiResult[ColumnDateDeadline] = argDeadLine
        yukiResult.Update()
    Me._$connection.Commit()
    
Catch
    Debug Error.Text
    Me._$connection.Rollback()
    
End

Public Function EditItem(argId As Integer)
    
    Dim yukiResult As Result
    
    Me._$connection.Begin()
        With MikuruDialog
            yukiResult = Me._$connection.Edit(TableToDo, "id = &1", argId)
            yukiResult[ColumnName] = .ResponseString
            If .ParentProject Then yukiResult[ColumnProject] = IIf(.ParentProject = -1, Null, .ParentProject)
            If .Status Then
                yukiResult[ColumnStatus] = IIf(.Status = -1, Null, .Status)
                If .Status = MikuruStatus.Done Then yukiResult[ColumnDateDone] = Now()
            End If
            If .Memo Or If .Memo <> "" Then yukiResult[ColumnMemo] = .Memo
            If .DeadLine Then yukiResult[ColumnDateDeadline] = .DeadLine
            yukiResult.Update()
        End With
    Me._$connection.Commit()
    
Catch
    Debug Error.Text
    Me._$connection.Rollback()
    
End

Public Sub SetDone(argId As Integer)
    
    Dim yukiResult As Result = Me._$connection.Edit(TableToDo, "id = &1", argId)
    
    Me._$connection.Begin()
        yukiResult[ColumnStatus] = MikuruStatus.Done
        yukiResult[ColumnDateDone] = Now()
        yukiResult.Update()
    Me._$connection.Commit()
    
Catch
    Debug Error.Text
    Me._$connection.Rollback()
    
End

Public Sub Delete(argId As Integer)
    
    Me._$connection.Begin()
        Try Me._$connection.Delete(TableToDo, "id = &1", argId)
    Me._$connection.Commit()
    
End

Public Function GetResultById(argId As Integer) As Result
    
    Dim yukiResult As Result = Me._$connection.Find(TableToDo, "id = &1", argId) 
    
    Return yukiResult
    
End

Public Function GetProjectNames() As String[]
    
    Dim yukiResult As Result = Me._$connection.Find(TableToDo, "status = &1", MikuruStatus.Project)
    Dim yukiReturn As New String[]
    
    For Each yukiResult
        yukiReturn.Add(yukiResult[ColumnName])
    Next
    
    Return yukiReturn.Sort(gb.Natural)
    
End

Public Function GetIds() As Integer[]
    
    Dim yukiResult As Result = Me._$connection.Find(TableToDo)
    Dim yukiReturn As New Integer[]
    
    For Each yukiResult
        yukiReturn.Add(yukiResult[ColumnId])
    Next
    
    Return yukiReturn.Sort(gb.Natural)
    
End

Public Function GetProjectName(argId As Integer) As String
    
    Dim yukiResult As Result = Me._$connection.Find(TableToDo, "id = &1", argId)
    
    Return yukiResult[ColumnName]
    
Catch
    Return ""
    
End

Public Function GetProjectIcon(argId As Integer) As Picture
    
    Dim yukiResult As Result = Me._$connection.Find(TableToDo, "id = &1", argId)
    
    Return MikuruStatus.GetIcon(yukiResult[ColumnStatus])
    
Catch
    Return Null
    
End

Public Function GetAll() As Result
    
    Return Me._$connection.Find(TableToDo)
    
End

Public Function GetDone() As Result
    
    Dim yukiQuery As String = "select * from &1 where status = &4 order by &2 desc, &3 desc"
    
    yukiQuery = Subst$(yukiQuery, TableToDo, ColumnDateDone, ColumnId, MikuruStatus.Done)
    
    Return Me._$connection.Exec(yukiQuery)
    
End

Public Function IsDone(argId As Integer) As Boolean
    
    Dim yukiResult As Result = Me._$connection.Find(TableToDo, "id = &1", argId)
    
    If yukiResult.Count = 0 Then
        Return False
    Else
        If yukiResult[ColumnStatus] = MikuruStatus.Done Then Return True
    Endif
    
Catch
    Return False
    
End

Public Sub _new() 
    
    Me._SetConnection()
    ensureTodoTable()
    ensureDoneTable()
    
End

Private Function ToDoConnection_Read() As Connection

    Return Me._$connection

End
