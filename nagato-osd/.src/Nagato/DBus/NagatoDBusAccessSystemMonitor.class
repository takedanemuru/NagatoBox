' Gambas class file

Property Read Activated As Boolean
Property Read CpuUsage As Float
Property Read MemoryUsage As Float
Property Read SwapUsage As Float
Property Read ProcessCount As Integer
Property Read Thermal As Float

Private Const ServiceName As String = "org.gambas.dataovermind-systemmonitor"
Private Const ObjectPath As String = "/org/dataovermind/systemmonitor"
Private Const InterfaceName As String = "org.gambas.dataovermind.systemmonitor.tfei"

Private $proxy As DBusProxy

Public Function GetText() As String
    
    Dim yukiFormat As String = (" Processor : &1   Memory : &2   Swap : &3   Processes : &4")
    Dim yukiCpuUsage As String = Format$($proxy.CpuUsage, "#0.00%")
    Dim yukiMemoryUsage As String = Format$($proxy.MemoryUsage, "#0.00%")
    Dim yukiSwapUsage As String = Format$($proxy.SwapUsage, "#0.00%")
    Dim yukiProcessCount As String = $proxy.ProcessCount
    
    Return Subst$(yukiFormat, yukiCpuUsage, yukiMemoryUsage, yukiSwapUsage, yukiProcessCount)
    
Catch
    Return "YUKI.N > Please wait ..."
    
End

Public Sub Activate()
    
    If Not DBus.Session.Applications.Exist(ServiceName) Then Try Shell "dataovermind-systemmonitor"

    If DBus.Session.Applications.Exist(ServiceName) Then 
        If Not Object.IsValid($proxy) Then $proxy = DBus[ServiceName][ObjectPath, InterfaceName]
    End If
    
End

Private Function Activated_Read() As Boolean

    If Not DBus.Session.Applications.Exist(ServiceName) Then Return False
    If Not Object.IsValid($proxy) Then Return False 

    Return True

End

Private Function CpuUsage_Read() As Float

    Return $proxy.CpuUsage

End

Private Function MemoryUsage_Read() As Float

    Return $proxy.MemoryUsage

End

Private Function SwapUsage_Read() As Float

    Return $proxy.SwapUsage

End

Private Function ProcessCount_Read() As Integer

    Return $proxy.ProcessCount

End

Private Function Thermal_Read() As Float

    If $proxy.ThermalCount = 0 Then Return 0

    Return ($proxy.GetTemperature(0)) / 1000

End
