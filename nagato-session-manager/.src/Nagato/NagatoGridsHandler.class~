' Gambas class file

Create Static

Property Read Padding As Integer
Property Read TargetSession As String

Private $globalGrid As GridView = HaruhiMain.GlobalAutostartGrid
Private $userGrid As GridView = HaruhiMain.UserAutostartGrid
Private $grid As GridView
Private $overriddens As New String[]
Private $hiddenByUser As New String[]

Private Sub initializeGrid(argGrid As GridView)
    
    $grid = argGrid
    
    With $grid
        .Rows.Count = 1
        .Columns.Count = 7
        .Columns[0].Width = Me.padding
        .Columns[1].Text = ("Application")
        .Columns[2].Text = ("Exec")
        .Columns[3].Text = ("Try Exec")
        .Columns[4].Text = ("Not Show In")
        .Columns[5].Text = ("Only Show In")
        .Columns[6].Text = ("Hidden")
    End With
    
    NagatoSettings.LoadGridsSettings($grid)
    
End

Private Sub setBackgroundColor(argColor As Integer, argIcon As Picture)
    
    Dim yukiCount As Integer
    
    $grid[$grid.Rows.Max, 0].Picture = argIcon
    
    For yukiCount = 0 To $grid.Columns.Max
        With $grid[$grid.Rows.Max, yukiCount]
            .Background = argColor
            .Foreground = Color.White
        End With
    Next
    
End

Private Sub setApplicationName(argBaseName As String)
    
    With $grid
        If .Font.TextWidth(argBaseName) + Me.padding > .Columns[1].Width Then
            .Columns[1].Width = .Font.TextWidth(argBaseName) + Me.padding
        Endif
    
        $grid[.Rows.Max, 1].Text = argBaseName
    End With
    
End

Private Sub setProperty(argIndex As Integer, argHeader As String, argProperty As String)
    
    $grid[$grid.Rows.Max, argIndex].Text = Replace$(argProperty, argHeader & "=", "")
    
End

Private Sub setNotShowInFlag(argLine As String, ByRef refFlag As Boolean)
    
    setProperty(4, "NotShowIn", argLine)

    If InStr(argLine, Me.TargetSession) > 0 Then refFlag = False
    
End

Private Sub setOnlyShowInFlag(argLine As String, ByRef refFlag As Boolean)
    
    setProperty(5, "OnlyShowIn", argLine)

    If InStr(argLine, Me.TargetSession) = 0 Then refFlag = False
    
End

Private Sub setHideFlag(argLine As String, ByRef refFlag As Boolean)
    
    setProperty(6, "Hidden", argLine)

    If argLine Ends "true" Then
        $hiddenByUser.Add($grid[$grid.Rows.Max, 1].Text)
        refFlag = False
    End If
    
End

Private Sub setOtherProperties(argFullPath As String)
    
    Dim yukiStream As Stream
    Dim yukiLine As String
    Dim yukiShow As Boolean = True
    
    yukiStream = Open (argFullPath) For Read
    
    While Not Eof(yukiStream)
        Line Input #yukiStream, yukiLine
        If yukiLine Begins "Exec" Then setProperty(2, "Exec", yukiLine)
        If yukiLine Begins "TryExec" Then setProperty(3, "TryExec", yukiLine)
        If yukiLine Begins "NotShowIn" Then setNotShowInFlag(yukiLine, ByRef yukiShow)
        If yukiLine Begins "OnlyShowIn" Then setOnlyShowInFlag(yukiLine, ByRef yukiShow)
        If yukiLine Begins "Hidden" Then setHideFlag(yukiLine, ByRef yukiShow)
    Wend
    
    If Not yukiShow Then setBackgroundColor(Color.Orange, Stock["small/halt"])
    If $overriddens.Exist($grid[$grid.Rows.Max, 1].Text) Then setBackgroundColor(Color.Red, Stock["small/warning"])
    
    Close #yukiStream
    
End

Private Sub initializeData(argDir As String)
    
    Dim yukiPath As String
    
    For Each yukiPath In Dir(argDir).Sort()
        setApplicationName(File.BaseName(yukiPath))
        setOtherProperties(argDir &/ yukiPath)
        Inc $grid.Rows.Count
    Next
    
End

Private Function getAllUserAutostart() As String[]
    
    Dim yukiCount As Integer
    Dim yukiResult As New String[]
    
    For yukiCount = 0 To $userGrid.Rows.Max
        yukiResult.Add($userGrid[yukiCount, 1].Text)
    Next
    
    Return yukiResult
    
End

Public Function ParsingAutostart(argGrid As GridView, argDir As String, Optional argOverriddens As String[]) As String[]
    
    If argOverriddens Then $overriddens = argOverriddens.Copy()
    
    initializeGrid(argGrid)
    initializeData(argDir)
    
    Return $hiddenByUser
    
End

Public Function HasUserAutostart(argFullPath As String) As Boolean
    
    Return getAllUserAutostart().Exist(File.BaseName(argFullPath))
    
End

Public Sub Refresh()
    
    Dim yukiOverriddens As String[]
    
    With NagatoGridsHandler
        yukiOverriddens = .ParsingAutostart($userGrid, MikuruAutostartDirectory.User)
        .ParsingAutostart($globalGrid, MikuruAutostartDirectory.Global, yukiOverriddens) ' not returns result
    End With
    
End

Private Function padding_Read() As Integer

    Return 16

End

Private Function TargetSession_Read() As String

    Return "NagatoSoftwareCompilation"

End
