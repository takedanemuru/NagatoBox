' Gambas class file

Create Static

Private $currentDirectory As String = User.Home
Private $paths As New NagatoPaths

Private Sub moveTo(argPath As String)
    
    If IsDir(argPath) Then
        $currentDirectory = argPath
    Else If MikuruOpenWith.Reset(argPath) Then 
        MikuruOpenWith.Select(argPath)
    End If
    
End

Private Sub moveToUserInputPath()
    
    Dim yukiPath As String = MikuruUserInput.GetFirstArgument(["move", "to"])
    
    If Exist(yukiPath) Then
        moveTo(yukiPath)
    Else
        MikuruDialog.Show("YUKI.N > I couldn't find the path. Press any key to continue")
    Endif
    
End

Private Sub catchWhereToMove()
    
    With MikuruUserInput
        If .CompleteMatch(["move", "root"]) Then
            moveTo("/")
        Else If .CompleteMatch(["move", "home"]) Then
            moveTo(User.Home)
        Else If .CompleteMatch(["move", "data"]) Then
            moveTo(Desktop.DataDir)
        Else If .CompleteMatch(["move", "config"]) Then 
            moveTo(Desktop.ConfigDir)
        Else
            moveToUserInputPath()
        End If
    End With
    
End

Private Sub catchCommand(argDirectory As String) As Boolean ' Return True when Break
    
    $paths.ClearFilter()
    
    MikuruUserInput(Subst$("YUKI.N > We are in &1, Where do you want to go ?", $currentDirectory))
    
    With MikuruUserInput
        If .Include(["here", "term", "terminal"]) Or If .CompleteMatch(["open", "terminal"]) Then
             NagatoGuake.AddTab($currentDirectory)
        Else If .Has("up") Then
            If $currentDirectory <> "/" Then $currentDirectory = File.Dir($currentDirectory)
        Else If .Include(["break", "back", "escape", "esc"]) Then
            Return True
        Else If .CompleteMatch(["show", "hidden"]) Then
            $paths.ShowHidden = True
        Else If .CompleteMatch(["hide", "hidden"]) Then
            $paths.ShowHidden = False
        Else If .CompleteMatch(["show", "property"]) And If .IsValidIndex($paths.Max) Then
            MikuruFileProperty.Show($currentDirectory &/ $paths[.Index])
        Else If .Has("move") Then
            catchWhereToMove()
        Else If .Include(["filter", "match", "matches"]) And If .Count > 1 Then
            $paths.SetFilter(MikuruUserInput.All)
        Else If .IsValidIndex($paths.Max) Then
            moveTo(argDirectory &/ $paths[.Index])
        End If
    End With
    
    Return False
    
End

Private Sub endlessEight()
    
    Do
        $paths.Set($currentDirectory)
        If catchCommand($currentDirectory) Then Break
    Loop
    
End

Public Sub Show(Optional argDirectory As String)
    
    If argDirectory Then $currentDirectory = argDirectory

    endlessEight()
        
End
