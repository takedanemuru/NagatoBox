' Gambas module file

Private Const CommandAdd As String = "eyeD3 --add-image=&1:FRONT_COVER &2"
Private Const CommandRemove As String = "eyeD3 --remove-images &1"

Private $workingDirectory As New NagatoWorkingDirectoryEyeD3

Private Sub setAlbumArtToFile(argPicturePath As String, argMusicPath As String)
    
    Dim yukiTempPath As String = Temp$() & ".png"
    Dim yukiCoverArt As Picture = MikuruCroppedImage(argPicturePath, MikuruUx.CoverArt.Size)
    
    yukiCoverArt.Save(yukiTempPath)
    
    Shell Subst$(CommandRemove, Quote$(argMusicPath)) Wait
    Shell Subst$(CommandAdd, Quote$(yukiTempPath), Quote$(argMusicPath)) Wait
    
End

Private Sub setAlbumArtToCurrentPlayingFile(argPicturePath As String, argMusicPath As String)
    
    NagatoQueue(MikuruSignal.QueuePause, Null)
        setAlbumArtToFile(argPicturePath, argMusicPath)
    NagatoQueue(MikuruSignal.QueuePlay, Null)
    
End

Public Function GetPicture(argPath As String, argSize As Integer) As Picture
    
    Dim yukiOutput As String
    
    $workingDirectory.Ensure()
    Try Shell Subst$("eyeD3 -i &1 &2", $workingDirectory.Path, Quote$(argPath)) To yukiOutput
    If Not yukiOutput Then Return Null
    If $workingDirectory.HasFile Then Return MikuruCroppedImage($workingDirectory[0], argSize)

Finally
    Return Null
    
End

Public Sub SetPicture(argMusicPath As String, argPicturePath As String)
    
    If (Media.URL(argMusicPath) = NagatoQueue.GetProperty(MikuruProperty.CurrentUrl)) Then
        setAlbumArtToCurrentPlayingFile(argPicturePath, argMusicPath)
    Else
        setAlbumArtToFile(argPicturePath, argMusicPath)
    Endif
    
End
