' Gambas class file

Inherits NagatoDB

Create Static

Public Const TableAlbumArt As String = "album_art"
Public Const ColumnId As String = "id"
Public Const ColumnArtist As String = "artist"
Public Const ColumnAlbum As String = "album"
Public Const ColumnPicture As String = "picture"

Public Const TableLibrary As String = "library"
Public Const ColumnPath As String = "path"
Public Const ColumnTitle As String = "title"
Public Const ColumnPlayTimes As String = "play_times"
Public Const ColumnStars As String = "stars"

Public Const TablePlaylistNames As String = "playlist_names"
Public Const ColumnPlaylistName As String = "playlist_name"
Public Const ColumnPlaylistOrder As String = "playlist_order"

Public Const TablePlaylistData As String = "playlist_data"
Public Const ColumnPlaylistNameId As String = "playlist_name_id"

Public _$uniqueName As String = "Media"

Private $tableAlbumArt As NagatoTableAlbumArt
Private $tableLibrary As NagatoTableLibrary
Private $tablePlaylistNames As NagatoTablePlaylistNames
Private $tablePlaylistData As NagatoTablePlaylistData

Private Sub deleteAlbumArt(argArtist As String, argAlbum As String)
    
    Me._$connection.Delete(TableAlbumArt, "artist = &1 and album = &2", argArtist, argAlbum)
    
End

Private Sub getAlbumAndArtistFromAlbumId(argId As Integer, ByRef refAlbum As String, ByRef refArtist As String)
    
    Dim yukiResult As Result = Me._$connection.Find(TableAlbumArt, "id = &1", argId)
    
    refAlbum = yukiResult[ColumnAlbum]
    refArtist = yukiResult[ColumnArtist]
    
End

Public Sub GetSongPathsFromAlbumId(argAlbumId As Integer) As String[]
    
    Dim yukiAlbum As String
    Dim yukiArtist As String
    Dim yukiResult As Result
    Dim yukiPaths As New String[]
    
    getAlbumAndArtistFromAlbumId(argAlbumId, ByRef yukiAlbum, ByRef yukiArtist)
    yukiResult = Me._$connection.Find(TableLibrary, "artist = &1 and album = &2", yukiArtist, yukiAlbum)
    
    For Each yukiResult
        If Exist(yukiResult[ColumnPath]) Then yukiPaths.Add(yukiResult[ColumnPath])
    Next
    
    Return yukiPaths
    
End

Public Function HasAlbumArt(argArtist As String, argAlbum As String) As Boolean
    
    Dim yukiResult As Result = Me._$connection.Find(TableAlbumArt, "artist = &1 and album = &2", argArtist, argAlbum)
    
    Return (yukiResult.Count > 0)
    
End

Public Function GetAlbumArt(argArtist As String, argAlbum As String) As Picture
    
    Dim yukiResult As Result = Me._$connection.Find(TableAlbumArt, "artist = &1 and album = &2", argArtist, argAlbum)
    
    Return MikuruBlob.GetPictureFromBlob(yukiResult[ColumnPicture].Data)
    
End

Public Function HasMusic(argArtist As String, argAlbum As String) As Boolean
    
    Dim yukiResult As Result = Me._$connection.Find(TableLibrary, "artist = &1 and album = &2", argArtist, argAlbum)
    
    Return IIf(yukiResult.Count = 0, False, True)
    
End

Public Function GetAllAlbum() As Result
    
    Dim yukiQuery As String = Subst$("select * from &1 order by &2 asc", TableAlbumArt, ColumnAlbum)
    
    Return Me._$connection.Exec(yukiQuery)
    
End

Public Sub SetAlbumArt(argArtist As String, argAlbum As String, argPicture As Picture) 
    
    Dim yukiResult As Result
    
    If HasAlbumArt(argArtist, argAlbum) Then deleteAlbumArt(argArtist, argAlbum)
    
    Me._$connection.Begin()
        yukiResult = Me._$connection.Create(TableAlbumArt)
        yukiResult[ColumnArtist] = argArtist
        yukiResult[ColumnAlbum] = argAlbum
        yukiResult[ColumnPicture] = MikuruBlob.GetBlobFromPicture(argPicture)
        yukiResult.Update()
    Me._$connection.Commit()
    
Catch
    Debug Error.Text
    Me._$connection.Rollback()
    
End

Public Sub ClearLibrsary()
    
    Me._$connection.Delete(TableLibrary)
    
End

Public Sub EnsureLibrary(argPath As String) ' MUST be fullpath.
    
    Dim yukiResult As Result
    
    If Me._$connection.Find(TableLibrary, "path = &1", argPath).Count > 0 Then Return
    
    Me._$connection.Begin()
        yukiResult = Me._$connection.Create(TableLibrary)
        yukiResult[ColumnTitle] = MikuruId3TagInfo.GetTitle(argPath)
        yukiResult[ColumnArtist] = MikuruId3TagInfo.GetArtist(argPath)
        yukiResult[ColumnAlbum] = MikuruId3TagInfo.GetAlbum(argPath)
        yukiResult[ColumnPath] = argPath
        yukiResult.Update()
    Me._$connection.Commit()
    
Catch
    Debug Error.Text
    Me._$connection.Rollback()
    
End

Public Sub SetLibrary(argPath As String, Optional argTitle As String, Optional argArtist As String, Optional argAlbum As String)
    
    Dim yukiResult As Result 
    Dim yukiTitle As String = IIf(argTitle, argTitle, File.BaseName(argPath))
    
    Me._$connection.Begin()
        yukiResult = Me._$connection.Edit(TableLibrary, "path = &1", argPath)
        yukiResult[ColumnTitle] = yukiTitle
        If argArtist Then yukiResult[ColumnArtist] = argArtist
        If argAlbum Then yukiResult[ColumnAlbum] = argAlbum
        yukiResult.Update()
    Me._$connection.Commit()
    
Catch
    Debug Error.Text
    Me._$connection.Rollback()
    
End

Public Sub AddLibrary(argPath As String, argTitle As String, argArtist As String, argAlbum As String)
    
    $tableLibrary.Add(argPath, argTitle, argArtist, argAlbum)
    
End

Public Function GetMusicResultByPath(argPath As String) As Result
    
    Me.EnsureLibrary(argPath)
    
    Return Me._$connection.Find(TableLibrary, "path = &1", argPath)
    
End

Public Function GetMusicCountInPlaylist(argPlaylistId As Integer) As Integer
    
    Return Me._$connection.Find(TablePlaylistData, "playlist_name_id = &1", argPlaylistId).Count
    
End

Public Function GetMusicPathsInPlaylist(argPlaylistName As String) As String[]
    
    Dim yukiResultForId As Result = Me._$connection.Find(TablePlaylistNames, "playlist_name = &1", argPlaylistName)
    Dim yukiResult As Result = Me._$connection.Find(TablePlaylistData, "playlist_name_id = &1", yukiResultForId[Me.ColumnId])
    Dim yukiPaths As New String[]
    
    For Each yukiResult
        yukiPaths.Add(yukiResult[Me.ColumnPath])
    Next
    
    Return yukiPaths
    
End

Public Function GetLibrary() As Result
    
    Dim yukiQuery As String = Subst$("select * from &1 order by &2 asc", TableLibrary, ColumnTitle)
    
    Return Me._$connection.Exec(yukiQuery)
    
End

Public Sub SaveAsPlaylist(argPlaylistName As String, argPaths As String[])
    
    $tablePlaylistNames.EnsurePlaylistName(argPlaylistName)
    $tablePlaylistData.OverwritePlaylist($tablePlaylistNames.GetPlaylistNameId(argPlaylistName), argPaths)
    
End

Public Sub HasPlaylist() As Boolean
    
    Return $tablePlaylistNames.HasResult()
    
End

Public Sub GetAllIdResult() As Result
    
    Return $tablePlaylistNames.GetAllResult()
    
End

Public Sub _new()
    
    Me._SetConnection()
    $tableAlbumArt = New NagatoTableAlbumArt(Me._$connection)
    $tableLibrary = New NagatoTableLibrary(Me._$connection)
    $tablePlaylistNames = New NagatoTablePlaylistNames(Me._$connection)
    $tablePlaylistData = New NagatoTablePlaylistData(Me._$connection)
    
End
