' Gambas class file

Create Static

Property Read Count As Integer
Property Read Paths As String[]
Property Read CurrentIndex As Integer
Property Read CurrentPath As String
Property Read State As Integer
Property Read Collection As Collection

Property Read CoverArt As Picture
Property Read Title As String
Property Read Artist As String
Property Read Album As String

Property Read ProgressRate As Float
Property Read ProgressText As String
Property Read SoftwareVolume As Float

Private $player As New NagatoPlayer As "Player"
Private $musicList As NagatoMusicList 
Private $coverArt As Picture

Event Moved
Event Changed
Event TagChanged
Event State
Event SelectionMoved(argIndexes As Integer[])

Public Function SetPath(argPath As String) As Boolean
    
    Return $musicList.SetPath(argPath)
    
End

Public Sub AddMusics(argPaths As String[])
    
    $musicList.AddMusics(argPaths)
    NagatoSettingsMusic.SavePaths($musicList.Paths)
    
    Raise Changed
    
Catch
    Debug "abort add music"
    Return
    
End

Public Sub AddDirectory(argPath As String)
    
    $musicList.AddDirectory(argPath)
    
End

Public Sub DeleteIndexes(argIndexes As Integer[])
    
    $player.Stop()
    If $musicList.DeleteIndexes(argIndexes) Then $player.Play()
    
End

Public Sub ClearAll()
    
    $player.Stop()
    $musicList.ClearAll()
    
End

Public Sub ListMoveUp(argIndexes As Integer[])
    
    If argIndexes.Count = 0 Then Return
    
    $musicList.MoveUp(argIndexes)
    
End

Public Sub ListMoveDown(argIndexes As Integer[])
    
    If argIndexes.Count = 0 Then Return

    $musicList.MoveDown(argIndexes)

End

Public Sub SavePaths()
    
    NagatoSettingsMusic.SavePaths($musicList.Paths)
    
End

Public Sub RefreshTag()
    
    Dim yukiPath As String = MikuruUrlDecode(Me.CurrentPath)
    
    $musicList.SetTag("Title", MikuruId3TagInfo.GetTitle(yukiPath))
    $musicList.SetTag("Artist", MikuruId3TagInfo.GetArtist(yukiPath))
    $musicList.SetTag("Album", MikuruId3TagInfo.GetAlbum(yukiPath))
    
    Raise TagChanged
    
End

Public Sub Activate(Optional argPaths As String[] = [""])
    
    $musicList = New NagatoMusicList(argPaths) As "MusicList"
    
    If $musicList.Count > 0 And If NagatoSettingsMusic.Shuffle Then $musicList.Next()
    
End

Public Sub _get(argIndex As Integer) As NagatoMusicElement
    
    Return $musicList.GetElement(argIndex)
    
End

Public Function GetProgressTextByRate(argRate As Float) As String
    
    Return $player.GetProgressTextByRate(argRate)
    
End

Public Sub Play()
    
    If Me.Count = 0 Then Return
    If $player.State <> Media.Playing Then $player.Play()
    
End

Public Sub Pause()
    
    $player.Pause()
    
End

Public Sub Next()
    
    If Me.Count = 0 Then Return
    
    $musicList.Next()
      
    If $player.State = Media.Playing Then
        Try $player.Play(0)
    Else
        $player.ResetUrl()
    End If
    
End

Public Sub Back()
    
    If Me.Count = 0 Then Return
    
    If $player.State = Media.Playing And If $player.ProgressRate > 0.05 Then
        $player.SetPosition(0)
    Else If $player.State = Media.Playing Then
        $musicList.Back()
        $player.Play(0)
    Else ' when $player is stopped/paused
        $musicList.Back()
        $player.ResetUrl()
    End If
    
End

Public Sub SetPathAndPlay(argPath As String)
    
    $player.SetUrlAndPlay(argPath)
    Raise Moved
    
End

Public Sub SetProgress(argProgress As Float) ' argFloat must be between 0 to 1
    
    $player.SetPosition(argProgress)
    
End

Public Sub StartRadio()
    
    Try $player.Stop()
    
End

Public Sub Sort(argType As Integer, argSortAscend As Boolean)
    
    If $musicList.Count = 0 Then Return
    
    $musicList.Sort(argType, argSortAscend)
    
End

Public Sub Player_MusicEnd()
    
    If NagatoSettingsMusic.Repeat Then
        Me.Back()
    Else
        Me.Next()
    End If
    
End

Public Sub Player_State()
    
    Raise State
    
End

Public Sub Player_FetchTags(argTags As Variant[])
    
    Dim yukiPath As String = MikuruUrlDecode(Me.CurrentPath)
    
    NagatoDBMedia.FetchTags(yukiPath, argTags)
    
    $musicList.SetTag("Title", MikuruId3TagInfo.GetTitle(yukiPath))
    $musicList.SetTag("Artist", MikuruId3TagInfo.GetArtist(yukiPath))
    $musicList.SetTag("Album", MikuruId3TagInfo.GetAlbum(yukiPath))
    
    Raise TagChanged
    
End

Public Sub MusicList_Moved()
    
    Dim yukiPath As String = MikuruPath.UrlToPath(Me.CurrentPath)
    
    $coverArt = MikuruEyeD3.GetPicture(yukiPath, 96)
    
    Raise Moved
    
End

Public Sub MusicList_Changed()
    
    NagatoSettingsMusic.SavePaths($musicList.Paths)
    
    Raise Changed
    
End

Public Sub MusicList_SelectionMoved(argSelection As Integer[])
    
    Raise SelectionMoved(argSelection)
    
End

Private Function Count_Read() As Integer

    Return $musicList.Count

Catch
    Return 0

End

Private Function CurrentIndex_Read() As Integer

    Return $musicList.CurrentPosition

End

Private Function Paths_Read() As String[]

    Return $musicList.Paths

End

Private Function Title_Read() As String

    Return IIf($musicList.Count > 0, $musicList.GetTag("Title"), "")

End

Private Function Artist_Read() As String

    Return IIf($musicList.Count > 0, $musicList.GetTag("Artist"), "")

End

Private Function Album_Read() As String

    Return IIf($musicList.Count > 0, $musicList.GetTag("Album"), "")

End

Private Function State_Read() As Integer

    Return $player.State

End

Private Function CurrentPath_Read() As String

    Return $musicList.CurrentPath

End

Private Function Collection_Read() As Collection

    Dim yukiCollection As New Collection
    Dim yukiIndex As Integer
    
    If $musicList.Count = 0 Then Return yukiCollection
    
    For yukiIndex = 0 To $musicList.Count - 1
        yukiCollection.Add($musicList.GetTitle(yukiIndex), $musicList.Paths[yukiIndex])
    Next
    
    Return yukiCollection

End

Private Function CoverArt_Read() As Picture

    Return $coverArt

End

Private Function ProgressRate_Read() As Float

    Return $player.ProgressRate

End

Private Function ProgressText_Read() As String

    Return $player.ProgressText

End

Private Function SoftwareVolume_Read() As Float

    Return $player.SoftwareVolume

End
