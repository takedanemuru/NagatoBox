' Gambas class file

' This class is not creatable, and act as a Array of NagatoMusicElement

Create Static

Property Read Count As Integer
Property Read Paths As String[]
Property Read CurrentIndex As Integer
Property Read Player As NagatoPlayer

Private $player As New NagatoPlayer As "Player"
Private $musicList As NagatoMusicList 

Event Moved
Event Changed

Public Function SetPath(argPath As String) As Boolean
    
    Return $musicList.SetPath(argPath)
    
End

Public Sub AddMusics(argPaths As String[])
    
    $musicList.AddMusics(argPaths)
    NagatoSettingsMusic.SavePaths($musicList.Paths)
    
    Raise Changed
    
End

Public Sub AddDirectory(argPath As String)
    
    $musicList.AddDirectory(argPath)
    
End

Public Sub InsertMusic(argPaths As String[])
    
    $player.Stop()
        $musicList.InsertMusic(argPaths)
    $player.Play()
    
End

Public Sub DeleteMusic(argPath As String)
    
    $player.Stop()
        $musicList.DeleteMusic(argPath)
    If $musicList.Count > 0 Then $player.Play()
    
End

Public Sub ClearAll()
    
    $player.Stop()
    $musicList.ClearAll()
    
End

Public Sub SavePaths()
    
    NagatoSettingsMusic.SavePaths($musicList.Paths)
    
End

Public Sub RefreshTag()
    
    Debug "force refresh current tag"
    
End

Public Sub Activate(Optional argPaths As String[] = [""])
    
    $musicList = New NagatoMusicList(argPaths) As "MusicList"
    
End

Public Sub _get(argIndex As Integer) As NagatoMusicElement
    
    Return $musicList.GetElement(argIndex)
    
End

Public Function GetProgressTextByRate(argRate As Float) As String
    
    Return $player.GetProgressTextByRate(argRate)
    
End

Public Sub Play()
    
    If Me.Count = 0 Then Return
    If $player.State <> Media.Playing Then $player.Play()
    
End

Public Sub Pause()
    
    $player.Pause()
    
End

Public Sub Next()
    
    If Me.Count = 0 Then Return
    
    If $player.State = 4 Then $musicList.Next()
      
    Try $player.Play(0)
    
End

Public Sub Back()
    
    If Me.Count = 0 Then Return
    
    If $player.State = 4 Then
        If $player.ProgressRate > 0.05 Then
            $player.SetPosition(0)
        Else 
            $musicList.Back()
            $player.Play(0)
        End If
    Else
        $player.Play(0)
    End If
    
End

Public Sub SetPathAndPlay(argPath As String)
    
    $player.SetUrlAndPlay(argPath)
    Raise Moved
    
End

Public Sub SetProgress(argProgress As Float) ' argFloat must be between 0 to 1
    
    $player.SetPosition(argProgress)
    
End

Public Sub StartRadio()
    
    Try $player.Stop()
    
End

Public Sub Sort(argType As Integer, argSortAscend As Boolean)
    
    If $musicList.Count = 0 Then Return
    
    $musicList.Sort(argType, argSortAscend)
    
End

Public Sub Player_MusicEnd()
    
    If NagatoSettingsMusic.Repeat Then
        Me.Back()
    Else
        Me.Next()
    End If
    
End

Public Sub MusicList_Moved()
    
    Raise Moved
    
End

Public Sub MusicList_Changed()
    
    NagatoSettingsMusic.SavePaths($musicList.Paths)
    
    Raise Changed
    
End

Private Function Count_Read() As Integer

    Return $musicList.Count

Catch
    Return 0

End

Private Function Player_Read() As NagatoPlayer

    Return $player

End

Public Function GetCurrentPath(argUndecoded As Boolean) As String
    
    Return $musicList.CurrentPath
    
End

Private Function CurrentIndex_Read() As Integer

    Return $musicList.CurrentPosition

End

Private Function Paths_Read() As String[]

    Return $musicList.Paths

End
