' Gambas class file

Create Static

Property Read ChannelPlayControl As NagatoQueueAssistantPlayControl
Property Read ChannelPlayState As NagatoQueueAssistantPlayState
Property Read ChannelCoverArt As NagatoQueueAssistantCoverArt
Property Read ChannelList As NagatoQueueAssistantList

Private $player As New NagatoPlayer As "Player"
Private $musicList As NagatoMusicList 
Private $assistantPlayControl As NagatoQueueAssistantPlayControl
Private $assistantPlayState As NagatoQueueAssistantPlayState
Private $assistantCoverArt As NagatoQueueAssistantCoverArt
Private $assistantList As NagatoQueueAssistantList

Event Moved
Event Changed
Event TagChanged
Event SelectionMoved(argIndexes As Integer[])

Public Sub AddMusics(argPaths As String[])
    
    $musicList.AddMusics(argPaths)
    NagatoSettingsMusic.SavePaths($musicList.Paths)
    
    Raise Changed
    
Catch
    Return
    
End

Public Sub DeleteIndexes(argIndexes As Integer[])
    
    $player.Stop()
    If $musicList.DeleteIndexes(argIndexes) Then $player.Play()
    
End

Public Sub EditIndexes(argIndexes As Integer[])
    
    With MikuruDialogPortalTagEdit
        If argIndexes.Count = 1 Then .SetTag($musicList.GetElement(argIndexes[0]).Path)
        If argIndexes.Count > 0 Then .SetTagBulk($musicList.GetPathsFromIndexes(argIndexes))
    End With
    
End

Public Sub ClearAll()
    
    $player.Stop()
    $musicList.ClearAll()
    
End

Public Sub RefreshTag()
    
    $musicList.SetTag("Title", MikuruId3TagInfo.GetTitle($musicList.CurrentPath))
    $musicList.SetTag("Artist", MikuruId3TagInfo.GetArtist($musicList.CurrentPath))
    $musicList.SetTag("Album", MikuruId3TagInfo.GetAlbum($musicList.CurrentPath))
    
    Raise TagChanged
    
End

Public Sub Activate(Optional argPaths As String[] = [""])
    
    $musicList = New NagatoMusicList(argPaths) As "MusicList"
    $assistantPlayControl = New NagatoQueueAssistantPlayControl($player, $musicList)
    $assistantPlayState = New NagatoQueueAssistantPlayState($player)
    $assistantCoverArt = New NagatoQueueAssistantCoverArt($musicList)
    $assistantList = New NagatoQueueAssistantList($musicList)
    
End

Public Sub _get(argIndex As Integer) As NagatoMusicElement
    
    Return $musicList.GetElement(argIndex)
    
End

Public Sub SetPathAndPlay(argPath As String)
    
    $player.SetUrlAndPlay(argPath)

    Raise Moved
    
End

Public Sub Sort(argType As Integer, argSortAscend As Boolean)
    
    If $musicList.Count > 0 Then $musicList.Sort(argType, argSortAscend)
    
End

Public Sub Player_State(argState As Integer)
    
    Raise State(argState)
    
End

Public Sub Player_FetchDuration(argDuration As Float)
    
    If NagatoDBMedia.FetchDuration($musicList.CurrentPath, argDuration) Then Raise TagChanged
    
End

Public Sub Player_FetchTags(argTags As Variant[])
    
    If Not NagatoDBMedia.FetchTags($musicList.CurrentPath, argTags) Then Return
    
    $musicList.SetTag("Title", argTags[0])
    $musicList.SetTag("Artist", argTags[1])
    $musicList.SetTag("Album", argTags[2])
    
    Raise TagChanged
    
End

Public Sub MusicList_Moved()
    
    $assistantCoverArt.Reload()
    
    Raise Moved
    
End

Public Sub MusicList_Changed()
    
    NagatoSettingsMusic.SavePaths($musicList.Paths)
    
    Raise Changed
    
End

Public Sub MusicList_SelectionMoved(argSelection As Integer[])
    
    Raise SelectionMoved(argSelection)
    
End

Public Function GetTag(argTagType As Integer) As String
    
    Return $musicList.GetTag(argTagType)
    
End

Private Function ChannelPlayControl_Read() As NagatoQueueAssistantPlayControl

    Return $assistantPlayControl

End

Private Function ChannelPlayState_Read() As NagatoQueueAssistantPlayState

    Return $assistantPlayState

End

Private Function ChannelCoverArt_Read() As NagatoQueueAssistantCoverArt

    Return $assistantCoverArt

End

Private Function ChannelList_Read() As NagatoQueueAssistantList

    Return $assistantList

End
