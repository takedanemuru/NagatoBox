' Gambas class file

Property Read CurrentPath As String
Property Read CurrentPosition As Integer
Property Read Paths As String[]
Property Read Count As Integer

Private $currentPosition As Integer 
Private $paths As New String[] 

Event Moved
Event Changed

Private Sub setNewMusicMessage(argCount As Integer)
    
    If argCount = 1 Then
        HaruhiPlayer.SetMessage("<b>1 music is added</b>", 5)
    Else If argCount > 1 Then
        HaruhiPlayer.SetMessage(Subst$("<b>&1 musics are added</b>", argCount), 5)
    End If
    
    If argCount > 0 Then Raise Changed
    
End

Private Sub normalNext()
    
    If $currentPosition = $paths.Max Then
        $currentPosition = 0
    Else
        Inc $currentPosition
    Endif
    
    Raise Moved
    
End

Private Sub shuffleNext()
    
    Dim yukiIndex As Integer

    Debug $currentPosition
    
    Do
        yukiIndex = Rnd(0, $paths.Count)
        If yukiIndex <> $currentPosition Then
            $currentPosition = yukiIndex
            Break
        End If
    Loop
    
    Debug yukiIndex
    
    Raise Moved
    
End

Private Sub normalBack()
    
    If $currentPosition = 0 Then
        $currentPosition = $paths.Max
    Else
        Dec $currentPosition
    Endif
    
    Raise Moved
    
End

Public Sub EnsurePaths(argPaths As String[])
    
    Dim yukiPath As String
    
    $paths = MikuruPath.Sanitize(argPaths.Insert(NagatoSettingsMusic.LoadPaths()))
    
    For Each yukiPath In $paths
        NagatoDBMedia.EnsureLibrary(yukiPath)
    Next
    
End

Public Function SetPath(argPath As String) As Boolean
    
    If $paths.Find(argPath) = -1 Then  'Array.Find()  shall retun -1 when argument is not found
        Return False
    Else
        $currentPosition = $paths.Find(argPath)
        Raise Moved
        Return True
    End If
    
End

Public Sub AddMusics(argPaths As String[])
    
    Dim yukiPath As String
    Dim yukiCount As Integer = 0
    
    For Each yukiPath In MikuruPath.Sanitize(argPaths)
        $paths.Add(yukiPath)
        Inc yukiCount
    Next
    
    setNewMusicMessage(yukiCount)
    
End

Public Sub AddDirectory(argPath As String)
    
    Dim yukiPath As String
    Dim yukiPaths As New String[]
    
    For Each yukiPath In RDir(argPath)
        yukiPaths.Add(argPath &/ yukiPath)
    Next
    
    If yukiPaths.Count > 0 Then Me.AddMusics(yukiPaths)
    
End

Public Sub InsertMusic(argPaths As String[])
    
    $paths = argPaths.Insert($paths).Copy()
    $currentPosition = 0
    
    Raise Changed
    
End

Public Sub DeleteMusic(argPath As String)
    
    Dim yukiIndex As Integer = $paths.Find(argPath)

    If yukiIndex = -1 Then Return
    
    $paths.Remove(yukiIndex)
    Raise Changed
    
End

Public Sub ClearAll()
    
    $currentPosition = 0
    $paths.Clear()
    HaruhiPlayer.SetMessage(("Playlist is cleared."), 5)

    Raise Changed
    
End

Public Sub Next()
    
    If Me.Count = 0 Then Return
    
    If NagatoSettingsMusic.Shuffle Then
        shuffleNext()
    Else
        normalNext()
    End If
    
End

Public Sub Back()
    
    If Me.Count = 0 Then Return
    
    If NagatoSettingsMusic.Shuffle Then
        shuffleNext()
    Else 
        normalBack()
    End If
    
End

Public Sub MoveToPath(argPath As String)
    
    If Not $paths.Exist(argPath) Then Return
    
    $currentPosition = $paths.Find(argPath)
    
    Raise Moved
    
End

Private Function CurrentPath_Read() As String

    Return $paths[$currentPosition]

Catch
    Return ""

End

Private Function CurrentPosition_Read() As Integer

    Return $currentPosition

End

Private Function Paths_Read() As String[]

    Return $paths

End

Private Function Count_Read() As Integer

    Return $paths.Count

End
