' Gambas class file

Property Read ProgressRate As Float
Property Read ProgressText As String
Property SoftwareVolume As Float
Property Read State As Integer

Private $player As New MediaPlayer As "Player"
Private $lastFetched As Date
Private $durationFetcher As New NagatoDurationFetcher

Event MusicEnd
Event FetchTags(argMediaTagList As MediaTagList)
Event FetchDuration(argDuration As Float)

Private Function getDuration(Optional argRate As Float = 0) As String
    
    Return MikuruFloatToTime($player.Duration * argRate)
    
End

Public Function GetProgressTextByRate(argRate As Float) As String ' argRate MUST be between 0 to 1

    Return Subst$("&1 / &2", getDuration(Min(argRate, 1)), getDuration(1))

Catch
    Return ""

End

Public Sub SetPosition(argRate As Float) 
    
    If argRate > 1 Then argRate = 1
    
    $player.Position = $player.Duration * argRate
    
End

Public Sub SetUrlAndPlay(argPath As String)
    
    If NagatoQueue.ChannelList.SetPath(argPath) Then
        Try $player.Stop
        $player.URL = Media.URL(argPath)
        $player.Play()
    End If
    
Catch
    Return
    
End

Public Sub Play(Optional argPosition As Float)
    
    If $player.State <> Media.Paused Then
        Try $player.Stop
        Try $player.URL = NagatoQueue.ChannelList.CurrentUrl
    End If
    
    $player.Play()
    
Catch
    Return
    
End

Public Sub ResetUrl()
    
    Try $player.Stop()
    $player.URL = NagatoQueue.ChannelList.CurrentUrl
    $player.Position = 0
    
End

Public Sub Pause()
    
    Try $player.Pause()
   
End

Public Sub Stop()
    
    Try $player.Stop()
    
End

Public Sub Player_End()
    
    Raise MusicEnd
    
End

Public Sub Player_Tag(argTagList As MediaTagList)
    
    If ($lastFetched = Null) Or If DateDiff($lastFetched, Now(), gb.Second) > 2 Then 
        Raise FetchTags(argTagList)
        $lastFetched = Now()
    End If
    
End

Private Function ProgressRate_Read() As Float

    If $durationFetcher($player.Duration) Then Raise FetchDuration($player.Duration)

    Return ($player.Position / $player.Duration)

Catch
    Debug Error.Text
    Return 0
    
End

Private Function ProgressText_Read() As String

    If $player.Duration = 0 Then Return ""
    
    Return Subst$("&1 / &2", MikuruFloatToTime($player.Position), MikuruFloatToTime($player.Duration))

End

Private Function State_Read() As Integer

    Return $player.State

Catch
    Return MediaPlayer.Null

End

Private Function SoftwareVolume_Read() As Float

    Return $player.Audio.Volume

Catch
    Return 0

End

Private Sub SoftwareVolume_Write(Value As Float)

    Try $player.Audio.Volume = Min(Value, 1)

End
