' Gambas class file

Property Read CurrentUrl As String
Property Read CurrentPath As String
Property Read CurrentPosition As Integer
Property Read Paths As String[]
Property Read Count As Integer

Private $assistantMove As NagatoMusicListAssistantMove
Private $musicElements As New NagatoMusicElements
Private $position As New NagatoMusicPosition As "MusicPosition"

Event Moved
Event Changed
Event SelectionMoved(argSelection As Integer[])

Public Function GetPathsFromIndexes(argIndexes As Integer[]) As String[]
    
    Dim yukiResult As New String[]
    Dim yukiIndex As Integer
    
    For Each yukiIndex In argIndexes
        If yukiIndex >= $musicElements.Count Then Continue
        yukiResult.Add($musicElements[yukiIndex].Path)
    Next
    
    Return yukiResult
    
End

Public Function SetPath(argPath As String) As Boolean
    
    If $musicElements.FindIndex(argPath) = -1 Then  'Array.Find()  shall retun -1 when argument is not found
        Return False
    Else
         $position.Current = $musicElements.FindIndex(argPath) 
        Raise Moved
        Return True
    End If
    
End

Public Sub AddMusics(argPaths As String[])
    
    Dim yukiCount As Integer = $musicElements.AddMusics(argPaths)

    If yukiCount = 0 Then Return
    
    If MikuruMessage.SetNewMusic(yukiCount) Then Raise Changed
    $position.Refresh($musicElements.Count)
    
End

Public Sub AddDirectory(argPath As String)
    
    Dim yukiPath As String
    Dim yukiPaths As New String[]
    
    For Each yukiPath In RDir(argPath)
        yukiPaths.Add(argPath &/ yukiPath)
    Next
    
    If yukiPaths.Count > 0 Then Me.AddMusics(yukiPaths)
    
End

Public Function DeleteIndexes(argIndexes As Integer[]) As Boolean
    
    If $musicElements.DeleteIndexes(argIndexes) Then Raise Changed
    $position.Refresh($musicElements.Count)
    
    Return ($musicElements.Count > 0)
    
End

Public Sub ClearAll()
    
    $position.Current = 0
    $musicElements.Clear()
    HaruhiPlayer.SetMessage(("Playlist is cleared."), 5)

    Raise Changed
    
End

Public Sub Next()
    
    $position.Next($musicElements.Count)
    
End

Public Sub Back()
    
    $position.Back($musicElements.Count)
    
End

Public Sub MoveToPath(argPath As String)
    
    If $musicElements.FindIndex(argPath) = -1 Then Return
    $position.Current = $musicElements.FindIndex(argPath)
    
    Raise Moved
    
End

Private Function Count_Read() As Integer

    Return $musicElements.Count

End

Public Sub _new(argPaths As String[])
    
    $musicElements.Initialize(argPaths)
    $assistantMove = New NagatoMusicListAssistantMove($musicElements, $position)
    
    If $musicElements.Count = 0 Then Return  
    $position.Refresh($musicElements.Count)
    If NagatoSettingsMusic.Shuffle Then Me.Next()
    Raise Changed
    
End

Public Function GetElement(argIndex As Integer) As NagatoMusicElement
    
    Return $musicElements[argIndex]
    
End

Public Function GetCollection() As Collection
    
    Dim yukiCollection As New Collection
    Dim yukiIndex As Integer
    
    For yukiIndex = 0 To Me.Count - 1
        yukiCollection.Add($musicElements[yukiIndex].Title, Me.Paths[yukiIndex])
    Next
    
    Return yukiCollection
    
End

Public Function GetTag(argTagType As Integer) As String
    
    If $musicElements.Count = "" Then Return ""
    
    Return $musicElements.GetTag(argTagType, $position.Current)
    
End

Public Sub SetTag(argTag As String, argValue As String) 
    
    $musicElements.SetTag(argTag, $position.Current, argValue)
    
End

Public Sub MoveDown(argSelection As Integer[])
    
    Dim yukiNewSelection As Integer[] = $assistantMove.Down(argSelection)
    
    Raise SelectionMoved(yukiNewSelection)
    
End

Public Sub MoveUp(argSelection As Integer[])
    
    Dim yukiNewSelection As Integer[] = $assistantMove.Up()
    
    Raise SelectionMoved(yukiNewSelection)
    
End

Public Sub Sort(argType As Integer, argSortAscend As Boolean)
    
    $assistantMove.Sort(argType, argSortAscend)
    
    Raise Changed
    
End

Private Function CurrentUrl_Read() As String

    Return Media.URL($musicElements[$position.Current].Path)

Catch
    Return ""

End

Private Function CurrentPosition_Read() As Integer

    Return $position.Current

End

Private Function Paths_Read() As String[]

    Dim yukiPaths As New String[]
    Dim yukiCount As Integer
    
    For yukiCount = 0 To $musicElements.Count - 1
        yukiPaths.Add($musicElements[yukiCount].Path)
    Next

    Return yukiPaths

End

Public Sub MusicPosition_Moved()
    
    Raise Moved
    
End

Private Function CurrentPath_Read() As String

    Return $musicElements[$position.Current].Path

Catch
    Return ""

End
