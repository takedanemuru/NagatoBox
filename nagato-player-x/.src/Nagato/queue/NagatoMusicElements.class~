' Gambas class file

Property Read Count As Integer
Property Read Paths As String[]

Private $musicElements As New NagatoMusicElement[]

Private Function isPlayableFormat(argPath As String) As Boolean
    
    If File.Ext(argPath) = "m4a" Then Return False
    
    Return True
    
End

Private Sub addElement(argPath As String)
    
    Dim yukiElement As NagatoMusicElement
    
    NagatoDBMedia.EnsureLibrary(argPath)
    yukiElement = New NagatoMusicElement(argPath)
    $musicElements.Add(yukiElement)
    
End

Public Function FindIndex(argPath As String) As Integer
    
    Dim yukiCount As Integer
    
    For yukiCount = 0 To $musicElements.Max
        If $musicElements[yukiCount].Path = argPath Then Return yukiCount
    Next
    
    Return -1
    
End

Public Function AddMusics(argPaths As String[]) As Integer
    
    Dim yukiPath As String
    Dim yukiCount As Integer = 0
    
    For Each yukiPath In MikuruPath.Sanitize(argPaths)
        If Not isPlayableFormat(yukiPath) Then Continue
        addElement(yukiPath)
        Inc yukiCount
    Next
    
    Return yukiCount
    
End 

Public Function DeleteIndexes(argIndexes As Integer[]) As Boolean
    
    Dim yukiIndex As Integer
    Dim yukiFlag As Boolean = False
    
    For Each yukiIndex In argIndexes.Sort(gb.Descent)
        If yukiIndex > $musicElements.Max Then Continue
        $musicElements.Remove(yukiIndex)
        yukiFlag = True
    Next
    
    Return yukiFlag
    
End

Public Sub Clear()
    
    $musicElements.Clear()
    
End

Public Sub Initialize(argPaths As String[])
    
    Dim yukiPath As String
    
    For Each yukiPath In MikuruPath.Sanitize(argPaths.Insert(NagatoSettingsMusic.LoadPaths()))
        addElement(yukiPath)
    Next
    
End

Public Sub _get(argIndex As Integer) As NagatoMusicElement
    
    Return $musicElements[argIndex]
    
End

Public Function GetTag(argTag As Integer, argIndex As Integer) As String
    
    Select Case argTag
        Case MikuruTag.Title
            Return $musicElements[argIndex].Title
        Case MikuruTag.Artist
            Return $musicElements[argIndex].Artist
        Case MikuruTag.Album
            Return $musicElements[argIndex].Album
    End Select
    
Catch
    Return ""
    
End

Public Sub SetTag(argIndex As Integer, argTitle As String, argArtist As String, argAlbum As String) 
    
    $musicElements[argIndex].Title = argTitle
    $musicElements[argIndex].Artist = argArtist
    $musicElements[argIndex].Album = argAlbum
    
Catch
    Return
    
End

Public Sub Set(argMusicElements As NagatoMusicElement[])
    
    $musicElements = argMusicElements
    
End

Private Function Count_Read() As Integer

    Return $musicElements.Count

End

Private Function Paths_Read() As String[]

    Dim yukiPaths As New String[]
    Dim yukiCount As Integer
    
    For yukiCount = 0 To $musicElements.Count - 1
        yukiPaths.Add($musicElements[yukiCount].Path)
    Next

    Return yukiPaths

End
