' Gambas class file

Property Read Rate As Float
Property Read Text As String
Property SoftwareVolume As Float
Property Read State As Integer
Property Read IsPlaying As Boolean

Private $player As New MediaPlayer As "Player"
Private $durationFetcher As New NagatoDurationFetcher 

Event MusicEnd
Event FetchDuration(argDuration As Float)

Private Function getDuration(Optional argRate As Float = 0) As String
    
    Return MikuruFloatToTime($player.Duration * argRate)
    
End

Public Function GetTextByRate(argRate As Float) As String ' argRate MUST be between 0 to 1

    Return Subst$("&1 / &2", getDuration(Min(argRate, 1)), getDuration(1))

Catch
    Return ""

End

Public Sub SetByRate(argRate As Float) 
    
    If argRate > 1 Then argRate = 1
    
    $player.Position = $player.Duration * argRate
    
End

Public Sub SetPathAndPlay(argPath As String)
    
    If Not NagatoQueue.ChannelList.SetPath(argPath) Then Return
    Try $player.Stop
    $player.URL = Media.URL(argPath)
    $player.Play()
    
Catch
    Return
    
End

Public Sub Play(Optional argPosition As Float)
    
    If $player.State <> Media.Paused Then
        Try $player.Stop
        Try $player.URL = NagatoQueue.ChannelCurrent.Url
    End If
    
    $player.Play()
    If argPosition Then $player.Position = argPosition
    
Catch
    Return
    
End

Public Sub ResetUrl()
    
    Try $player.Stop()
    $player.URL = NagatoQueue.ChannelCurrent.Url
    $player.Position = 0
    
End

Public Sub Pause()
    
    Try $player.Pause()
   
End

Public Sub Stop()
    
    Try $player.Stop()
    
End

Public Sub Player_End()
    
    Raise MusicEnd
    
End

Private Function Rate_Read() As Float

    If $durationFetcher($player.Duration) Then Raise FetchDuration($player.Duration)

    Return ($player.Position / $player.Duration)

Catch
    Return 0
    
End

Private Function Text_Read() As String

    If $player.Duration = 0 Then Return ""
    
    Return Me.GetTextByRate($player.Position / $player.Duration)

End

Private Function State_Read() As Integer

    Return $player.State

Catch
    Return MediaPlayer.Null

End

Private Function SoftwareVolume_Read() As Float

    Return $player.Audio.Volume

Catch
    Return 0

End

Private Sub SoftwareVolume_Write(Value As Float)

    Try $player.Audio.Volume = Min(Value, 1)

End

Private Function IsPlaying_Read() As Boolean

    Return $player.State = Media.Playing

End
