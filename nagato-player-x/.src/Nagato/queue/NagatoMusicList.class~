' Gambas class file

Property Read CurrentPath As String
Property Read CurrentPosition As Integer
Property Read Paths As String[]
Property Read Count As Integer

Private $musicElements As New NagatoMusicElements
Private $position As New NagatoMusicPosition As "MusicPosition"

Event Moved
Event Changed

Public Function SetPath(argPath As String) As Boolean
    
    Debug $musicElements.FindIndex(argPath)
    
    If $musicElements.FindIndex(argPath) = -1 Then  'Array.Find()  shall retun -1 when argument is not found
        Return False
    Else
         $position.Current = $musicElements.FindIndex(argPath) 
        Raise Moved
        Return True
    End If
    
End

Public Sub AddMusics(argPaths As String[])
    
    Dim yukiCount As Integer = $musicElements.AddMusics(argPaths)

    If yukiCount = 0 Then Return
    
    If MikuruMessage.SetNewMusic(yukiCount) Then Raise Changed
    $position.Refresh($musicElements.Count)
    
End

Public Sub AddDirectory(argPath As String)
    
    Dim yukiPath As String
    Dim yukiPaths As New String[]
    
    For Each yukiPath In RDir(argPath)
        yukiPaths.Add(argPath &/ yukiPath)
    Next
    
    If yukiPaths.Count > 0 Then Me.AddMusics(yukiPaths)
    
End

Public Sub DeleteMusic(argPath As String)
    
    Dim yukiDeleteIndex As Integer = $musicElements.FindIndex(argPath)
    
    If 0 > yukiDeleteIndex Then Return
    
    If $musicElements.DeleteMusic(argPath) Then Raise Changed
    $position.Refresh($musicElements.Count)
    
End

Public Sub ClearAll()
    
    $position.Current = 0
    $musicElements.Clear()
    HaruhiPlayer.SetMessage(("Playlist is cleared."), 5)

    Raise Changed
    
End

Public Sub Next()
    
    $position.Next($musicElements.Count)
    
End

Public Sub Back()
    
    $position.Back($musicElements.Count)
    
End

Public Sub MoveToPath(argPath As String)
    
    If $musicElements.FindIndex(argPath) = -1 Then Return
    
    $position.Current = $musicElements.FindIndex(argPath)
    
    Raise Moved
    
End

Private Function Count_Read() As Integer

    Return $musicElements.Count

End

Public Sub _new(argPaths As String[])
    
    $musicElements.Initialize(argPaths)
    
    If $musicElements.Count > 0 Then 
        $position.Refresh($musicElements.Count)
        Raise Changed
    End If
    
End

Public Function GetElement(argIndex As Integer) As NagatoMusicElement
    
    Return $musicElements[argIndex]
    
End

Public Function GetTag(argTag As String) As String
    
    Return $musicElements.GetTag(argTag, $position.Current)
    
End

Public Sub SetTag(argTag As String, argValue As String) 
    
    $musicElements.SetTag(argTag, $position.Current, argValue)
    
End

Public Sub Sort(argType As Integer, argSortAscend As Boolean)
    
    Dim yukiPath As String = $musicElements[$position.Current].Path
    Dim yukiBuffer As New NagatoSortBuffer(argType, argSortAscend)
    Dim yukiCount As Integer
    
    For yukiCount = 0 To $musicElements.Count - 1
        yukiBuffer.Set($musicElements[yukiCount], (yukiCount = $position.Current))
    Next
    
    $musicElements.Set(yukiBuffer.Elements)
    $position.ResetOnSort(yukiBuffer.Current, $musicElements.Count)
    
    Raise Changed
    
End

Private Function CurrentPath_Read() As String

    Return MikuruPath.GetUrl($musicElements[$position.Current].Path)

Catch
    Return ""

End

Private Function CurrentPosition_Read() As Integer

    Return $position.Current

End

Private Function Paths_Read() As String[]

    Dim yukiPaths As New String[]
    Dim yukiCount As Integer
    
    For yukiCount = 0 To $musicElements.Count - 1
        yukiPaths.Add($musicElements[yukiCount].Path)
    Next

    Return yukiPaths

End

Public Sub MusicPosition_Moved()
    
    Raise Moved
    
End
