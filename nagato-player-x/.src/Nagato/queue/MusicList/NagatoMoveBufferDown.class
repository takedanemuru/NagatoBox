' Gambas class file

Property Read Buffer As NagatoMusicElement[]
Property Read NewSelection As Integer[]
Property Read NewPosition As Integer

Private $buffer As New NagatoMusicElement[]
Private $newCurrentPosition As Integer
Private $newSelection As New Integer[]
Private $insertPosition As Integer 

Private $baseElements As NagatoMusicElements
Private $position As Integer

Private Sub moveUnselected(argSelection As Integer[])
    
    Dim yukiIndex As Integer
    Dim yukiMax As Integer = argSelection.Sort()[argSelection.Max]
    
    For yukiIndex = 0 To $baseElements.Count - 1
        If argSelection.Exist(yukiIndex) Then Continue
        $buffer.Add($baseElements[yukiIndex])
        If yukiIndex = (yukiMax + 1) Then $insertPosition = yukiIndex 
        If yukiIndex = $position Then $newCurrentPosition = yukiIndex
    Next
    
    $insertPosition -= 1
    
End

Private Sub adjustPositionIndexes(argIndex As Integer)
    
   If argIndex = $position Then
        $newCurrentPosition = $insertPosition
   Else If $newCurrentPosition > $insertPosition Then 
       Inc $newCurrentPosition
   End If
    
End

Private Sub moveSelected(argSelection As Integer[])
    
    Dim yukiIndex As Integer
    
    For Each yukiIndex In argSelection
        $buffer.Add($baseElements[yukiIndex], $insertPosition)
        adjustPositionIndexes(yukiIndex)
        $newSelection.Add($insertPosition)
        Inc $insertPosition
   Next
    
End

Public Sub _new(argBaseElements As NagatoMusicElements, argPosition As Integer, argSelection As Integer[])
    
    $baseElements = argBaseElements
    $position = argPosition
    
    moveUnselected(argSelection)
    moveSelected(argSelection)
    
End

Private Function Buffer_Read() As NagatoMusicElement[]

    Return $buffer

End

Private Function NewSelection_Read() As Integer[]

    Return $newSelection

End

Private Function NewPosition_Read() As Integer

    Return $newCurrentPosition

End
