' Gambas class file

Inherits NagatoMusicListAssistant

Property Read Count As Integer

Private Sub musicListChanged()
    
    NagatoSettingsMusic.SavePaths(Me._$musicElements.Paths)
    NagatoBroadCast(NagatoBroadCast.SignalChanged)
    
End

Public Sub EnqueuePaths(argPaths As String[])
    
    Dim yukiCount As Integer = Me._$musicElements.AddMusics(argPaths)

    If yukiCount = 0 Then Return
    
    If MikuruMessage.SetNewMusic(yukiCount) Then musicListChanged()
    Me._$position.Refresh(Me._$musicElements.Count)
    
End

Public Sub EnqueueDirectory(argPath As String)
    
    Dim yukiPath As String
    Dim yukiPaths As New String[]
    
    For Each yukiPath In RDir(argPath)
        yukiPaths.Add(argPath &/ yukiPath)
    Next
    
    If yukiPaths.Count > 0 Then Me.EnqueuePaths(yukiPaths)
    
End

Public Function DequeueIndexes(argIndexes As Integer[]) As Boolean
    
    If Me._$musicElements.DeleteIndexes(argIndexes) Then musicListChanged()
    Me._$position.Refresh(Me._$musicElements.Count)
    
    Return (Me._$musicElements.Count > 0)
    
End

Public Function GetCollection() As Collection
    
    Dim yukiCollection As New Collection
    Dim yukiIndex As Integer
    
    For yukiIndex = 0 To Me._$musicElements.Count - 1
        yukiCollection.Add(Me._$musicElements[yukiIndex].Title, Me._$musicElements.Paths[yukiIndex])
    Next
    
    Return yukiCollection
    
End

Public Function GetPathsByIndexes(argIndexes As Integer[]) As String[]
    
    Dim yukiResult As New String[]
    Dim yukiIndex As Integer
    
    For Each yukiIndex In argIndexes
        If yukiIndex >= Me._$musicElements.Count Then Continue
        yukiResult.Add(Me._$musicElements[yukiIndex].Path)
    Next
    
    Return yukiResult
    
End

Public Sub ClearAll()
    
    Me._$position.Current = 0
    Me._$musicElements.Clear()
    HaruhiPlayer.SetMessage(("Playlist is cleared."), 5)
    musicListChanged()
    
End

Private Function Count_Read() As Integer

    Return Me._$musicElements.Count

End
