' Gambas class file

Inherits NagatoQueueAssistant

Property Read State As Integer
Property Read ProgressRate As Float
Property Read ProgressText As String
Property SoftwareVolume As Float

Private $observer As Observer

Public Function GetProgressTextByRate(argRate As Float) As String
    
    Return Me._$player.GetTextByRate(argRate)
    
End

Public Sub SetProgress(argProgress As Float) ' argFloat must be between 0 to 1
    
    Me._$player.SetByRate(argProgress)
    
End

Public Sub Play()
    
    If Me._$musicList.Count = 0 Then Return
    If Not Me._$player.State <> Media.Playing Then Me._$player.Play()
    
End

Public Sub Pause()
    
    Me._$player.Pause()
    
End

Public Sub Next()
    
    If Me._$musicList.Count = 0 Then Return

    Me._$musicList.Next()

    If Me._$player.State = Media.Playing Then 
        Try Me._$player.Play(0)
    Else
        Me._$player.ResetUrl()
    End If
    
End

Public Sub Back()
    
    If Me._$musicList.Count = 0 Then Return
    
    If Me._$player.State = Media.Playing And If Me._$player.Rate > 0.05 Then
        Me._$player.SetByRate(0)
    Else If Me._$player.State = Media.Playing Then
        Me._$musicList.Back()
        Me._$player.Play(0)
    Else ' when Me._$player is stopped/paused
        Me._$musicList.Back()
        Me._$player.ResetUrl()
    End If
    
End

Public Sub SetPathAndPlay(argPath As String)
    
    Me._$player.SetPathAndPlay(argPath)
    NagatoBroadCast(NagatoBroadCast.SignalTagChanged)
    
End

Public Sub SetIndexAndPlay(argIndex As Integer)
    
    Me._$player.SetPathAndPlay(Me._$musicList[argIndex].Path)
    NagatoBroadCast(NagatoBroadCast.SignalTagChanged)
    
End

Public Sub _OptionalOnInitialize()
    
    $observer = New Observer(Me._$player) As "Asakura"
    
End

Public Sub Asakura_MusicEnd()
    
    If NagatoSettingsMusic.Repeat Then Me.Back()
    If Not NagatoSettingsMusic.Repeat Then Me.Next()
    
End

Private Function State_Read() As Integer

    Return Me._$player.State

End

Private Function ProgressRate_Read() As Float

    Return Me._$player.Rate

End

Private Function ProgressText_Read() As String

    Return Me._$player.Text

End

Private Function SoftwareVolume_Read() As Float

    Return Me._$player.SoftwareVolume

End

Private Sub SoftwareVolume_Write(Value As Float)

    Me._$player.SoftwareVolume = Value

End
