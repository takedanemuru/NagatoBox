' Gambas class file

Create Static

Property Read ChannelPlayer As NagatoQueueAssistantPlayer
Property Read ChannelList As NagatoQueueAssistantList
Property Read ChannelCurrent As NagatoQueueAssistantCurrent

Private $player As New NagatoPlayer
Private $musicList As NagatoMusicList 
Private $assistantPlayer As NagatoQueueAssistantPlayer
Private $assistantList As NagatoQueueAssistantList
Private $assistantCurrent As NagatoQueueAssistantCurrent

Event Broadcast(argSignal As Integer, argValues As Variant[])

Public Sub AddMusics(argPaths As String[])
    
    $musicList.EnqueuePaths(argPaths)
    $assistantCurrent.Reload()

End

Public Sub DeleteIndexes(argIndexes As Integer[])
    
    $player.Stop()
    If $musicList.DequeueIndexes(argIndexes) Then $assistantCurrent.Reload()
    $player.Play()
    
End

Public Sub Sort(argType As Integer, argAscend As Boolean)
    
    $musicList.Sort(argType, argAscend)
    
End

Public Sub ClearAll()
    
    $player.Stop()
    $musicList.ClearAll()
    $assistantCurrent.Reload()
    
End

Public Sub SaveAsPlaylist()
    
    $musicList.SaveAsPlayList(MikuruDialog.PlaylistName)
    
End

Public Sub SetIndexAndPlay(argIndex As Integer)
    
    $player.SetIndexAndPlay(argIndex)
    $assistantCurrent.Reload()
    Raise Broadcast(MikuruSignal.BroadcastIndexMoved, Null)
    
End

Public Sub RemoveDuplicateMusic()
    
    $musicList.RemoveDuplicateMusic()
    
End

Public Sub EditTagsByTagIndexes(argIndexes As Integer[], argTags As NagatoId3TagInfo)
    
    Dim yukiIndex As Integer
    
    For Each yukiIndex In argIndexes
        $musicList[yukiIndex].EditTags(argTags)
    Next
    
    Raise BroadCast(MikuruSignal.BroadcastId3TagChanged, argIndexes)
    
End

Public Sub ChangeCoverArtByIndexes(argIndexes As Integer[], argCoverArtPath As String)
    
    Dim yukiIndex As Integer
    
    For Each yukiIndex In argIndexes
        If argCoverArtPath Then MikuruEyeD3.SetPicture($musicList[yukiIndex].Path, argCoverArtPath)
        If yukiIndex = $musicList.CurrentIndex Then $assistantCurrent.Reload()
    Next
    
End

Public Sub Activate(Optional argPaths As String[] = [""])
    
    $musicList = New NagatoMusicList(argPaths) As "TFEI"
    $assistantList = New NagatoQueueAssistantList($player, $musicList)
    $assistantPlayer = New NagatoQueueAssistantPlayer($player, $musicList)
    $assistantCurrent = New NagatoQueueAssistantCurrent($player, $musicList)
    
End

Public Sub _get(argIndex As Integer) As NagatoMusicElement
    
    Return $musicList[argIndex]
    
End

Private Function ChannelList_Read() As NagatoQueueAssistantList

    Return $assistantList

End

Private Function ChannelCurrent_Read() As NagatoQueueAssistantCurrent

    Return $assistantCurrent

End

Private Function ChannelPlayer_Read() As NagatoQueueAssistantPlayer

    Return $assistantPlayer

End

Public Sub TFEI_Signal(argSignal As Integer, argValues As Variant[])
    
    Select Case argSignal
        Case MikuruSignal.BroadcastIndexMoved
            $assistantCurrent.Reload()
            Try Print "YUKI.N > Next Tune : " & NagatoQueue.ChannelCurrent.Titile 
            Try HaruhiPlayer.Title = NagatoQueue.ChannelCurrent.Titile
        Case MikuruSignal.BroadcastQueueChanged
            $assistantList.SaveCurrentQueue()
    End Select
    
    Raise Broadcast(argSignal, argValues)
    
End
