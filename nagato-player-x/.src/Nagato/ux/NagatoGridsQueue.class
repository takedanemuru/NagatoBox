' Gambas class file

Inherits NagatoGrids

Property Read Selection As Integer[]

Private Enum ColumnIcon, ColumnTitle, ColumnArtist, ColumnAlbum, ColumnNull, ColumnTime

Private $playMark As NagatoGridsPlayMark
Private $contextMenu As NagatoGridViewContextMenuQueue

Private Sub testInsertCoverArt(argPath As String)
    
    Me._$grids[Me._$grids.Rows.Max, ColumnIcon].Picture = MikuruEyeD3.GetPicture(argPath, 16)
    
End

Private Function insertRows() As Integer
    
    Dim yukiElement As NagatoMusicElement

    For Each yukiElement In NagatoQueue
        Inc Me._$grids.Rows.Count
        $playMark.Set(Me._$grids.Rows.Max) 
        'testInsertCoverArt(yukiElement.Path)
        Me._SetGridData(ColumnTitle, yukiElement.Title)
        Me._SetGridData(ColumnArtist, yukiElement.Artist)
        Me._SetGridData(ColumnAlbum, yukiElement.Album)
        Me._SetGridDataRight(ColumnTime, MikuruFloatToTime(yukiElement.Duration))
    Next
    
Catch
    Return
    
End

Private Sub refreshData()
    
    Me._ClearGrids()
    insertRows()
    Me._SetBackgroundStripe(MikuruColor.GridBackgroundViolet)
    Me._$grids[NagatoQueue.ChannelCurrent.Index, 0].EnsureVisible()
    
End

Public Sub _InitializeGrids() 'override
    
    With Me._$grids
        .Columns.Count = 6
        .Columns[ColumnIcon].W = MikuruUx.Padding
        .Columns[ColumnTitle].Text = "Title"
        .Columns[ColumnArtist].Text = "Artist"
        .Columns[ColumnAlbum].Text = "Album"
        .Columns[ColumnTime].Text = "Duration"
    End With
    
    $playMark = New NagatoGridsPlayMark(Me._$grids)
    $contextMenu = New NagatoGridViewContextMenuQueue(Me._$grids)
    refreshData()
    
End

Public Sub SetMark(argRow As Integer)
    
    $playMark.Refresh(argRow)
    
End

Public Sub Refresh()
    
    refreshData()
    
End

Public Sub RefreshSelection(argIndexes As Integer[])
    
    Dim yukiIndex As Integer
    
    For Each yukiIndex In argIndexes
        Try Me._$grids.Rows[yukiIndex].Selected = True
    Next
    
End

Public Sub _Activate() 'override
    
    NagatoQueue.SetIndexAndPlay(Me._$grids.Row)
    
End

Public Sub _ColumnClick(argIndex As Integer) 'override
    
    Me._$sortAscend = Not Me._$sortAscend
    If argIndex > 0 Then NagatoQueue.Sort(argIndex, Me._$sortAscend)
    
End

Private Function Selection_Read() As Integer[]

    Return Me._$grids.Rows.Selection

End
