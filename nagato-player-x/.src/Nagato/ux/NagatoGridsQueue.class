' Gambas class file

Inherits NagatoGrids

Property Read Selection As Integer[]

Private Enum ColumnIcon, ColumnTitle, ColumnArtist, ColumnAlbum, ColumnTime

Private $playMark As NagatoGridsPlayMark

Private Sub testInsertCoverArt(argPath As String)
    
    Me._$grids[Me._$grids.Rows.Max, ColumnIcon].Picture = MikuruEyeD3.GetPicture(argPath, 64)
    
End

Private Function insertRows() As Integer
    
    Dim yukiRowIndex As Integer
    Dim yukiElement As NagatoMusicElement
    Dim yukiCurrentRow As Integer

    For yukiRowIndex = 0 To NagatoQueue.ChannelList.Count - 1
        Inc Me._$grids.Rows.Count
        If $playMark.Set(yukiRowIndex) Then yukiCurrentRow = yukiRowIndex
        yukiElement = NagatoQueue[yukiRowIndex]
        'testInsertCoverArt(yukiElement.Path)
        Me._SetGridData(ColumnTitle, yukiElement.Title)
        Me._SetGridData(ColumnArtist, yukiElement.Artist)
        Me._SetGridData(ColumnAlbum, yukiElement.Album)
        Me._SetGridDataRight(ColumnTime, MikuruFloatToTime(yukiElement.Duration))
    Next
    
    Return yukiCurrentRow
    
End

Private Sub refreshData()
    
    Dim yukiCurrentRow As Integer
    
    Me._ClearGrids()
    yukiCurrentRow = insertRows()
    Me._SetBackgroundStripe(MikuruColor.GridBackgroundViolet)
    If yukiCurrentRow > 0 Then Me._$grids[yukiCurrentRow, 0].EnsureVisible()
    
Catch
    Return
    
End

Public Sub _InitializeGrids() 'override
    
    With Me._$grids
        .Columns.Count = 6
        .Columns[ColumnIcon].W = MikuruUx.Padding
        .Columns[ColumnTitle].Text = "Title"
        .Columns[ColumnArtist].Text = "Artist"
        .Columns[ColumnAlbum].Text = "Album"
        .Columns[ColumnTime].Text = "Duration"
    End With
    
    $playMark = New NagatoGridsPlayMark(Me._$grids)
    
    refreshData()
    
End

Public Sub _ContextMenu() ' override
    
    Dim yukiMenu As New NagatoContextMenuCurrent As "ContextMenu"
    
    yukiMenu.PopUp()
    
End

Public Sub MoveTo(argUrl As String)
    
    Dim yukiRow As Integer
    
    Me._ClearIcon(ColumnIcon)
    
    For yukiRow = 0 To Me._$grids.Rows.Max
        If NagatoQueue[yukiRow].Path <> argUrl Then Continue
        Me._$grids[yukiRow, ColumnIcon].EnsureVisible()
        $playMark.Set(yukiRow)
    Next
    
End

Public Function GetPaths() As String[]
    
    Dim yukiPaths As New String[] ' Return Value
    Dim yukiRowIndex As Integer
    
    For yukiRowIndex = 0 To Me._$grids.Rows.Max
        yukiPaths.Add(NagatoQueue[yukiRowIndex].Path)
    Next
    
    Return yukiPaths
    
End

Public Sub SetMark(argRow As Integer)
    
    $playMark.Refresh(argRow)
    
End

Public Sub Refresh()
    
    refreshData()
    
End

Public Sub RefreshSelection(argIndexes As Integer[])
    
    Dim yukiIndex As Integer
    
    For Each yukiIndex In argIndexes
        Try Me._$grids.Rows[yukiIndex].Selected = True
    Next
    
End

Public Sub ContextMenu_Signal(argSignal As Integer, argValues As Variant[])
    
   If Me._$grids.Rows.Selection.Count = 0 Then Return
   
    Select Case argSignal
        Case MikuruSignal.ListDelete
            NagatoQueue.DeleteIndexes(Me._$grids.Rows.Selection)
        Case MikuruSignal.ListEdit
            NagatoQueue.EditByIndexes(Me._$grids.Rows.Selection)
    End Select
    
End

Public Sub _Activate() 'override
    
    NagatoQueue.ChannelPlayControl.SetPathAndPlay(NagatoQueue[Me._$grids.Row].Path)
    
End

Public Sub _ColumnClick(argIndex As Integer) 'override
    
    Me._$sortAscend = Not Me._$sortAscend
    If argIndex > 0 Then NagatoQueue.Sort(argIndex, Me._$sortAscend)
    
End

Private Function Selection_Read() As Integer[]

    Return Me._$grids.Rows.Selection

End
