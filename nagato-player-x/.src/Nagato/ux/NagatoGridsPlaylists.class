' Gambas class file

Inherits NagatoGrids

Private Enum ColumnTitle, ColumnDescription, ColumnCount

Private $handlerUserInput As NagatoGridViewHandlerUserInputPlaylists

Private Sub setRow(argResult As Result, argRowIndex As Integer)
    
    Dim yukiName As String = argResult[NagatoDB.Column.PlaylistName]
    Dim yukiDescription As String = argResult[NagatoDB.Column.PlaylistDescription]
    Dim yukiCount As Integer = NagatoDBPlaylists.GetCountByPlaylistId(argResult[NagatoDB.Column.Id])

    Me._SetGridData2(argRowIndex, ColumnTitle, yukiName, Align.Left)
    Me._SetGridData2(argRowIndex, ColumnDescription, yukiDescription, Align.Left)
    Me._SetGridData2(argRowIndex, ColumnCount, yukiCount, Align.Right)
    
End

Private Sub setRows()
    
    Dim yukiResult As Result = NagatoDBPlaylists.GetAllIdResult()
    Dim yukiRow As Integer
    
    Me._$grids.Rows.Count = yukiResult.Count
    
    For Each yukiResult
        setRow(yukiResult, yukiRow)
        Inc yukiRow
    Next
    
    Me._SetBackgroundStripe(MikuruColor.GridBackgroundPink)
    
Catch
    Debug Error.Text
    
End

Private Sub getPaths() As String[]
    
    Return NagatoDBPlaylists.GetPathsByPlaylistName(Me._GetSelectionText(ColumnTitle)[0])
    
End

Public Sub _InitializeGrids() 'override
    
    Me._SetColumns(("Name"), ("Description"), ("Musics"))
    If NagatoDBPlaylists.HasPlaylist() Then setRows()

    $handlerUserInput = New NagatoGridViewHandlerUserInputPlaylists(Me._$grids) As "UserInput"

End

Public Sub Refresh()
    
    setRows()
    
End

Private Sub addPaths(argReplace As Boolean)
    
    If Me._$grids.Rows.Selection.Count = 0 Then Return
    If argReplace Then NagatoQueue(MikuruSignal.ListClear, Null)
    NagatoQueue(MikuruSignal.ListAddMusic, getPaths())
    
End

Public Sub UserInput_Signal(argSignal As Integer, argValues As Variant[])
    
    Select argSignal
        Case MikuruSignal.ListsDataReplace
            addPaths(True)
        Case MikuruSignal.ListsDataAdd
            addPaths(False)
        Default
            Raise Signal(argSignal, argValues)
    End Select
    
End
