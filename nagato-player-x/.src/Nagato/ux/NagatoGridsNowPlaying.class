' Gambas class file

Inherits NagatoGrids

Private Enum ColumnIcon, ColumnTitle, ColumnArtist, ColumnAlbum, ColumnTime

Private $playMark As NagatoGridsPlayMark

Private Sub refreshData()
    
    Dim yukiRowIndex As Integer
    Dim yukiElement As NagatoMusicElement
    
    If Not Object.IsValid(Me._$grids) Then Return
    
    Me._ClearGrids()
    
    For yukiRowIndex = 0 To NagatoQueue.Count - 1
        Inc Me._$grids.Rows.Count
        $playMark.Set(yukiRowIndex)
        yukiElement = NagatoQueue[yukiRowIndex]
        Me._SetGridData(Me._$grids.Rows.Max, ColumnTitle, yukiElement.Title)
        Me._SetGridData(Me._$grids.Rows.Max, ColumnArtist, yukiElement.Artist)
        Me._SetGridData(Me._$grids.Rows.Max, ColumnAlbum, yukiElement.Album)
        Me._SetGridDataRight(Me._$grids.Rows.Max, ColumnTime, MikuruFloatToTime(yukiElement.Duration))
        If Odd(yukiRowIndex) Then Me._SetBackgroundColor(yukiRowIndex, MikuruColor.GridBackgroundViolet)
    Next
    
Catch
    Return
    
End

Public Sub _InitializeGrids() 'override
    
    With Me._$grids
        .Columns.Count = 5
        .Columns[ColumnIcon].W = MikuruUx.Padding
        .Columns[ColumnTitle].Text = "Title"
        .Columns[ColumnArtist].Text = "Artist"
        .Columns[ColumnAlbum].Text = "Album"
        .Columns[ColumnTime].Text = "Duration"
    End With
    
    $playMark = New NagatoGridsPlayMark(Me._$grids)
    
    refreshData()
    
End

Public Sub _ContextMenu() ' override
    
    Dim yukiMenu As New NagatoContectMenuCurrent As "ContextMenu"
    
    yukiMenu.PopUp()
    
End

Public Sub MoveTo(argUrl As String)
    
    Dim yukiRow As Integer
    
    Me._ClearIcon(ColumnIcon)
    
    For yukiRow = 0 To Me._$grids.Rows.Max
        If NagatoQueue[yukiRow].Path = argUrl Then
            Me._$grids[yukiRow, ColumnIcon].EnsureVisible()
            $playMark.Set(yukiRow)
        Endif
    Next
    
End

Public Function GetPaths() As String[]
    
    Dim yukiPaths As New String[] ' Return Value
    Dim yukiRowIndex As Integer
    
    For yukiRowIndex = 0 To Me._$grids.Rows.Max
        yukiPaths.Add(NagatoQueue[yukiRowIndex].Path)
    Next
    
    Return yukiPaths
    
End

Public Sub SetMark(argRow As Integer)
    
    $playMark.Refresh(argRow)
    
End

Public Sub Refresh()
    
    refreshData()
    
End

Public Sub ContextMenu_Delete()
   
   NagatoQueue.DeleteIndexes(Me._$grids.Rows.Selection)
    
End

Public Sub _Activate() 'override
    
   NagatoQueue.SetPathAndPlay(NagatoQueue[Me._$grids.Row].Path)
    
End

Public Sub _ColumnClick(argIndex As Integer) 'override
    
    Me._$sortAscend = Not Me._$sortAscend
    
    If argIndex = 0 Then Return
    
    NagatoQueue.Sort(argIndex, Me._$sortAscend)
    
End

Public Sub RefreshPlaymark()
    
    Dim yukiRowIndex As Integer
    
    If Not Object.IsValid(Me._$grids) Then Return
    
    For yukiRowIndex = 0 To Me._$grids.Rows.Max
        If $playMark.Set(yukiRowIndex) Then
            Me._$grids[yukiRowIndex, 0].EnsureVisible()
        End If
    Next
    
End
