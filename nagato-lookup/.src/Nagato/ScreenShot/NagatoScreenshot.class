' Gambas class file

Property Read Picture As Picture
Property Read Thumbnail As Picture

Private Const ThumbnailSize As Integer = 200

Private $screenshot As Picture

Event Ready

Private Sub hasActiveWindow() As Boolean
    
    If Desktop.ActiveWindow > 0 Then Return True
    
    Message.Warning("YUKI.N > There's no active window...")
    
    Return False
    
End

Private Function getScreenshot() As Picture
    
    Dim yukiRect As New Rect
    Dim yukiPicture As Picture
    
    With MikuruActiveWindow
        yukiRect.X = .Rectangle.X
        yukiRect.Y = .Rectangle.Y - .Relative.Y
        yukiRect.H = .Rectangle.H + .Relative.Y
        yukiRect.W = .Rectangle.W + 2 * .Relative.X
    End With
    
    yukiPicture = Desktop.Screenshot(yukiRect.X, yukiRect.Y, yukiRect.W, yukiRect.H)
    
    Return yukiPicture
    
End

Public Sub Get() 
    
    If NagatoSettings.OnlyActiveWindow Then
        If Not hasActiveWindow() Then Return
        MikuruActiveWindow.Set()
        With MikuruActiveWindow
            $screenshot = getScreenshot()
        End With
    Else
        $screenshot = Desktop.Screenshot()
    End If
    
Finally
    If Error Then $screenshot = Desktop.Screenshot()
    Raise Ready
    
End

Public Sub Save(argPath As String)
    
    $screenshot.Save(argPath)
    
End

Private Function Picture_Read() As Picture

    Return $screenshot

End

Private Function Thumbnail_Read() As Picture

    Dim yukiRate As Float = Min(ThumbnailSize / $screenshot.H, ThumbnailSize / $screenshot.W)
    
    With $screenshot
        Return .Image.Stretch(.W * yukiRate, .H * yukiRate).Picture
    End With

End
