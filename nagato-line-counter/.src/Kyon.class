' Gambas class file

Private $moduleCount As Integer = 0
Private $formCount As Integer = 0
Private $classCount As Integer = 0
Private $lineCountTotal As Integer = 0
Private $lineCountWithoutVoid As Integer = 0
Private $pathCollection As New Collection
Private $targetPath As String
Private $targetColumn As Integer 
Private $sortAscend As Boolean 
Private $gridData As New Variant[]

Private Sub readLine(argFullPath As String) As Integer
    
    Dim yukiStream As Stream
    Dim yukiLine As String
    Dim yukiLocalLineCount As Integer = 0
    
    yukiStream = Open argFullPath For Input
    
    While Not Eof(yukiStream)
      Line Input #yukiStream, yukiLine
      Inc $lineCountTotal
      Inc yukiLocalLineCount
    Wend
    
    Close #yukiStream
    
    Return yukiLocalLineCount
    
End

Private Sub readLineWithoutVoid(argFullPath As String) As Integer
    
    Dim yukiStream As Stream
    Dim yukiLine As String
    Dim yukiLocalLineCount As Integer = 0
    
    yukiStream = Open argFullPath For Input
    
    While Not Eof(yukiStream)
      Line Input #yukiStream, yukiLine
      If yukiLine = "" Then Continue
      Inc $lineCountWithoutVoid
      Inc yukiLocalLineCount
    Wend
    
    Close #yukiStream
    
    Return yukiLocalLineCount
    
End

Private Sub getType(argDirectory As String, argFileName As String) As String
    
    Dim yukiType As String
    
    If argFileName Like "*.module" Then
        Inc $moduleCount
        Return "Module"
    Else If Exist(argDirectory &/ File.BaseName(argFileName) & ".form") Then
        Inc $formCount
        Return "Form"
    Else
        Inc $classCount
        Return "Class"
    Endif
    
End

Private Sub setText()
    
    Dim yukiMessage As String = ("YUKI.N > This project contains ...<br><br>")
    
    yukiMessage &= $formCount & " Forms.<br>" 
    yukiMessage &= $classCount & " Classes.<br>"
    yukiMessage &= $moduleCount & " Modules.<br>"
    yukiMessage &= Format$($lineCountTotal, "#,###,###") & " Lines of code."
    
    TextLabel1.Text = yukiMessage
    
End

Private Function isLesser(argGridData As Variant, argRowData As Variant) As Boolean
    
    If $sortAscend Then
        Return (argGridData > argRowData)
    Else
        Return (argRowData > argGridData)
    Endif
    
End

Private Function getKey() As String
    
    Select Case $targetColumn
        Case 0
            Return "type"
        Case 1
            Return "name"
        Case 2
            Return "lines"
        Case 3
            Return "withoutvoid"
        Default
            Return ""
    End Select
    
End

Private Sub addToGridData(argRowData As Collection)
    
    Dim yukiCount As Integer
    
   If $gridData.Count = 0 Or If $targetColumn = -1 Then
       $gridData.Add(argRowData)
       Return
   Endif
    
    For yukiCount = 0 To $gridData.Max
        If isLesser($gridData[yukiCount][getKey()], argRowData[getKey()]) Then
            $gridData.Add(argRowData, yukiCount)
            Return
        Endif
    Next
    
    $gridData.Add(argRowData)
    
End

Private Sub setRowData(argDirectory As String, argFileName As String)
    
    Dim yukiJointPath As String = argDirectory &/ argFileName
    Dim yukiRowData As New Collection
    
    yukiRowData["type"] = getType(argDirectory, argFileName)
    yukiRowData["name"] = File.Name(yukiJointPath)
    yukiRowData["lines"] = readLine(yukiJointPath)
    yukiRowData["withoutvoid"] = readLineWithoutVoid(yukiJointPath)
    
    $pathCollection.Add(yukiJointPath, File.Name(yukiJointPath))
    
    addToGridData(yukiRowData)
    
End

Private Sub setBackgroundColor()
    
    Dim yukiCount As Integer
    
    For yukiCount = 0 To 3
        GridView1[GridView1.Rows.Max, yukiCount].Background = Color.Pink
    Next
    
End

Private Sub fillGridView()
    
    Dim yukiCount As Integer
    
    Debug $gridData.Count
    
    For yukiCount = 0 To $gridData.Max
        Inc GridView1.Rows.Count
        GridView1[GridView1.Rows.Max, 0].Text = $gridData[yukiCount]["type"]
        GridView1[GridView1.Rows.Max, 1].Text = $gridData[yukiCount]["name"]
        GridView1[GridView1.Rows.Max, 2].Text = Format$($gridData[yukiCount]["lines"], "#,###,###,###")
        GridView1[GridView1.Rows.Max, 3].Text = Format$($gridData[yukiCount]["withoutvoid"], "#,###,###,###")
        GridView1[GridView1.Rows.Max, 2].Alignment = Align.Right
        GridView1[GridView1.Rows.Max, 3].Alignment = Align.Right
        If $gridData[yukiCount]["lines"] > 100 Then setBackgroundColor()
    Next
    
End

Private Sub countLine(argDirectory As String)
    
    Dim yukiPath As String
    Dim yukiJointPath As String
    
    For Each yukiPath In Dir(argDirectory)
        yukiJointPath = argDirectory &/ yukiPath
        If IsDir(yukiJointPath) Then
            countLine(yukiJointPath)
        Else If yukiPath Like "*~" Then
            Continue
        Else If yukiJointPath Like "*.class" Or If yukiJointPath Like "*.module" Then
            setRowData(argDirectory, yukiPath)
        Else
            Continue
        Endif
    Next
    
End

Private Sub initializeGridView()
    
    With GridView1
        .Header = GridView.Horizontal
        .Resizable = True
        .Columns.Count = 4
        .Columns[0].Text = ("Type")
        .Columns[0].Width = 100
        .Columns[0].Alignment = Align.Left
        .Columns[1].Text = ("Name")
        .Columns[1].Width = 250
        .Columns[1].Alignment = Align.Left
        .Columns[2].Text = ("Lines")
        .Columns[2].Alignment = Align.Left
        .Columns[2].Width = 150
        .Columns[3].Text = ("Lines exclude void")
        .Columns[3].Alignment = Align.Left
        .Columns[3].Width = 150
        .Rows.Count = 0
    End With
    
End

Private Sub setSumRow()
    
    Inc GridView1.Rows.Count
    
    GridView1[GridView1.Rows.Max, 1].Text = ("TOTAL")
    GridView1[GridView1.Rows.Max, 2].Text = Format$($lineCountTotal, "#,###,###")
    GridView1[GridView1.Rows.Max, 2].Alignment = Align.Right
    GridView1[GridView1.Rows.Max, 3].Text = Format$($lineCountWithoutVoid, "#,###,###")
    GridView1[GridView1.Rows.Max, 3].Alignment = Align.Right
    
End

Private Sub sortGrids()
    
    $moduleCount = 0
    $formCount = 0
    $classCount = 0
    $lineCountTotal = 0
    $lineCountWithoutVoid = 0
    $pathCollection.Clear()
    $gridData.Clear()
    GridView1.Clear()
    GridView1.Rows.Count = 0
    countLine($targetPath)
    fillGridView()
    setSumRow()
    setText()
    
End

Public Sub Form_Open()
    
    Application.MainWindow = Me
    NagatoSettings.LoadFormSettings(Me)
    initializeGridView()
    
End

Public Sub Form_Close()
    
    NagatoSettings.SaveFormSettings(Me)
    
End

Public Sub OpenButton_Click()

    Dialog.Title = ("Select Directory")
    Dialog.Path = NagatoSettings.LastDirectory
    Dialog.ShowHidden = True
    
    If Not Dialog.SelectDirectory() Then
        $targetPath = Dialog.Path
        $targetColumn = -1
        $sortAscend = True
        sortGrids()
        NagatoSettings.LastDirectory = File.Dir(Dialog.Path)
    Endif

End

Public Sub GridView1_Activate()
    
    Dim yukiRow As Integer = GridView1.RowAt(Mouse.Y)
    
    If yukiRow <> GridView1.Rows.Max Then
        HaruhiCodeViewer.Show()
        HaruhiCodeViewer.SetCode($pathCollection[GridView1[yukiRow, 1].Text])
    End If
    
End

Public Sub GridView1_ColumnClick(argIndex As Integer)
    
    If $gridData.Count = 0 Then Return
    
    If argIndex = $targetColumn Then
        $sortAscend = Not $sortAscend
    Else
        $targetColumn = argIndex
    Endif
    
    sortGrids()
    
End
