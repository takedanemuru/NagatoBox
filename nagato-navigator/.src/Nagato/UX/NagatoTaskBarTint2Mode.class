' Gambas class file

Inherits NagatoPainter

Private $tasks As New NagatoTasks
Private $observer As Observer

Private Function getDesktop(argX As Integer) As Integer
    
    Dim yukiDesktopWidth As Integer = CInt((Me._$drawingArea.W / Desktop.Count))
    Dim yukiDesktop As Integer = CInt(argX / yukiDesktopWidth)
    
    If yukiDesktop > Desktop.Count - 1 Then yukiDesktop = Desktop.Count - 1
    
    Return yukiDesktop
    
Catch
    Return 0
    
End

Private Sub getWindowId(argMouseX As Integer) As Integer 'should return -1 if there's no window
    
    Dim yukiDesktopWidth As Integer = CInt((Me._$drawingArea.W / Desktop.Count))
    Dim yukiDesktop As Integer = CInt(argMouseX / yukiDesktopWidth)
    Dim yukiWindows As DesktopWindow[]
    Dim yukiTaskIndex As Integer
    
    If yukiDesktop > Desktop.Count - 1 Then yukiDesktop = Desktop.Count - 1
    yukiDesktop = getDesktop(argMouseX)
    yukiWindows = $tasks.GetWindowsInDesktop(yukiDesktop) 
    
    If yukiWindows.Count > 0 Then
        yukiTaskIndex = CInt((argMouseX - (yukiDesktopWidth * yukiDesktop)) / (yukiDesktopWidth / yukiWindows.Count))
        Return yukiWindows[yukiTaskIndex].Id
    Else
        Return -1
    Endif
    
Catch
    Return -1
    
End

Private Sub paintHighlightRectangle(argX As Integer, argWidth As Integer)
    
    Paint.Brush = Paint.Color(Color.Pink)
    Paint.Rectangle(argX, 0, argWidth, Me._$drawingArea.H)
    Paint.Fill()
    
End

Private Sub paintTask(argWindow As DesktopWindow, argWidth As Integer, ByRef refX As Integer)
    
    Dim yukiText As String
    
    If (Desktop.ActiveWindow = argWindow.Id) Then paintHighlightRectangle(refX, argWidth)
    
    Paint.Brush = Paint.Color(NagatoSettings.ForegroundColor)
    Paint.DrawImage(argWindow.Icon.Stretch(2 * MikuruUx.Grid, 2 * MikuruUx.Grid), refX + 4, 4)
    yukiText = MikuruCollapsedText.Get(argWindow.Name, Me._$drawingArea.Font, argWidth - 3 * MikuruUx.Grid)
    Paint.Text(yukiText, refX + 3 * MikuruUx.Grid, 0, argWidth - 3 * MikuruUx.Grid, Me._$drawingArea.H, Align.Left)
    refX += argWidth
    Paint.Fill()
    
Catch
    Debug "ignore"
    Return
    
End

Private Sub paintPerDesktopTasks(argWidthDesktop As Integer, argTasks As DesktopWindow[], argX As Integer)
        
    Dim yukiWidthWindow As Integer = argWidthDesktop / argTasks.Count
    Dim yukiWindow As DesktopWindow
    Dim yukiX As Integer = argX

    For Each yukiWindow In argTasks
        paintTask(yukiWindow, yukiWidthWindow, ByRef yukiX)
    Next
    
End

Public Sub paintSelectedDesktop(argX As Integer, argWidth As Integer)
    
    Paint.Brush = Paint.Color(Color.Pink)
    Paint.Rectangle(argX, 0, argWidth, Me._$drawingArea.H)
    Paint.Fill()
    
End

Public Sub Paint()
    
    Dim yukiWidthDesktop As Integer = Me._$drawingArea.W / Desktop.Count
    Dim yukiDesktop As Integer
    Dim yukiX As Integer
    Dim yukiTasks As DesktopWindow[]
    
    If $tasks.Count = 0 Then Return
    
    Paint.Begin(Me._$drawingArea)
        For yukiDesktop = 0 To Desktop.Count - 1
            yukiTasks = $tasks.GetWindowsInDesktop(yukiDesktop)
            yukiX = yukiWidthDesktop * yukiDesktop
            If yukiTasks.Count = 0 Then
                If yukiDesktop = Desktop.Current Then paintSelectedDesktop(yukiX, yukiWidthDesktop)
            Else
                paintPerDesktopTasks(yukiWidthDesktop, yukiTasks, yukiX)
            End If
        Next
    Paint.End()
    
Catch
    Return
    
End

Public Sub LeftClick(argMouseX As Integer, argMouseY As Integer)
    
    Dim yukiDesktopWidth As Integer = CInt((Me._$drawingArea.W / Desktop.Count))
    Dim yukiDesktop As Integer = CInt(argMouseX / yukiDesktopWidth)
    Dim yukiWindows As DesktopWindow[]
    Dim yukiTaskIndex As Integer
    
    If yukiDesktop > Desktop.Count - 1 Then yukiDesktop = Desktop.Count - 1
    yukiWindows = $tasks.GetWindowsInDesktop(yukiDesktop) 
    If yukiDesktop <> Desktop.Current Then Desktop.Current = yukiDesktop
    
    If yukiWindows.Count > 0 Then
        yukiTaskIndex = CInt((argMouseX - (yukiDesktopWidth * yukiDesktop)) / (yukiDesktopWidth / yukiWindows.Count))
        yukiWindows[yukiTaskIndex].Activate()
    Endif
    
Catch
    Return
    
End

Public Sub DragBegin(argMouseX As Integer, argMouseY As Integer)
    
    Dim yukiId As Integer = getWindowId(argMouseX)
    Dim yukiWindow As DesktopWindow
    
    If yukiId = -1 Then Return
    
    yukiWindow = New DesktopWindow(yukiId)
    
    Drag.Icon = yukiWindow.Icon.Picture
    Me._$drawingArea.Drag(CStr(yukiId), "text/nagato-navigator")
    
End

Public Sub DragMove(argMouseX As Integer, argMouseY As Integer)
    
    
    
End

Public Sub Drop(argDropX As Integer, argDropY As Integer)
    
    Dim yukiWindow As DesktopWindow
    Dim yukiDesktop As Integer = getDesktop(argDropX)
    
    If Drag.Format = "text/nagato-navigator" Then
        Try yukiWindow = New DesktopWindow(CInt(Drag.Data))
        If Not Error Then Try yukiWindow.Desktop = yukiDesktop
        yukiWindow.Activate()
    End If
    
Catch
    Return
    
End

Public Sub RightClick(argMouseX As Integer, argMouseY As Integer)
    
    Dim yukiContextMenu As NagatoContextMenuTint2
    
    yukiContextMenu = New NagatoContextMenuTint2(getDesktop(argMouseX), getWindowId(argMouseX))
    yukiContextMenu.PopUp()
    
End

Public Sub Watcher_Change()
    
    Me.Paint()
    
End

Public Sub Watcher_Count()
    
    Me.Paint()
    
End
