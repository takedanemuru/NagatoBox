' Gambas class file

Property Read Count As Integer

Private Function getWindowIdPerDesktop(argDesktop As Integer) As Integer[]
    
    Dim yukiResult As New Integer[]
    Dim yukiDesktopWindow As DesktopWindow
    
    For Each yukiDesktopWindow In Desktop.Windows
        If yukiDesktopWindow.SkipTaskbar Then Continue
        If yukiDesktopWindow.Desktop <> argDesktop Then Continue
        yukiResult.Add(yukiDesktopWindow.Id)
    Next
    
    Return yukiResult.Sort()
    
End

Private Function pushWindow(argWindows As DesktopWindow[], argDesktop As Integer) As DesktopWindow[]
    
    Dim yukiWindowId As Integer
    Dim yukiWindow As DesktopWindow

    For Each yukiWindowId In getWindowIdPerDesktop(argDesktop)
        yukiWindow = New DesktopWindow(yukiWindowId)
        If yukiWindow.SkipTaskbar Then Continue
        argWindows.Add(yukiWindow)
    Next
    
    Return argWindows
    
End

Public Function Get() As DesktopWindow[]
    
    Dim yukiDesktopIndex As Integer
    Dim yukiWindows As New DesktopWindow[]
    
    Desktop.Windows.Refresh()
    
    For yukiDesktopIndex = 0 To Desktop.Count - 1
        yukiWindows = pushWindow(yukiWindows, yukiDesktopIndex)
    Next
    
    Return yukiWindows
    
End

Public Function GetWindowsInDesktop(argDesktop As Integer) As DesktopWindow[]
    
    Dim yukiWindows As New DesktopWindow[]
    
    Debug "GET IN " & argDesktop
    
    Desktop.Windows.Refresh()
    
    yukiWindows = pushWindow(yukiWindows, argDesktop)
    
    Return yukiWindows
    
End

Private Function Count_Read() As Integer

    Return Desktop.Windows.Count

End
