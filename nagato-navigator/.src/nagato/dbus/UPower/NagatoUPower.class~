' Gambas class file

Create Static

Property Read LidForceSleep As Boolean
Property Read CanHibernate As Boolean
Property Read CanSuspend As Boolean
Property Read TotalBatteryPercentage As Float
Property Read Count As Integer
Property Read IsPlugged As Boolean

Private Const ApplicationName As String = "system://org.freedesktop.UPower"
Private Const ObjectPath As String = "/org/freedesktop/UPower"
Private Const Interface As String = "org.freedesktop.UPower"

Private $uPower As DBusProxy 
Private $devices As New DBusProxy[]

Private Sub setDevices()
    
    Dim yukiDeviceName As String
    
    For Each yukiDeviceName In $upower.EnumerateDevices()
        $devices.Add(DBus[ApplicationName][yukiDeviceName])
    Next
    
End

Private Function getDeviceProxies(argFilter As Integer) As DBusProxy[]
    
    Dim yukiDeviceName As String
    Dim yukiDevices As New DBusProxy[]
    
    For Each yukiDeviceName In $uPower.EnumerateDevices()
        If DBus[ApplicationName][yukiDeviceName].Type = argFilter Then
            yukiDevices.Add(DBus[ApplicationName][yukiDeviceName])
        Endif
    Next
    
    Return yukiDevices
    
End

Public Function Hibernate() As Boolean
    
    If $uPower.CanHibernate Then
        $uPower.Hibernate()
        Return True
    Else
        Return False
    Endif
    
End

Public Function Suspend() As Boolean
    
    If $uPower.CanSuspend Then
        $uPower.Suspend()
        Return True
    Else
        Return False
    Endif
    
End

Public Function GetDeviceProxy(argIndex As Integer) As Object
    
    Return $devices[argIndex]
    
End

Public Sub _new()
    
    $uPower = DBus[ApplicationName][ObjectPath, Interface]
    setDevices()
    
End

Private Function CanHibernate_Read() As Boolean

    Return $uPower.HibernateAllowed()

End

Private Function CanSuspend_Read() As Boolean

    Return $uPower.SuspendAllowed()

End

Private Function TotalBatteryPercentage_Read() As Float

    Dim yukiProxy As DBusProxy
    Dim yukiTotalFull As Float = 0
    Dim yukiTotalRest As Float = 0

    For Each yukiProxy In getDeviceProxies(MikuruPowerDevice.Battery)
        yukiTotalFull += yukiProxy.EnergyFullDesign
        yukiTotalRest += (yukiProxy.EnergyFullDesign * yukiProxy.Percentage / 100)
    Next

    Return yukiTotalRest / yukiTotalFull * 100

End

Private Function Count_Read() As Integer

    Return $devices.Count

End

Private Function LidForceSleep_Read() As Boolean

    Return $uPower.LidForceSleep

Catch
    Return False

End

Private Function IsPlugged_Read() As Boolean

    Dim yukiProxy As DBusProxy
    Dim yukiResult As Boolean = False

    For Each yukiProxy In getDeviceProxies(MikuruPowerDevice.LinePower)
        If yukiProxy.Online Then yukiResult = True
    Next

    Return yukiResult

End
