' Gambas class file

Inherits NagatoMenu

Private $applicationsMenu As Menu

Private Sub addRecentAppMenu()
    
    Dim yukiMenu As Menu
    Dim yukiPath As String
    Dim yukiDesktopFile As NagatoDesktopFile
    
    For Each yukiPath In NagatoApplicationsConfig.Recent
        If yukiPath = "" Then Continue
        If Not Exist(yukiPath) Then Continue
        yukiDesktopFile = New NagatoDesktopFile(yukiPath)
        yukiMenu = New Menu(Me._$rootMenu) As "DesktopFileMenu"
        yukiMenu.Text = yukiDesktopFile.Name
        yukiMenu.Picture = yukiDesktopFile.GetIcon(2 * MikuruUX.Grid)
        yukiMenu.Tag = yukiDesktopFile.Path
    Next
    
    MikuruMenuSeparator.Set(Me._$rootMenu)
    
End

Private Sub addApplicationsMenu()
    
   Dim yukiMenu As NagatoApplicationsMenu
   
   If Not NagatoMenuCache.Ready Then Return
   
   $applicationsMenu = New Menu(Me._$rootMenu) 
   yukiMenu = New NagatoApplicationsMenu($applicationsMenu)
   
   With $applicationsMenu
       .Picture = MikuruMonoIconBlue.Get("gear")
       .Text = ("Applications")
   End With 
    
End

Private Sub addApplicationsPleaseWaitMenu()
    
    Dim yukiMenu As New Menu(Me._$rootMenu)
    
    With yukiMenu
        .Picture = MikuruMonoIconBlue.Get("gear")
        .Text = ("Please wait")
    End With
    
End

Private Sub addAlsaMenu()
    
    Dim yukiMenu As New Menu(Me._$rootMenu)
    Dim yukiAlsaMenu As NagatoAlsaMenu
    
    yukiAlsaMenu = New NagatoAlsaMenu(yukiMenu)
    
    With yukiMenu
        .Picture = MikuruMonoIconBlue.Get("speaker")
        .Text = ("Sound Volume (ALSA)")
    End With
    
End

Private Sub addMemoMenu()
    
    Dim yukiMenu As New Menu(Me._$rootMenu) 
    Dim yukiMemoMenu As NagatoMemoMenu
    
    yukiMemoMenu = New NagatoMemoMenu(yukiMenu)
    
    With yukiMenu
        .Picture = MikuruMonoIconBlue.Get("document-edit")
        .Text = ("Memo")
    End With
    
End

Private Sub addWorkspaceMenu()
    
   Dim yukiMenu As New Menu(Me._$rootMenu)
   Dim yukiQuicklistMenu As New NagatoQuickListMenu(yukiMenu) 
    
    With yukiMenu
        .Picture = MikuruMonoIconBlue.Get("desktop")
        .Text = ("Workspace")
    End With
    
End

Private Sub addEmptyTrashMenu(argParentMenu As Menu)
    
    Dim yukiMenu As New Menu(argParentMenu) As "EmptyTrashMenu"
    
    With yukiMenu
        .Text = ("Empty trash bin")
        .Picture = MikuruMonoIconBlue.Get("toggle-collapse-alt")
    End With
    
End

Private Function getTrashBinMenuText() As String
    
    Dim yukiTrashSize As String = MikuruUnitByteText.Get(NagatoTrashHandler.ItemSize)

    Select Case NagatoTrashHandler.ItemCount
        Case 0
            Return ("Trash (Empty)")
        Case 1
            Return Subst$("Trash (1 item &1)", yukiTrashSize)
        Default
            Return Subst$("Trash (&1 items &2)", NagatoTrashHandler.ItemCount, yukiTrashSize)
    End Select
    
End

Private Sub addTrashBinMenu()
    
    Dim yukiMenu As New Menu(Me._$rootMenu)
    
    With yukiMenu
        .Picture = MikuruMonoIconBlue.Get("bin")
        .Text = getTrashBinMenuText()
    End With
    
    If NagatoTrashHandler.ItemCount > 0 Then addEmptyTrashMenu(yukiMenu)
    
End

Private Sub addPlayBackMenu()
    
    Dim yukiMenu As New Menu(Me._$rootMenu) 
    Dim yukiPlayBackMenu As NagatoMusicControlMenu
    
    With yukiMenu
        .Text = ("Music")
        .Picture = MikuruMonoIconBlue.Get("music")
    End With
    
    yukiPlayBackMenu = New NagatoMusicControlMenu(yukiMenu)
    
End

Private Sub addMusicPlaylistMenu()
    
    Dim yukiMenu As New Menu(Me._$rootMenu)
    Dim yukiPlayListMenu As NagatoMusicPlaylistMenu
    
    yukiPlayListMenu = New NagatoMusicPlaylistMenu(yukiMenu)
    
    With yukiMenu
        .Text = ("Music Playlist")
        .Picture = MikuruMonoIconBlue.Get("music")
    End With
    
End

Private Sub addOnScreenDisplayMenu()
    
    Dim yukiMenu As New Menu(Me._$rootMenu)
    Dim yukiOSDMenu As NagatoOSDMenu
    
    yukiOSDMenu = New NagatoOSDMenu(yukiMenu)
    
    With yukiMenu
        .Text = ("On Screen Display")
        .Picture = MikuruMonoIconBlue.Get("monitor")
    End With
    
End

Private Sub addReminderMenu()
    
   Dim yukiMenu As New Menu(Me._$rootMenu)
   Dim yukiIndivisualMenu As NagatoReminderMenu
    
   yukiIndivisualMenu = New NagatoReminderMenu(yukiMenu)
   
   With yukiMenu
       .Picture = MikuruMonoIconBlue.Get("toggle-expand-alt")
       .Text = ("To Do")
   End With
    
End

Private Sub addRssMenu()
    
    Dim yukiMenu As New Menu(Me._$rootMenu)
    Dim yukiRssMenu As NagatoRssMenu
    
    yukiRssMenu = New NagatoRssMenu(yukiMenu)
    
    With yukiMenu
        .Picture = MikuruMonoIconBlue.Get("feed")
        .Text = ("RSS")
    End With
    
End

Private Sub addRssPleaseWaitMenu()
    
    Dim yukiMenu As New Menu(Me._$rootMenu)
    
    With yukiMenu
        .Picture = MikuruMonoIconBlue.Get("feed")
        .Text = ("RSS ...Now Loading")
    End With
    
End

Private Sub addScreenShotMenu()
    
   Dim yukiMenu As New Menu(Me._$rootMenu)
   Dim yukiChildMenu As NagatoScreenshotMenu
   
   yukiChildMenu = New NagatoScreenshotMenu(yukiMenu)
   
   With yukiMenu
       .Picture = MikuruMonoIconBlue.Get("camera")
       .Text = ("Screenshot")
   End With
    
End

Private Sub addSystemInfoMenu()
    
    Dim yukiMenu As New Menu(Me._$rootMenu)
    Dim yukiIndivisualMenu As NagatoSystemInfoMenu
    
    yukiIndivisualMenu = New NagatoSystemInfoMenu(yukiMenu)
    
    With yukiMenu
        .Picture = MikuruMonoIconBlue.Get("oscilloscope")
        .Text = ("System Infomation")
    End With
    
End

Private Function getConditionText(argWeatherElement As NagatoWeatherElement) As String
    
    Dim yukiConditon As String = NagatoWeatherCondition.GetText(argWeatherElement.IconId)
    Dim yukiTemperature As String = Subst$("&1 Â°C", argWeatherElement.Temperature)
    
    Return Subst$("&1 , &2", yukiConditon, yukiTemperature)
    
End

Private Sub addWeatherMenu()
    
    Dim yukiMenu As New Menu(Me._$rootMenu)
    Dim yukiWeatherMenu As NagatoWeatherInfomationMenu
    Dim yukiWeatherElement As NagatoWeatherElement
    
    With yukiMenu
        If NagatoWeatherCache.IsReady Then
            yukiWeatherElement = NagatoWeatherCache.GetWeatherElementMostRecent()
            .Picture = NagatoWeatherIcon.GetIconMono(yukiWeatherElement.IconId)
            .Text = ("Weather : ") & getConditionText(yukiWeatherElement) ' see above method
            yukiWeatherMenu = New NagatoWeatherInfomationMenu(yukiMenu)
        Else
            .Picture = MikuruMonoIconBlue.Get("umbrella") 
            .Text = ("Weather : (now loading...)")
        End If
    End With
    
End

Private Sub addPowerDevicesMenu()
    
    Dim yukiMenu As New Menu(Me._$rootMenu)
    Dim yukiIndivisualMenu As NagatoPowerDevicesMenu
    
    yukiIndivisualMenu = New NagatoPowerDevicesMenu(yukiMenu)
    
    With yukiMenu
        .Text = ("Power Devices")
        .Picture = MikuruMonoIconBlue.Get("plug")
    End With
    
End

Private Sub addFortuneMenu()
    
    Dim yukiMenu As NagatoFortuneMenu
    
    yukiMenu = New NagatoFortuneMenu(Me._$rootMenu)
    
End

Private Sub addPreferenceMenu()
    
    Dim yukiMenu As New Menu(Me._$rootMenu) As "PreferenceMenu"
    
    With yukiMenu
        .Text = ("Preference")
        .Picture = MikuruMonoIconBlue.Get("equalizer")
    End With
    
End

Private Sub addAboutMenu()
    
    Dim yukiMenu As New Menu(Me._$rootMenu) As "AboutMenu"
    
    With yukiMenu
        .Picture = MikuruMonoIconBlue.Get("star")
        .Text = ("About nagato-navigator")
    End With
    
End

Private Sub addQuitMenu()
    
    Dim yukiMenu As New Menu(Me._$rootMenu) As "LogoutMenu"
    
    With yukiMenu
        .Picture = MikuruMonoIconBlue.Get("button-power")
        .Text = ("Quit")
    End With
    
End

Private Sub ensureApplicationsMenu()
    
    If NagatoMenuCache.Ready Then 
        addApplicationsMenu()
    Else
        addApplicationsPleaseWaitMenu()
    End If
    
End

Private Sub ensureRssMenu()
    
    If NagatoRss.Ready Then 
        addRssMenu()
    Else
        addRssPleaseWaitMenu()
    Endif
    
End

Public Sub _InitializeMenu() 'override
    
    addFortuneMenu()
        MikuruMenuSeparator.Set(Me._$rootMenu)
    If NagatoApplicationsConfig.HasData Then addRecentAppMenu()
    ensureApplicationsMenu()
    addMemoMenu()
    addPlayBackMenu()
    'addMusicPlaylistMenu()
    addOnScreenDisplayMenu()
    addPowerDevicesMenu()
    ensureRssMenu()
    addScreenShotMenu()
    addAlsaMenu()
    addSystemInfoMenu()
    addReminderMenu()
    addTrashBinMenu()
    addWeatherMenu()
    addWorkspaceMenu()
        MikuruMenuSeparator.Set(Me._$rootMenu)
    addPreferenceMenu()
    addAboutMenu()
        MikuruMenuSeparator.Set(Me._$rootMenu)
    addQuitMenu()
    
End

Public Sub DesktopFileMenu_Click()
    
    MikuruApplications.Launch(Last.Tag)
    
End

Public Sub ScreenShotMenu_Click()
    
    Dim yukiPicture As Picture = Desktop.Screenshot()
    
    yukiPicture.Save(User.Home &/ Subst$("screenshot_&1_.png", Time(Now)))
    
End

Public Sub PreferenceMenu_Click()
    
    HaruhiPreference.Center()
    HaruhiPreference.Show()
    
End

Public Sub AboutMenu_Click()
    
    HaruhiAbout.Center()
    HaruhiAbout.Show()
    
End

Public Sub LogoutMenu_Click()
    
    HaruhiLogout.Show()
    
End

Public Sub EmptyTrashMenu_Click()
    
    NagatoTrashHandler.EmptyAll()
    
End
