' Gambas class file

Inherits NagatoInfo

Private $desktopWindowIDs As Integer[]
Private $taskWidth As Integer

Private Function getIDs(argDesktopNumber As Integer) As Integer[]
    
    Dim yukiResult As New Integer[]
    Dim yukiDesktopWindow As DesktopWindow
    
    For Each yukiDesktopWindow In Desktop.Windows
        If yukiDesktopWindow.SkipTaskbar Then Continue
        If yukiDesktopWindow.Desktop <> argDesktopNumber Then Continue
        yukiResult.Add(yukiDesktopWindow.Id)
    Next
    
    Return yukiResult.Sort()
    
End

Private Sub setDesktopWindowIDs()
    
    Dim yukiCount As Integer
    Dim yukiWindowIDs As New Integer[]
    
    For yukiCount = 0 To Desktop.Count - 1
        yukiWindowIDs.Insert(getIDs(yukiCount))
    Next
    
    $desktopWindowIDs = yukiWindowIDs
    
End

Private Sub setTaskWidth(argOffsetLeft As Integer)
    
    Dim yukiCount As Integer = $desktopWindowIDs.Count
    
    If yukiCount = 0 Then
        $taskWidth = argOffsetLeft - 50
    Else
        $taskWidth = Int((argOffsetLeft - 50) / yukiCount)
    Endif
    
End

Private Sub drawClippingRectangle(argPositionX As Integer)
    
    With Paint
        .Save()
        .Brush = .Color(Color.Transparent)
        .Rectangle(argPositionX, 0, ($taskWidth - 16), 18)
        .Stroke(True)
        .Clip()
    End With
    
End

Private Sub drawIcon()
    
    Dim yukiDesktopWIndowID As Integer
    Dim yukiDesktopWindow As DesktopWindow
    Dim yukiPositionX As Integer = 4 * MikuruUX.Grid
    
    For Each yukiDesktopWIndowID In $desktopWindowIDs
        yukiDesktopWindow = New DesktopWindow(yukiDesktopWIndowID)
        drawClippingRectangle(yukiPositionX)
        Paint.Brush = Paint.Color(Color.White)
        If yukiDesktopWindow.Icon Then
            Paint.DrawImage(yukiDesktopWindow.Icon.Stretch(16, 16), yukiPositionX, 0)
        End If
        Paint.DrawText(yukiDesktopWindow.Name, yukiPositionX + 24, 1, $taskWidth, 16, Align.Left)
        yukiPositionX += $taskWidth
        Paint.Restore()
    Next
    
Catch
    Debug Error.Text
    Return
    
End

Private Sub getDesktopWindow(argLeft As Integer) As DesktopWindow
    
    Dim yukiDesktopWindow As DesktopWindow
    
    yukiDesktopWindow = New DesktopWindow($desktopWindowIDs[((argLeft - 50) Div $taskWidth)])
    
    Return yukiDesktopWindow
    
End

Public Sub _SetType()
    
    Me._$type = NagatoInfo.IconBox
    
End

Public Sub DrawInfo(argOffsetLeft As Integer)
    
    Desktop.Windows.Refresh()
    setDesktopWindowIDs()
    setTaskWidth(Screen.Width - argOffsetLeft)
    drawIcon()
    
End

Public Sub MouseDown(argMouseX As Integer) ' override.
    
    Dim yukiDesktopWindow As DesktopWindow
    
    yukiDesktopWindow = getDesktopWindow(argMouseX)
    Desktop.Current = yukiDesktopWindow.Desktop
    yukiDesktopWindow.Activate()
    
End

Public Sub PopUpMenu(argMouseX As Integer) 'override
    
    Dim yukiContextMenu As New NagatoInfoIconBoxContextMenu(getDesktopWindow(argMouseX))
    
    yukiContextMenu.PopUp()
    
End
