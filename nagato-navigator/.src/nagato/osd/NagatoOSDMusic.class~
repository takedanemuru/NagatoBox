' Gambas class file

Inherits NagatoOSD

Public _$uniqueName As String = "NagatoOSDMusic"

Private $mainLineText As NagatoScrollingText

Private Sub addEditTagMenu(argParentMenu As Menu)
    
    Dim yukiMenu As New Menu(argParentMenu) As "EditTagMenu"
    
    With yukiMenu
        .Text = ("Edit tag")
        .Picture = MikuruMonoIconBlue.Get("tag")
    End With
    
End

Private Sub addPlayListMenu(argParentMenu As Menu)
    
    Dim yukiMenu As New Menu(argParentMenu)
    Dim yukiPlaylistMenu As NagatoMusicPlaylistMenu
    
    With yukiMenu
        .Text = ("Playlist")
        .Picture = MikuruMonoIconBlue.Get("music")
    End With
    
    yukiPlaylistMenu = New NagatoMusicPlaylistMenu(yukiMenu)
    
End

Private Sub addShowPlaylistMenu(argParentMenu As Menu)
    
    Dim yukiMenu As New Menu(argParentMenu) As "ShowPlaylistMenu"
    
    With yukiMenu
        .Text = ("Show playlist")
        .Picture = MikuruMonoIconBlue.Get("music", 2 * MikuruUX.Grid)
    End With
    
End

Private Sub addSofwareVolumeMenu(argParentMenu As Menu)
    
    Dim yukiMenu As New Menu(argParentMenu) 
    Dim yukiSoftwareVolumeMenu As NagatoGStreamerSoftwareVolumeMenu
    
    With yukiMenu
        .Text = ("Software volume")
        .Picture = MikuruMonoIconBlue.Get("speaker", 2 * MikuruUX.Grid)
    End With
    
    yukiSoftwareVolumeMenu = New NagatoGStreamerSoftwareVolumeMenu(yukiMenu)
    
End

Private Sub setFontConfig()
    
    If NagatoOSD.FontName <> "" Then
        Paint.Font.Name = NagatoOSD.FontName
    Endif
    
End

Private Sub drawMainLineText()
    
    With Paint
        .Font.Size = MikuruUX.FontSizeMediumLarge
        If Not Object.IsValid($mainLineText) Then $mainLineText = New NagatoScrollingText(.Font, 34, 2)
        $mainLineText.SetText(NagatoMusicPlayer.Title)
        .Text($mainLineText.Text, Me.OffsetLeft + $mainLineText.Offset, Me.OffsetTop2nd)
    End With
    
End

Private Sub drawText()
    
    setFontConfig()
    
    With Paint
        .Brush = .Color(Color.White)
        drawMainLineText()
        .Font.Size = MikuruUX.FontSizeSmall
        .Text(NagatoMusicPlayer.Artist, Me.OffsetLeft, Me.OffsetTop1st)
        .Font.Size = MikuruUX.FontSizeSmall
        .Text(NagatoMusicPlayer.Album, Me.OffsetLeft, Me.OffsetTopZero)
        .Font.Size = MikuruUX.FontSizeSmall
        .Text(getStatusString(), Me.OffsetLeft, Me.OffsetTop3rd)
        .Fill()
    End With

End

Private Sub drawProgress()
    
    With Paint
        .Brush = Paint.Color(Color.White)
        .LineCap = Paint.LineCapRound
        .LineWidth = 1
        .MoveTo(Me.OffsetLeft, Me.OffsetTopProgressbar)
        .LineTo(Me.OffsetLeft + Me.TextAreaWidth, Me.OffsetTopProgressbar)
        .Stroke()
        .LineWidth = 3
        .MoveTo(Me.OffsetLeft, Me.OffsetTopProgressbar)
        .LineTo(Me.OffsetLeft + Me.TextAreaWidth * NagatoMusicPlayer.Progress, Me.OffsetTopProgressbar)
        .Stroke()
    End With
    
End

Private Function hasAlbumArt() As Boolean
    
    If NagatoMusicPlayer.Artist = "" Then Return False
    If NagatoMusicPlayer.Album = "" Then Return False
    
    Return NagatoDBMedia.HasAlbumArt(NagatoMusicPlayer.Artist, NagatoMusicPlayer.Album)
    
End

Private Sub drawAlbumArt()
    
    Dim yukiImage As Image
    
    With Paint
        .Save()
        .Rectangle(2 * MikuruUX.Grid, 2 * MikuruUX.Grid, 14 * MikuruUX.Grid, 14 * MikuruUX.Grid, MikuruUX.Grid)
        .Clip()
        yukiImage = NagatoDBMedia.GetAlbumArt(NagatoMusicPlayer.Artist, NagatoMusicPlayer.Album).Image
        .DrawImage(yukiImage, 2 * MikuruUX.Grid, 2 * MikuruUX.Grid)
        .Restore()
    End With
    
End

Private Sub drawIcon()
    
    Dim yukiImage As Image
    
    yukiImage = Image.Load("pictures/sound_icon.png").Stretch(12 * MikuruUX.Grid, 12 * MikuruUX.Grid)
    Paint.DrawImage(yukiImage, 3 * MikuruUX.Grid, 3 * MikuruUX.Grid)
    
End

Private Sub drawImage()
    
    If hasAlbumArt() Then
        drawAlbumArt()
    Else
        drawIcon()
    Endif
    
End

Private Function getStatusString() As String
    
    Select Case NagatoMusicPlayer.Status
        Case Media.Playing
            Return Subst$("&1", NagatoMusicPlayer.ProgressInText)
        Case Media.Paused
            Return Subst$("&1 [paused]", NagatoMusicPlayer.ProgressInText)
        Case Media.Ready
            Return ("[stopped]")
        Default
            Return ("[not ready]")
    End Select
    
End

Public Sub _AddOtherMenu(argParentMenu As Menu) ' override
    
    Dim yukiMenu As NagatoMusicControlMenu
    
    yukiMenu = New NagatoMusicControlMenu(argParentMenu) As "AdditionalMenu"
    
    addEditTagMenu(argParentMenu)
    addSofwareVolumeMenu(argParentMenu)
        MikuruMenuSeparator.Set(argParentMenu)
    Me._AddSelectLabelColorMenu(argParentMenu)
    
End

Public Sub _SetPicture() 'override
    
    Dim yukiImage As Image = Me._GetBaseImage(NagatoSettingsOSD.GetColor(Me.UniqueName))
    
    With Paint
        .Begin(yukiImage)
        .AntiAlias = True
        drawImage()
        Me._DrawClippingRectangle()
        drawText()
        drawProgress()
        .End()
    End With
    
    Me._$form.Picture = yukiImage.Picture
    
End

Public Sub Form_MouseDown()
    
    Dim yukiRect As Rect
    
    yukiRect = New Rect(Me.OffsetLeft, Me.OffsetTopProgressbar - 2 * MikuruUX.Grid, Me.TextAreaWidth, 4 * MikuruUX.Grid)
    
    If yukiRect.Contains(Mouse.X, Mouse.Y) Then
        NagatoMusicPlayer.SetProgress((Mouse.X - Me.OffsetLeft) / Me.TextAreaWidth)
    Endif
    
End

Public Sub EditTagMenu_Click()
    
    If NagatoMusicPlayer.CurrentPath = "" Then
        HaruhiBalloon.SetText("No Music is playing.")
    Else
        HaruhiTagEdit.Show()
    End If
    
End

Public Sub ShowPlaylistMenu_Click()
    
    HaruhiMusicPlaylist.Show()
    
End
