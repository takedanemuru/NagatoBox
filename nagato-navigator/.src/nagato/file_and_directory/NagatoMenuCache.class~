' Gambas class file

Create Static

Property Read Ready As Boolean
Property Read AllApplications As Object[]
Property Read NagatoSoftwareCompilationApplications As Object[] 
Property Read Settings As Object[]
Property Read Graphics As Object[]
Property Read Medias As Object[]
Property Read Educations As Object[]
Property Read Networks As Object[]
Property Read Developments As Object[]
Property Read Offices As Object[]
Property Read Games As Object[]
Property Read Utilities As Object[]
Property Read Systems As Object[]
Property Read Kde4 As Object[]

Private Const ApplicationDirectory As String = "/usr/share/applications"
Private Const ApplicationDirectoryKDE4 As String = "/usr/share/applications/kde4"

Private $ready As Boolean = False
Private $allApllications As New Object[]
Private $nagatoSoftwareCompilationApplications As New Object[]
Private $settings As New Object[]
Private $graphics As New Object[]
Private $medias As New Object[]
Private $educations As New Object[]
Private $networks As New Object[]
Private $developments As New Object[]
Private $offices As New Object[]
Private $games As New Object[]
Private $utilities As New Object[]
Private $systems As New Object[]
Private $kde4 As New Object[]

Private $previousRefresh As Date
Private $applicationDirectoryObserver As NagatoDirectoryObserver
Private $kdeApplicationDirectoryObserver As NagatoDirectoryObserver

Private Function isMediaApplication(argDesktopFile As NagatoDesktopFile) As Boolean
    
    With argDesktopFile
        If .HasCategory("Audio") Or If .HasCategory("video") Or If .HasCategory("AudioVideo") Then Return True
    End With
    
    Return False
    
End

Private Sub addDesktopFiles(argPath As String)
    
    Dim yukiDesktopFile As New NagatoDesktopFile(argPath)
    
    With yukiDesktopFile
        $allApllications.Add(yukiDesktopFile)
        If Not .ShowIn Then Return
        If .HasCategory("Nagato") Then $nagatoSoftwareCompilationApplications.Add(yukiDesktopFile)
        If .HasCategory("Settings") Then $settings.Add(yukiDesktopFile)
        If .HasCategory("Graphics") Then $graphics.Add(yukiDesktopFile)
        If isMediaApplication(yukiDesktopFile) Then $medias.Add(yukiDesktopFile)
        If .HasCategory("Education") Then $educations.Add(yukiDesktopFile)
        If .HasCategory("Development") Then $developments.Add(yukiDesktopFile)
        If .HasCategory("Network") Or If .HasCategory("Internet") Then $networks.Add(yukiDesktopFile)
        If .HasCategory("Office") Then $offices.Add(yukiDesktopFile)
        If .HasCategory("Game") Then $games.Add(yukiDesktopFile)
        If .HasCategory("Utility") Then $utilities.Add(yukiDesktopFile)
        If .HasCategory("System") Then $systems.Add(yukiDesktopFile)
    End With
    
End

Private Sub addKde4DesktopFiles(argPath As String)
    
    Dim yukiDesktopFile As New NagatoDesktopFile(argPath)
    
    $allApllications.Add(yukiDesktopFile)
    $kde4.Add(yukiDesktopFile)

End

Private Sub addApplications()
    
    Dim yukiPath As String
    
    For Each yukiPath In Dir(ApplicationDirectory).Sort()
        If File.Ext(ApplicationDirectory &/ yukiPath) = "desktop" Then
            addDesktopFiles(ApplicationDirectory &/ yukiPath)
        Endif
    Next
    
End

Private Sub addKdeApplications()
    
    Dim yukiPath As String
    
    For Each yukiPath In Dir(ApplicationDirectoryKDE4).Sort()
        If File.Ext(ApplicationDirectoryKDE4 &/ yukiPath) = "desktop" Then
            addDesktopFiles(ApplicationDirectoryKDE4 &/ yukiPath)
            addKde4DesktopFiles(ApplicationDirectoryKDE4 &/ yukiPath)
        Endif
    Next
    
End

Private Sub clearAll()
    
    $allApllications.Clear()
    $nagatoSoftwareCompilationApplications.Clear()
    $settings.Clear()
    $graphics.Clear()
    $medias.Clear()
    $educations.Clear()
    $networks.Clear()
    $developments.Clear()
    $offices.Clear()
    $games.Clear()
    $utilities.Clear()
    $systems.Clear()
    $kde4.Clear()
    
End

Private Sub refreshData()
    
    clearAll()
    addApplications()
    addKdeApplications()
    
End

Private Sub applicationObserverEventHandler(argPath As String)
    
    If Not $ready Then Return
    If 10 > Abs(DateDiff($previousRefresh, Now, gb.Second)) Then Return
    
    $ready = False
        refreshData()
    $ready = True 
    
End

Private Sub initializeDirectoryObservers()
    
    $applicationDirectoryObserver = New NagatoDirectoryObserver As "ApplicationObserver"
    $applicationDirectoryObserver.Directory = ApplicationDirectory
    
    $kdeApplicationDirectoryObserver = New NagatoDirectoryObserver As "ApplicationObserver"
    $kdeApplicationDirectoryObserver.Directory = ApplicationDirectoryKDE4
    
End

Public Sub Activate()
    
    $previousRefresh = Now
    
    $ready = False
        addApplications()
        addKdeApplications()
        initializeDirectoryObservers()
    $ready = True
    
    Debug "appmenu is ready"
    
End

Public Sub ApplicationObserver_Deleted(argPath As String)
    
    Debug argPath
    
    applicationObserverEventHandler(argPath)
    
End

Public Sub ApplicationObserver_Modefied(argPath As String)
    
    Debug argPath
    
    applicationObserverEventHandler(argPath)
    
End

Private Function Ready_Read() As Boolean

    Return $ready

End

Private Function Games_Read() As Object[]

    Return $games

End

Private Function Utilities_Read() As Object[]

    Return $utilities

End

Private Function Offices_Read() As Object[]

    Return $offices

End

Private Function Networks_Read() As Object[]

    Return $networks

End

Private Function Settings_Read() As Object[]

    Return $settings
End

Private Function Graphics_Read() As Object[]

    Return $graphics

End

Private Function Educations_Read() As Object[]

    Return $educations

End

Private Function Systems_Read() As Object[]

    Return $systems

End

Private Function Medias_Read() As Object[]

    Return $medias

End

Private Function Developments_Read() As Object[]

    Return $developments

End

Private Function NagatoSoftwareCompilationApplications_Read() As Object[]

    Return $nagatoSoftwareCompilationApplications

End

Private Function AllApplications_Read() As Object[]

    Return $allApllications

End

Private Function Kde4_Read() As Object[]

    Return $kde4

End
