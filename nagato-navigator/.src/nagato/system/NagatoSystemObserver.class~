' Gambas class file

Create Static

Property Read CpuUsage As Float
Property Read MemoryUsage As Float
Property Read SwapUsage As Float
Property Read ProcessCount As Integer
Property Read Activated As Boolean

Private Const SystemSnapShotInterval As Integer = 2000 ' milliseconds

Private $timer As Timer
Private $observationStep As Integer
Private $cpuUsage As Float
Private $cpuUsageHistory As New Float[]
Private $memoryUsage As Float
Private $memoryUsageHistory As New Float[]
Private $swapUsage As Float
Private $swapUsageHistory As New Float[]
Private $processCount As Integer
Private $processCountHistory As New Integer[]

Event Finished

Private Sub addHistory(argHistoryArray As Variant[], argData As Variant)
    
    argHistoryArray.Add(argData)
    
    If argHistoryArray.Count > 100 Then argHistoryArray.Delete(0, 1)
    
End

Private Sub setProperty()
    
    $cpuUsage = NagatoCpuObserver.getCpuRate()
    'addHistory($cpuUsageHistory, $cpuUsage)
    $memoryUsage = NagatoMemoryObserver.GetMemoryRate()
    'addHistory($memoryUsageHistory, $memoryUsage)
    $swapUsage = NagatoSwapObserver.GetSwapPercentage()
    'addHistory($swapUsageHistory, $swapUsage)
    $processCount = NagatoProcessObserver.GetProcessCount()
    'addHistory($processCountHistory, $processCount)

End

Public Sub Refresh()
    
    $timer.Start()
    
End

Public Sub Stop()
    
    $timer.Stop()
    
End

Public Sub _new()
    
    $timer = New Timer As "Timer"
    $timer.Delay = SystemSnapShotInterval
    $timer.Start()
    
End

Public Sub Timer_Timer()
    
    Select Case $observationStep
        Case 0
            NagatoCpuObserver.setPrevData()
            Inc $observationStep
        Case 1
            NagatoCpuObserver.setCurrentData()
            NagatoMemoryObserver.SetVariables()
            setProperty()
            Raise Finished
    End Select
    
End

Private Function CpuUsage_Read() As Float

    Return $cpuUsage

End

Private Function MemoryUsage_Read() As Float

    Return $memoryUsage

End

Private Function SwapUsage_Read() As Float

    Return $swapUsage

End

Private Function Activated_Read() As Boolean

    Return $timer.Enabled

End

Private Function ProcessCount_Read() As Integer

    Return $processCount

End
