' Gambas class file

Create Static

Property Read Paths As String[]
Property Read PathsInLine As String
Property Read Count As Integer

Private $paths As New String[]

Event New(argNewPaths As String[])
Event Clear

Private Function isAcceptable(argPath As String) As Boolean
    
    Dim yukiType As String = DesktopMime.FromFile(argPath).Type
    
    Debug yukiType
    
    If yukiType = "application/x-compress" Then Return True
    If yukiType = "application/zip" Then Return True
    If yukiType = "application/lha" Then Return True
    If yukiType = "application/x-gtar" Then Return True
    If yukiType = "application/x-gzip" Then Return True
    If yukiType = "application/x-lha" Then Return True
    If yukiType = "application/x-lha-compressed" Then Return True
    If yukiType = "application/x-rar-compressed" Then Return True
    If yukiType = "application/x-tar" Then Return True
    If yukiType = "application/x-zip-compressed" Then Return True
    If yukiType = "application/x-zx" Then Return True
    
    Return False
    
End

Public Sub SetPaths(argPaths As String[])
    
    Dim yukiPath As String
    Dim yukiNewPaths As New String[]
    
    For Each yukiPath In argPaths
        If Not Exist(yukiPath) Then Continue
        If $paths.Exist(yukiPath) Then Continue
        If Not isAcceptable(yukiPath) Then Continue
        yukiNewPaths.Add(yukiPath)
        $paths.Add(yukiPath)
    Next
    
    If yukiNewPaths.Count > 0 Then Raise New(yukiNewPaths)
    
End

Public Sub Clear()
    
    $paths.Clear()
    
    Raise Clear
    
End

Private Function Paths_Read() As String[]

    Return $paths

End

Private Function PathsInLine_Read() As String

    Dim yukiLine As String
    Dim yukiPath As String
    
    For Each yukiPath In $paths
        yukiLine &= yukiPath
        yukiLine &= " "
    Next

    Return yukiLine

End

Private Function Count_Read() As Integer

    Return $paths.Count

Catch
    Return 0

End
