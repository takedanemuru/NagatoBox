' Gambas class file

Inherits NagatoDB

Property Read Ready As Boolean

Public Const TableSymbol As String = "symbol"
Public Const ColumnId As String = "id"
Public Const ColumnPath As String = "path_name"
Public Const ColumnSymbol As String = "symbol_name"

Public _$uniqueName As String = "Symbol"

Private Sub ensureTable()
    
    Dim yukiTable As Table
    
    Try Me._$connection.Open()
    
    If Not Me._$connection.Tables.Exist(TableSymbol) Then
        yukiTable = Me._$connection.Tables.Add(TableSymbol)
        yukiTable.Fields.Add(ColumnId, db.Serial)
        yukiTable.Fields.Add(ColumnPath, db.String)
        yukiTable.Fields.Add(ColumnSymbol, db.String)
        yukiTable.PrimaryKey = [ColumnId]
        yukiTable.Update()
    Endif

End

Public Function GetSymbolName(argPath As String) As String
    
    Dim yukiResult As Result = Me._$connection.Find(TableSymbol, "path_name = &1", argPath)
    
    Return IIf(yukiResult.Count = 0, "", yukiResult[ColumnSymbol])
    
Catch
    Return ""
    
End

Public Sub Push(argPath As String, argSymbol As String)
    
    Dim yukiResult As Result
    
    Try Me._$connection.Delete(TableSymbol, "path_name = &1", argPath)
    
    Me._$connection.Begin()
        yukiResult = Me._$connection.Create(TableSymbol)
        yukiResult[ColumnPath] = argPath
        yukiResult[ColumnSymbol] = argSymbol
        yukiResult.Update()
    Me._$connection.Commit()
    
Catch
    Me._$connection.Rollback()
    
End

Public Sub PushPaths(argPaths As String[], argSymbol As String)
    
    Dim yukiPath As String
    
    For Each yukiPath In argPaths
        If Exist(yukiPath) Then Me.Push(yukiPath, argSymbol)
    Next
    
End

Public Sub RemovePaths(argPaths As String[])
    
    Dim yukiPath As String
    
    For Each yukiPath In argPaths
        Try Me._$connection.Delete(TableSymbol, "path_name = &1", yukiPath)
    Next
    
End

Public Sub _new()
    
    Me._SetConnection()
    ensureTable()
    
End

Private Function Ready_Read() As Boolean

    Return True

End
