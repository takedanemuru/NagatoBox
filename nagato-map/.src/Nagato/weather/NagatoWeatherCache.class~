' Gambas class file

Create Static

Property Read IsReady As Boolean

Private $downloader As New NagatoDownloaderWeather As "Downloader"

' Private $xmlDocument As New XmlDocument
' Private $cache As New Collection
' Private $ready As Boolean = False
' Private $buffer As String
' Private $httpClient As New HttpClient As "HttpClient"

Event Finished

' Private Sub setAdditionalData(argWeatherElement As NagatoWeatherElement, argData As XmlElement[], argTimeStamp As String)
'     
'     If Not Object.IsValid(argWeatherElement) Then
'         Return
'     Else If Not argWeatherElement.HasIcon Then
'         argWeatherElement.SetAdditionalData(argData)
'     Else
'         $cache.Add(argWeatherElement, argTimeStamp)
'     End If 
'     
' End
' 
' Private Sub refresh(argBuffer As String)
'     
'     Dim yukiXmlElement As XmlElement
'     Dim yukiWeatherElement As NagatoWeatherElement
'     Dim yukiChildElements As XmlElement[]
'     
'     $xmlDocument.FromString(argBuffer)
'     
'     For Each yukiXmlElement In $xmlDocument.GetElementsByTagName("time")
'         yukiChildElements = yukiXmlElement.ChildElements[0].ChildElements
'         If yukiChildElements.Count > 2 Then
'             yukiWeatherElement = New NagatoWeatherElement
'             yukiWeatherElement.SetEssentialData(yukiChildElements)
'         Else
'             setAdditionalData(yukiWeatherElement, yukiChildElements, yukiXmlElement.Attributes["to"])
'         Endif
'     Next
'     
'     $ready = True
'     
'     Raise Finished
'     
' Catch
'     Return
'     
' End

Public Sub Activate(argLatitude As Float, argLongtude As Float)
    
'     $ready = False
'     $buffer = ""
'     
'     With $httpClient
'         .Async = True
'         .URL = NagatoWeatherApi.Get(argLatitude, argLongtude, 5)
'         .Timeout = 30
'     End With
'     
'     $httpClient.Get()
'     
' Catch 
'     Return 'to avoid changing property during downloading.
    
    Debug "Activated"
    
    $downloader.Ready = False
    $downloader.Get(NagatoWeatherApi.Get(argLatitude, argLongtude, 5))
    
End

Public Function GetWeatherElementMostRecent() As NagatoWeatherElement
    
    'Return $cache[MikuruTimeStamp.GetRecent()]
    Return $downloader.Cache[MikuruTimeStamp.GetRecent()]
    
End

Public Function HasElement(argTime As String) As Boolean
    
    'Return $cache.Exist(argTime)
    Return $downloader.Cache.Exist(argTime)
    
End

Public Function GetElement(argTime As String) As NagatoWeatherElement
    
    'Return $cache[argTime]
    Return $downloader.Cache[argTime]
    
Catch
    Return Null
    
End

' Public Sub HttpClient_Read()
'      
'     $buffer &= Read #Last, Lof(Last)
'      
' End
' 
' Public Sub HttpClient_Finished()
'     
'     $httpClient.Close()
'     refresh($buffer)
'     
' End

Public Sub Downloader_Finished()
    
    $downloader.Ready = True
    
    Raise Finished
    
End

Private Function IsReady_Read() As Boolean

    'Return $ready

    Return $downloader.Ready

End
