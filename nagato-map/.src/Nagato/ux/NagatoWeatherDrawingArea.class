' Gambas class file

Property Longitude As Float

Private $drawingArea As DrawingArea
Private $observer As Observer
Private $currentWeather As NagatoWeatherElement
Private $textRect As New Rect
Private $longitude As Float

Private Function getUTCHour() As Integer
    
    Dim yukiResult As String
    
    Shell Subst$("date -u &1", Quote$("+%k")) To yukiResult
    
    Return CInteger(Replace$(yukiResult, "\n", ""))
    
End

Private Function getUTCMinute() As Integer
    
    Dim yukiResult As String
    
    Shell Subst$("date -u &1", Quote$("+%M")) To yukiResult
    
    Return (CInteger(Replace$(yukiResult, "\n", "")) / 60)
    
End

Private Function isDay() As Boolean
    
    Dim yukiCurrentTime As Float = getUTCHour() + getUTCMinute() + ($longitude / 15)
    
    If 18 > yukiCurrentTime And If yukiCurrentTime >= 6 Then
        Return True
    Else
        Return False
    Endif
    
End

Private Sub setTextRect()
    
    With $textRect
        .X = 8
        .Y = 8
        .W = $drawingArea.W - 16
        .H = $drawingArea.H - 16
    End With
    
End

Private Function getTitle() As String
    
    Return Subst$("<h2>&1</h2>&2", Upper$(NagatoWeatherCondition.GetText($currentWeather.IconId)), String$(8, "<br>"))
    
End

Private Function getHeaders() As String
    
    Dim yukiReturn As String = "<h2> </h2><br>"
    
    yukiReturn &= "Temp.:<br>"
    yukiReturn &= "Wind(S):<br>"
    yukiReturn &= "Wind(D):<br>"
    yukiReturn &= "Hum.:<br>"
    yukiReturn &= "Cloud:<br>"
    yukiReturn &= "Press.:<br>"
    yukiReturn &= "Prec.:<br>"
    
    Return yukiReturn
    
End

Private Function getStatus() As String
    
    Dim yukiReturn As String = "<h2> </h2><br>"
    
    With $currentWeather
        yukiReturn &= Subst$("&1Â°C<br>", .Temperature)
        yukiReturn &= Subst$("&1m<br>", .WindSpeed)
        yukiReturn &= Subst$("&1<br>", .WindDirection)
        yukiReturn &= Subst$("&1%<br>", .Humidity)
        yukiReturn &= Subst$("&1%<br>", .Cloudiness)
        yukiReturn &= Subst$("&1HPa<br>", .Pressure)
        yukiReturn &= Subst$("&1mm<br>", .Precipitation)
    End With
    
    Return yukiReturn
    
End

Private Sub drawWatherText()
    
    setTextRect()

    With $textRect
        Paint.DrawRichText(getTitle(), .X, .Y, .W, .H, Align.Center)
        Paint.DrawRichText(getHeaders(), .X, .Y, .W, .H, Align.Left)
        Paint.DrawRichText(getStatus(), .X, .Y, .W, .H, Align.Right)
    End With
    
End

Private Function getWeatherIcon() As Image
    
    If isDay() Then
            Return NagatoWeatherIcon.GetIconImageDay($currentWeather.IconId).Stretch(96, 96)
    Else
            Return NagatoWeatherIcon.GetIconImageNight($currentWeather.IconId).Stretch(96, 96)
    End If
    
End

Private Sub setWeatherInfomation(argBackground As Integer)
    
    $drawingArea.Background = argBackground
    
    Paint.Begin($drawingArea)
        Paint.Brush = Paint.Color(Color.White)
        Paint.Font.Bold = True
        Paint.DrawImage(getWeatherIcon(), ($drawingArea.W - 96) / 2, 16)
        drawWatherText()
    Paint.End()
    
Catch
    Debug Error.Text
    Return
    
End

Private Sub setPleaseWait(argBackground As Integer)
    
    $drawingArea.Background = argBackground
    
    Paint.Begin($drawingArea)
        Paint.Brush = Paint.Color(Color.White)
        Paint.Font.Bold = True
        Paint.DrawImage(MikuruIcon.Get("question", 48).Image, 40, 8)
        Paint.DrawRichText("Please wait...", 0, 0, $drawingArea.W, $drawingArea.H, Align.Center)
    Paint.End()
    
Catch
    Debug Error.Text
    Return
    
End

Public Sub Refresh()
    
    $drawingArea.Refresh()
    
End

Public Sub _new(argDrawingArea As DrawingArea)
    
    $drawingArea = argDrawingArea
    
    $observer = New Observer($drawingArea) As "Asakura"
    
End

Public Sub Asakura_Draw()
    
    Debug isDay()
    
     If NagatoWeatherCache.IsReady
        $currentWeather = NagatoWeatherCache.GetWeatherElementMostRecent()
        setWeatherInfomation(NagatoWeatherCondition.GetColor($currentWeather.IconId, isDay()))
    Else
        setPleaseWait(Color.DarkBlue)
    End If
    
End

Private Function Longitude_Read() As Float

    Return $longitude

End

Private Sub Longitude_Write(Value As Float)

    $longitude = Value

End
