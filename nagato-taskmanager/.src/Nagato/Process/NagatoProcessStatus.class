' Gambas class file

Private $cpuTimes As New NagatoCpuTime
Private $headers As String[] = ["id", "status", "name", "cpu", "rss", "virtual"]

Private Function getStatusArray(argDirectory As String) As String[]
    
    Dim yukiSourcePath As String = Subst$("/proc/&1/stat", File.Name(argDirectory))
    Dim yukiSourceText As String = File.Load(yukiSourcePath)
    
    Return Split(yukiSourceText, " ", "")
    
End

Private Function convertNullBytesToSpace(argString As String) As String
    
    Return Replace$(argString, "\0", " ") 'convert null bytes ("\0") to space (" ")
    
End

Private Function getProcName(argDirectory As String, argStatus As String[], argCpuStatus As Float) As String
    
    Dim yukiName As String = ""
    
    If argCpuStatus > 0 Or If CFloat(argStatus[22]) > 0 Then 
        yukiName = File.Load(Subst$("/proc/&1/cmdline", File.Name(argDirectory)))
        yukiName = convertNullBytesToSpace(yukiName)
    End If

    If yukiName = "" Then yukiName = argStatus[1]
    
    Return yukiName
    
End

Public Sub SetCpuTimes()
    
    $cpuTimes.SetCpuTimes()
    
End

Public Sub _get(argDirectory As String) As Collection
    
    Dim yukiStatus As String[] = getStatusArray(argDirectory)
    Dim yukiCpuStatus As Float = $cpuTimes.CpuUsageInFloat(yukiStatus)
    Dim yukiName As String = getProcName(argDirectory, yukiStatus, yukiCpuStatus)
    Dim yukiResult As New Collection
    
    yukiResult.Add(CInt(File.Name(argDirectory)), $headers[0])
    yukiResult.Add(yukiStatus[2], $headers[1])
    yukiResult.Add(yukiName, $headers[2])
    yukiResult.Add(yukiCpuStatus, $headers[3])
    yukiResult.Add(CFloat(yukiStatus[23]), $headers[4])
    yukiResult.Add(CFloat(yukiStatus[22]), $headers[5])
    
    Return yukiResult
    
End
