' Gambas class file

Property Read IsSelected As Boolean

Private $timer As New Timer As "Timer"
Private $cpuUsages As New Collection
Private $cpuTimeTotal As Integer
Private $cpuTimeDifference As Integer
Private $targetId As String
Private $targetHeader As Integer = 0
Private $sortAscend As Boolean = True

Private $lastSelected As String = ""
Private $starButton As NagatoStarButton

Private Function getCpuUsageInFloat(argData As String[]) As Float
    
    Dim yukiTotalUsage As Integer = CInt(argData[13]) + CInt(argData[14])
    Dim yukiBuffer As Integer
    
    If yukiTotalUsage = 0 Then Return 0
    
    If $cpuUsages.Exist(argData[0]) Then
        yukiBuffer = CInt(yukiTotalUsage) - CInt($cpuUsages[argData[0]])
        $cpuUsages[argData[0]] = yukiTotalUsage
        If yukiBuffer = 0 Then
            Return 0
        Else If $cpuTimeDifference = 0 Then
            Return 0
        Else
            Return yukiBuffer / $cpuTimeDifference
        End If
    Else
        $cpuUsages[argData[0]] = yukiTotalUsage
        Return 0
    Endif
    
End

Private Function convertPageToMiB(argData As String) As String
    
    If argData <> 0 Then
        Return Format$(CInt(argData) / 256, "#,##0.00MiB") '1page=4KiB(1/256MiB)
    Else
        Return "-"
    Endif
    
End

Private Function convertKiloByteToMiB(argData As String) As String
    
    If argData <> 0 Then
        Return Format$(CInt(argData) / (1024 ^ 2), "#,##0.00MiB") 'byte to MiB
    Else
        Return "-"
    Endif
    
End

Private Function getRowPosition(argCpuUsage As String) As Integer
    
    Dim yukiCount As Integer
    
    For yukiCount = 0 To SystemMonitorGrid.Rows.Max
        If String.Comp(SystemMonitorGrid[yukiCount, 3].Text, argCpuUsage) Then
            Return yukiCount
        Endif
    Next
    
    Return -1
    
End

Private Function getRowData(argDirectory As String) As Collection
    
    Dim yukiStatus As String[] = Split(File.Load(Subst$("/proc/&1/stat", File.Name(argDirectory))), " ", "")
    Dim yukiResult As New Collection
    
    yukiResult.Add(CInt(File.Name(argDirectory)), "id")
    yukiResult.Add(yukiStatus[2], "status")
    yukiResult.Add(yukiStatus[1], "name")
    yukiResult.Add(getCpuUsageInFloat(yukiStatus), "cpu")
    yukiResult.Add(CFloat(yukiStatus[23]), "rss")
    yukiResult.Add(CFloat(yukiStatus[22]), "virtual")
    
    Return yukiResult
    
End

Private Function convertUsageToString(argCpuUsage As Float) As String
    
    If argCpuUsage = 0 Then
        Return "-"
    Else
        Return Format$(argCpuUsage, "##0.00%")
    Endif
    
End

Private Sub setBackGroundColor()
    
    Dim yukiCount As Integer
    Dim yukiColor As Integer = Color.Lighter(Color.Lighter(Color.Lighter(Color.Blue)))
    
    For yukiCount = 0 To SystemMonitorGrid.Columns.Max
        SystemMonitorGrid[SystemMonitorGrid.Rows.Max, yukiCount].Background = yukiColor
    Next
    
End

Private Sub setRowData(argRowData As Collection)
    
    With SystemMonitorGrid
        Inc .Rows.Count
        SystemMonitorGrid[.Rows.Max, 0].Text = CStr(argRowData["id"])
        SystemMonitorGrid[.Rows.Max, 1].Text = argRowData["status"]
        SystemMonitorGrid[.Rows.Max, 2].Text = argRowData["name"]
        SystemMonitorGrid[.Rows.Max, 3].Text = convertUsageToString(argRowData["cpu"])
        SystemMonitorGrid[.Rows.Max, 4].Text = convertPageToMiB(CStr(argRowData["rss"]))
        SystemMonitorGrid[.Rows.Max, 5].Text = convertKiloByteToMiB(CStr(argRowData["virtual"]))
        SystemMonitorGrid[.Rows.Max, 3].Alignment = Align.Right
        SystemMonitorGrid[.Rows.Max, 4].Alignment = Align.Right
        SystemMonitorGrid[.Rows.Max, 5].Alignment = Align.Right
        If Odd(.Rows.Max) Then setBackGroundColor()
        If .[.Rows.Max, 0].Text = $lastSelected Then .Select(.Rows.Max, 1)
    End With
    
End

Private Function isLesser(argGridData As Variant, argRowData As Variant) As Boolean
    
    If $sortAscend Then
        Return (argGridData > argRowData)
    Else
        Return (argRowData > argGridData)
    Endif
    
End

Private Function getKey() As String
    
    Select Case $targetHeader
        Case 0
            Return "id"
        Case 1
            Return "status"
        Case 2
            Return "name"
        Case 3
            Return "cpu"
        Case 4
            Return "rss"
        Case 5
            Return "virtual"
    End Select
    
End

Private Sub setGridData(argRowData As Collection, ByRef refGridData As Variant[])
    
    Dim yukiCount As Integer
    
    For yukiCount = 0 To refGridData.Max
        If isLesser(refGridData[yukiCount][getKey()], argRowData[getKey()]) Then
            refGridData.Add(argRowData, yukiCount)
            Return
        Endif
    Next
    
    refGridData.Add(argRowData)
    
End

Private Sub setGridView()
    
    Dim yukiDirectory As String
    Dim yukiRowData As Collection
    Dim yukiGridData As New Variant[]
    Dim yukiCurrentY As Integer = SystemMonitorGrid.ScrollY
    Dim yukiCount As Integer
    
    SystemMonitorGrid.Clear()
    SystemMonitorGrid.Rows.Count = 0
    
    For Each yukiDirectory In Dir("/proc", "*[0-9]", gb.Directory)
        yukiRowData = getRowData(yukiDirectory)
        If yukiGridData.Count = 0 Then
            yukiGridData.Add(yukiRowData)
        Else
            setGridData(yukiRowData, ByRef yukiGridData)
        Endif
    Next
    
    For yukiCount = 0 To yukiGridData.Max
        setRowData(yukiGridData[yukiCount])
    Next
    
    Try SystemMonitorGrid.ScrollY = yukiCurrentY
    
End

Private Function getCpuStatus() As String
    
    Dim yukiLine As String
    Dim yukiElements As String[]
    Dim yukiResult As Integer
    Dim yukiCount As Integer
    
    Exec ["head", "-n", "1", "/proc/stat"] To yukiLine
    
    yukiElements = Split(yukiLine, " ", "", True)
    
    For yukiCount = 1 To 8
        yukiResult += CInt(yukiElements[yukiCount])
    Next
    
    Return yukiResult
    
End

Private Sub setCpuTimes()
    
    Dim yukiCurrentTotal As Integer = getCpuStatus()
    
    If $cpuTimeTotal = 0 Then
        $cpuTimeTotal = yukiCurrentTotal
        $cpuTimeDifference = 0
    Else
        $cpuTimeDifference = yukiCurrentTotal - $cpuTimeTotal
        $cpuTimeTotal = yukiCurrentTotal
    Endif
    
End

Private Sub setSystemMonitorGrid()
    
    SystemMonitorGrid.Rows.Count = 0
    
    With SystemMonitorGrid
        .Columns.Count = 6
        .Columns[0].Text = ("Process ID")
        .Columns[1].Text = ("Status")
        .Columns[2].Text = ("Process Name")
        .Columns[3].Text = ("CPU Usage")
        .Columns[4].Text = ("Memory Usage(RSS)")
        .Columns[5].Text = ("Memory Usage(Virtual)")
    End With
    
End

Public Sub Form_Open()
    
    Application.MainWindow = Me
    NagatoSettings.LoadFormSettings(Me)
    
    NagatoDBus.Register()
    NagatoSystemObserver.Refresh()
    setSystemMonitorGrid()
    
    $starButton = New NagatoStarButton(HBox1) As "StarButton"
    
    $timer.Start()
    
End

Public Sub Form_Close()
    
    NagatoDBus.Unregster()
    NagatoSettings.SaveFormSettings(Me)
    
End

Public Sub Timer_Timer()
    
    setCpuTimes()
    setGridView()
    GraphArea.Refresh()
    
End

Private Sub paintGridLine()
    
    Dim yukiCount As Integer
    
    Paint.Brush = Paint.Color(Color.Gray)
    Paint.LineJoin = Paint.LineJoinRound
    Paint.LineWidth = 0.05
        For yukiCount = 25 To 75 Step 25
            Paint.MoveTo(0, yukiCount)
            Paint.LineTo(GraphArea.W, yukiCount)
        Next
    Paint.Stroke()
    
End

Private Sub paintLine(argColor As Integer, argHistory As Float[])
    
    Dim yukiCount As Integer
    Dim yukiX As Integer
    
    If 2 > argHistory.Count Then Return
    
    Paint.Brush = Paint.Color(argColor)
    Paint.LineJoin = Paint.LineJoinRound
    Paint.LineWidth = 1
        For yukiCount = 0 To argHistory.Max - 1
            yukiX = GraphArea.W - (yukiCount * 4)
            Paint.MoveTo(yukiX, 100 - argHistory[argHistory.Max - yukiCount] * 100)
            Paint.LineTo(yukiX - 4, 100 - argHistory[argHistory.Max - yukiCount - 1] * 100)
        Next
    Paint.Stroke()
    
End

Private Sub kill()
    
    If $lastSelected = "" Then Return
    If Message.Warning(Subst$(("Are you sure to kill &1 ?"), $lastSelected), ("Cancel"), ("OK")) = 2 Then
        Try Shell Subst$("kill &1", $lastSelected)
    Endif
    
End

Private Function getText() As String
    
    Dim yukiText As String = Space$(2)
    
    yukiText &= Format$(NagatoSystemObserver.CpuUsage, " CPU: ##0.00%,   ")
    yukiText &= Format$(NagatoSystemObserver.MemoryUsage, " Memory: ##0.00%,   ")
    yukiText &= Format$(NagatoSystemObserver.SwapUsage, " Swap: ##0.00%,   ")
    yukiText &= Format$(NagatoSystemObserver.ProcessCount, " Processes: ###0")
    
    Return yukiText
    
End

Public Sub GraphArea_Draw()
    
    Paint.Begin(GraphArea)
        paintGridLine()
        paintLine(Color.Red, NagatoSystemObserver.CpuHistory)
        paintLine(Color.Blue, NagatoSystemObserver.MemoryHistory)
        paintLine(Color.Green, NagatoSystemObserver.SwapHistory)
        SystemLabel.Text = getText()
    Paint.End()
    
End

Public Sub SystemMonitorGrid_ColumnClick(argColumnIndex As Integer)

    If $targetHeader = argColumnIndex Then
        $sortAscend = Not $sortAscend
    Else
        $targetHeader = argColumnIndex
    Endif
    
End

Public Sub SystemMonitorGrid_MouseDown()

    Dim yukiMenu As New Menu(HaruhiMain) 
    Dim yukiKillMenu As New Menu(yukiMenu) As "KillMenu"
    
    If SystemMonitorGrid.RowAt(Mouse.Y) = -1 Then Return
    
    $lastSelected = SystemMonitorGrid[SystemMonitorGrid.Row, 0].Text
    
    yukiMenu.Visible = False
    yukiKillMenu.Text = "KILL"
    
    If Mouse.Right Then yukiMenu.Popup()

End

Public Sub KillMenu_Click()
    
    kill()
    
End

Public Sub StarButton_Signal(argSignal As Integer, argValues As Variant[])
    
    Debug argSignal
    
    Select Case argSignal
        Case NagatoStarMenu.MenuUnselect
            $lastSelected = ""
        Case NagatoStarMenu.MenuKill
            kill()
        Case NagatoStarMenu.MenuAbout
            HaruhiAbout.ShowDialog()
        Case NagatoStarMenu.MenuQuit
            Me.Close()
    End Select
    
End

Private Function IsSelected_Read() As Boolean

    If $lastSelected = "" Then 
        Return False
    Else
        Return True
    Endif

End
