' Gambas class file

Inherits NagatoObserver

Private $memoryTotal As Integer
Private $memoryAvailable As Integer
Private $memoryFree As Integer
Private $memoryBuffers As Integer
Private $memoryCached As Integer

Private Sub setVariable(argLine As String)
    
    If argLine Begins "MemTotal" Then $memoryTotal = Split(argLine, " ", "", True)[1]
    If argLine Begins "MemAvailable" Then $memoryAvailable = Split(argLine, " ", "", True)[1]
    If argLine Begins "MemFree" Then $memoryFree = Split(argLine, " ", "", True)[1]
    If argLine Begins "Buffers" Then $memoryBuffers = Split(argLine, " ", "", True)[1]
    If argLine Begins "Cached" Then $memoryCached = Split(argLine, " ", "", True)[1]
    
End

Private Sub resetVariables()
    
    Dim yukiLine As String
    Dim yukiStream As Stream 
    
    yukiStream = Open ("/proc/meminfo") For Input
    
    Do While Not Eof(yukiStream)
        Line Input #yukiStream, yukiLine
        setVariable(yukiLine)
        If $memoryTotal > 0 And If $memoryAvailable > 0 Then Break
    Loop
    
   Close #yukiStream
    
End

Private Function getMemoryRate() As Float
    
    resetVariables()
    
    If $memoryTotal > 0 And If $memoryAvailable > 0 Then
        Return ($memoryAvailable / $memoryTotal)
    Else
        Return ($memoryTotal - ($memoryFree + $memoryBuffers + $memoryCached)) / $memoryTotal
    End If
    
End

Public Sub GetStep() ' virtual
    
    Dim yukiUsage As Float = getMemoryRate()
    
    Me._$usage = yukiUsage
    Me._$history.Push(yukiUsage)
    
End
