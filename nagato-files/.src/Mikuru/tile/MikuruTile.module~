' Gambas module file

Private Const TileSize As Integer = 128
Private Const TextWidth As Integer = 112
Private Const IconSize As Integer = 64
Private Const Margin As Integer = 8

Private $selectedLabelPainter As New NagatoPainterSelectedLabel
Private $readOnlyLabelPainter As New NagatoPainterReadOnlyLabel

Private Function getTilePicture(argBaseImage As Image, argIcon As Picture, argText As String, argSelected As Boolean) As Picture
    
    Dim yukiHeight As Integer
    
    With Paint
        .Begin(argBaseImage)
        .Brush = .Color(Color.White)
        .Font.Bold = True
        yukiHeight = .Font.RichTextHeight(argText, TextWidth)
        .DrawPicture(argIcon, (TileSize - argIcon.W) / 2, Margin)
        .RichText(argText, Margin, TileSize - yukiHeight - Margin, TextWidth, yukiHeight, Align.Center)
        .Fill()
        If argSelected Then $selectedLabelPainter.Paint()
        .End()
    End With
    
    Return argBaseImage.Picture
    
End

Private Function getTilePictureReadOnly(argBaseImage As Image, argIcon As Picture, argText As String, argColor As Integer) As Picture
    
    Dim yukiHeight As Integer
    
    With Paint
        .Begin(argBaseImage)
        .Brush = .Color(Color.White)
        .Font.Bold = True
        yukiHeight = .Font.RichTextHeight(argText, TextWidth)
        .DrawPicture(argIcon, (TileSize - argIcon.W) / 2, Margin)
        .RichText(argText, Margin, TileSize - yukiHeight - Margin, TextWidth, yukiHeight, Align.Center)
        .Fill()
        $readOnlyLabelPainter.Paint(argColor)
        .End()
    End With
    
    Return argBaseImage.Picture
    
End

Private Function getSymbolizedTile(argPicture As Picture, argSymbol As String) As Picture
    
    Dim yukiImage As Image = argPicture.Image
    
    Paint.Begin(yukiImage)
        Paint.DrawImage(MikuruIcon.Get(argSymbol, 32).Image, 8, 8)
    Paint.End()
    
    Return yukiImage.Picture
    
End

Private Function getBaseImage(argSize As Integer, argBaseColor As Integer, argSelected As Boolean) As Image
    
    Dim yukiColor As Integer = (IIf(argSelected, Color.Red, argBaseColor) + 16777216 * 192)
    Dim yukiBaseImage As New Image(argSize, argSize, yukiColor) 
    
    Return yukiBaseImage
    
End

Private Function getFolderDescription(argPath As String) As String
    
    Dim yukiFolders As String = Subst$("folder:&1", Dir(argPath, "*", gb.Directory).Count)
    Dim yukiFiles As String = Subst$("file:&1", Dir(argPath, "*", gb.File).Count)
    Dim yukiText As String = File.Name(argPath) & "<br>" & yukiFolders & " " & yukiFiles
    
    Return yukiText
    
End

Private Function getTile(argTile As Picture, argPath As String) As Picture
    
    Dim yukiSymbol As String = NagatoDBSymbol.GetSymbolName(argPath)
    
    If yukiSymbol <> "" Then
        Return getSymbolizedTile(argTile, yukiSymbol)
    Else
        Return argTile
    Endif
    
End

Public Function GetApplicationTile(argPath As String, argSelected As Boolean, Optional argSize As Integer = TileSize) As Picture
    
    Dim yukiBaseImage As Image = getBaseImage(argSize, Color.Violet, argSelected)
    Dim yukiDesktopFile As New DesktopFile(argPath)
    Dim yukiIcon As Picture = MikuruIcon.GetDesktopEntryIcon(argPath, IconSize)
    
    Return getTilePicture(yukiBaseImage, yukiIcon, yukiDesktopFile.Name, argSelected)
    
End

Public Function GetDirectoryTile(argPath As String, argSelected As Boolean, Optional argSize As Integer = TileSize) As Picture
    
    Dim yukiBaseImage As Image = getBaseImage(argSize, Color.Blue, argSelected)
    Dim yukiIcon As Picture = MikuruIcon.GetDirectory(argPath, IconSize)
    Dim yukiTile As Picture 
    
    If Not Access(argPath, gb.Write) And If Not argSelected Then
        yukiTile = getTilePictureReadOnly(yukiBaseImage, yukiIcon, getFolderDescription(argPath), Color.Blue)
    Else
        yukiTile = getTilePicture(yukiBaseImage, yukiIcon, getFolderDescription(argPath), argSelected)
    Endif
    
    Return getTile(yukiTile, argPath)
    
End

Public Function GetFileTile(argPath As String, argSelected As Boolean, Optional argSize As Integer = TileSize) As Picture
    
    Dim yukiBaseImage As Image = getBaseImage(argSize, Color.Magenta, argSelected)
    Dim yukiIcon As Picture = Desktop.GetFileIcon(argPath, IconSize)
    Dim yukiTile As Picture 
    
    If Not Access(argPath, gb.Write) And If Not argSelected Then
        yukiTile = getTilePictureReadOnly(yukiBaseImage, yukiIcon, File.Name(argPath), Color.Magenta)
    Else
        yukiTile = getTilePicture(yukiBaseImage, yukiIcon, File.Name(argPath), argSelected)
    Endif
    
    Return getTile(yukiTile, argPath)
    
End
