' Gambas module file

Private Const ThumbnailSize As Integer = 128
Private Const Margin As Integer = 8

Private $icon As Image
Private $pathLabelPainter As New NagatoPainterPathLabel
Private $selectedLabelPainter As New NagatoPainterSelectedLabel
Private $readOnlyLabelPainter As New NagatoPainterReadOnlyLabel

Private Function getIcon(argPath As String) As Image
    
    Dim yukiIcon As Image
    Dim yukiRate As Float
    
    yukiIcon = Image.Load(argPath)
    yukiRate = ThumbnailSize / Min(yukiIcon.Height, yukiIcon.Width)
    
    Return yukiIcon.Stretch(yukiIcon.W * yukiRate, yukiIcon.H * yukiRate)
    
Catch
    Debug argPath
    Return Stock["huge/file"].Image
    
End

Private Sub setIcon(argPath As String) 
    
    If NagatoDBThumbnailer.HasThumbnail(argPath, ThumbnailSize) Then
        $icon = NagatoDBThumbnailer.Get(argPath, ThumbnailSize).Image
    Else
        $icon = getIcon(argPath)
        NagatoDBThumbnailer.Push(argPath, ThumbnailSize, $icon.Picture)
    End If
    
End

Public Function Get(argPath As String, argSelected As Boolean) As Picture
    
    Dim yukiBaseImage As Image = New Image(ThumbnailSize, ThumbnailSize, Color.Transparent)
    Dim yukiSymbol As String = NagatoDBSymbol.GetSymbolName(argPath)
    
    setIcon(argPath)
    
    With paint
        .Begin(yukiBaseImage)
        .DrawImage($icon, (ThumbnailSize - $icon.W) / 2, (ThumbnailSize - $icon.H) / 2)
        $pathLabelPainter.PaintLabel(argPath, argSelected)
        If argSelected Then $selectedLabelPainter.Paint()
        If Not argSelected And If Not Access(argPath, gb.Write) Then $readOnlyLabelPainter.Paint(Color.Blue)
        If yukiSymbol <> "" Then Paint.DrawImage(MikuruIcon.Get(yukiSymbol, 32).Image, 8, 8)
        .End()
    End With
    
    Return yukiBaseImage.Picture
    
End
