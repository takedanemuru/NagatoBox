' Gambas module file

Public Sub Exec(argPath As String) 
    
    Dim yukiDesktopFile As DesktopFile
    Dim yukiMimeType As String = DesktopMime.FromFile(argPath).Type
    
    If Not Exist(argPath) Then
        Return
    Else If yukiMimeType = "application/x-desktop" Then
        yukiDesktopFile = New DesktopFile(argPath)
        yukiDesktopFile.Run("")
    Else
        With MikuruApplications
            yukiDesktopFile = New DesktopFile(.GlobalApplicationDirectory & .GetDefaultDesktopFiles(argPath)[0])
        End With
        Try yukiDesktopFile.Run(argPath)
    End If
    
Catch
    Debug "I can't open..."
    Return
    
End

Public Sub TrashDirectory(argPath As String)
    
    Dim yukiMessage As String = ("YUKI.N > This directory contains some file. Are you sure to delete this directory?")
    
    If Dir(argPath).Count > 0 Then 
        If Message.Warning(yukiMessage, ("Cancel"), ("Delete")) = 1 Then Return
    End If
    
    Try Shell Subst$("trash &1", Quote$(argPath))
    
End

Public Sub TrashFile(argPath As String)
    
    Try Shell Subst$("trash &1", Quote$(argPath))
    
End

Public Function getFileSizeText(argPath As String) As String
    
    Dim yukiSize As Long = Stat(argPath).Size 
    
    If 1024 > yukiSize Then 'byte
        Return Format$(yukiSize, "##0Byte")
    Else If 1024 ^ 2 > yukiSize Then 'KiB
        Return Format$(yukiSize / 1024, "##0.00KiB")
    Else If 1024 ^ 3 > yukiSize Then 'MiB
        Return Format$(yukiSize / (1024 ^ 2), "##0.00MiB")
    Else If 1024 ^ 4 > yukiSize Then 'GiB
        Return Format$(yukiSize / (1024 ^ 3), "##0.00GiB")
    Else If 1024 ^ 5 > yukiSize Then 'TiB
        Return Format$(yukiSize / (1024 ^ 4), "##0.00TiB")
    Else
        Return "What the fuck is this ?"
    Endif
    
End

Public Function GetTimeDifferenceText(argDate As Date) As String
    
    If 1 > DateDiff(argDate, Now(), gb.Minute) Then
        Return "Just now"
    Else If 1 = DateDiff(argDate, Now(), gb.Minute) Then
        Return "a minute ago"
    Else If 1 > DateDiff(argDate, Now(), gb.Hour) Then
        Return Format$(DateDiff(argDate, Now(), gb.Minute), "### minutes ago")
    Else If 1 = DateDiff(argDate, Now(), gb.Hour) Then
        Return "an hour ago"
    Else If 1 > DateDiff(argDate, Now(), gb.Day) Then
        Return Format$(DateDiff(argDate, Now(), gb.Hour), "### hours ago")
    Else If 1 = DateDiff(argDate, Now(), gb.Day) Then
        Return "yesterday"
    Else If 1 > DateDiff(argDate, Now(), gb.Month) Then
        Return Format$(DateDiff(argDate, Now(), gb.Day), "### days ago")
    Else If 1 = DateDiff(argDate, Now(), gb.Month) Then
        Return "a month ago"
    Else If 1 > DateDiff(argDate, Now(), gb.Year) Then
        Return Format$(DateDiff(argDate, Now(), gb.Month), "### months ago")
    Else If 1 = DateDiff(argDate, Now(), gb.Year) Then
        Return "a year ago"
    Else
        Return Format$(DateDiff(argDate, Now(), gb.Year), "### years ago")
    End If
    
End

Private Function getGroupPermissionText(argPermission As String) As String
    
    Dim yukiText As String
    
    yukiText = IIf(String.InStr(argPermission, "r") = 0, "-", "r")
    yukiText &= IIf(String.InStr(argPermission, "w") = 0, "-", "w")
    yukiText &= IIf(String.InStr(argPermission, "x") = 0, "-", "x")
    
    Return yukiText
    
End

Public Function GetPermissionText(argPath As String) As String
    
    Dim yukiText As String = IIf(IsDir(argPath), "d", "-")
    
    yukiText &= getGroupPermissionText(Stat(argPath).Perm.User)
    yukiText &= getGroupPermissionText(Stat(argPath).Perm.Group)
    yukiText &= getGroupPermissionText(Stat(argPath).Perm.Other)
    
    Return yukiText
    
End
