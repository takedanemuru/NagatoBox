' Gambas class file

Inherits NagatoIconViewHandler

Public Function getPattern() As String
    
    Return IIf(NagatoSettings.ShowHidden, "*", "[^.]*")
    
End

Private Sub setIcon(argDirectory As String, argSelection As String[], argType As Integer)
    
    Dim yukiPath As String

    For Each yukiPath In MikuruSort(argDirectory, argType)
        If Not Access(yukiPath, gb.Read) Then Continue
        Me._$iconView.Add(yukiPath, "", MikuruTiles.Get(yukiPath, argSelection.Exist(yukiPath)))
    Next
    
End

Private Sub ensureVisible(argPath As String)
    
    If Me._$iconView.Exist(argPath) Then Me._$iconView[argPath].EnsureVisible()
    
End

Private Sub refreshIconView(argDirectory As String, argSelection As String[], argLastSelected As String)
    
    Me._$iconView.Clear()
    setIcon(argDirectory, argSelection, gb.Directory)
    setIcon(argDirectory, argSelection, gb.File)
    NagatoDBThumbnailer.CleanUp(argDirectory)
    ensureVisible(argLastSelected)
    
End

Private Sub setIcons(argPaths As String[], argSelection As String[], argOnlyDirectory As Boolean)
    
    Dim yukiPath As String
    
    For Each yukiPath In argPaths.Sort(gb.IgnoreCase + gb.Natural)
        If IsDir(yukiPath) = argOnlyDirectory Then 
            Me._$iconView.Add(yukiPath, "", MikuruTiles.Get(yukiPath, argSelection.Exist(yukiPath)))
        End If
    Next
    
End

Public Sub ResetIcon(argPath As String, argSelected As Boolean)
    
    Me._$iconView[argPath].Picture = MikuruTiles.Get(argPath, argSelected)
    
End

Public Sub Refresh(argDirectory As String, argSelection As String[], argLastSelected As String)
    
    refreshIconView(argDirectory, argSelection, argLastSelected)
    
End

Public Sub RefreshWithSearchResult(argPaths As String[], argSelection As String[])
    
    Me._$iconView.Clear()
    
    setIcons(argPaths, argSelection, True)
    setIcons(argPaths, argSelection, False)
    
End
