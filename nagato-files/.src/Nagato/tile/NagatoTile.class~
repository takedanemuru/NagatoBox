' Gambas class file

Create Private

Property Read BaseColor As Integer

Public Const TileSize As Integer = 128
Public Const TextWidth As Integer = 112
Public Const IconSize As Integer = 64
Public Const Margin As Integer = 8

Public _$baseColor As Integer = Color.White

Private $symbolSetter As New NagatoSymbolSetter

Private Sub paintIcon(argIcon As Picture)
    
    If Object.IsValid(argIcon)
        Paint.DrawPicture(argIcon, (Me.TileSize - argIcon.W) / 2, Me.Margin + (64 - argIcon.H) / 2)
    Else
        Paint.DrawPicture(MikuruIcon.Get("question", 36), (Me.TileSize - 36) / 2, Me.Margin + (64 - 36) / 2)
    End If
    
End

Public Function _GetBaseImage(argSelected As Boolean) As Image
    
    Dim yukiColor As Integer = (IIf(argSelected, Color.Red, Me.BaseColor) + 16777216 * 192)
    Dim yukiBaseImage As New Image(Me.TileSize, Me.TileSize, yukiColor) 
    
    Return yukiBaseImage
    
End

Public Function _GetTile2(argBaseImage As Image, argIcon As Picture, argText As String, argMode As Integer) As Picture
    
    Dim yukiHeight As Integer
    
    With Paint
        .Begin(argBaseImage)
        .Brush = .Color(Color.White)
        .Font.Bold = True
        yukiHeight = .Font.RichTextHeight(argText, Me.TextWidth)
        NagatoLabelPainterFacade.Paint(argMode)
        .RichText(argText, Me.Margin, Me.TileSize - yukiHeight - Me.Margin, Me.TextWidth, yukiHeight, Align.Center)
        .Fill()
        paintHeaderLabel(argMode)
        .End()
    End With
    
    Return argBaseImage.Picture
    
End

Public Sub _SetSymbol(argTile As Picture, argPath As String) As Picture
    
    Return $symbolSetter(argTile, argPath)
    
End

Public Sub _call(argPath As String, argSelected As Boolean) As Picture
    
    ' virtual, MUST be overridden
    
End

Private Function BaseColor_Read() As Integer

    Return Me._$baseColor

End
