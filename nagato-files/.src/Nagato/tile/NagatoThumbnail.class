' Gambas class file

Create Static

Public _$icon As Image
Private $pathLabelPainter As New NagatoDescriptionPainterPath

Private Function getIcon(argPath As String) As Image
    
    Dim yukiIcon As Image = Me._GetIconImage(argPath)
    Dim yukiRate As Float = MikuruUxTile.TileSize / Min(yukiIcon.Height, yukiIcon.Width)
    
    Return yukiIcon.Stretch(yukiIcon.W * yukiRate, yukiIcon.H * yukiRate)
    
End

Private Sub setIcon(argPath As String) 
    
    If NagatoDBThumbnailer.HasThumbnail(argPath, MikuruUxTile.TileSize) Then
        Me._$icon = NagatoDBThumbnailer.Get(argPath, MikuruUxTile.TileSize).Image
    Else
        Me._$icon = getIcon(argPath)
        NagatoDBThumbnailer.Push(argPath, MikuruUxTile.TileSize, Me._$icon.Picture)
    End If
    
End

Private Sub drawThumbnail(argPath As String)
    
    setIcon(argPath)
    Paint.DrawImage(Me._$icon, (MikuruUxTile.TileSize - Me._$icon.W) / 2, (MikuruUxTile.TileSize - Me._$icon.H) / 2)    
    
End

Public Function _GetIconImage(argPath As String) As Image 'virtual interface
    
    
    
End

Public Function _GetLabelColor() As Integer 'virtual interface
    
    Return Color.Blue
    
End

Public Function Get(argPath As String) As Picture
    
    Dim yukiBaseImage As Image = MikuruTileBaseImage[Color.Transparent]
    
    Paint.Begin(yukiBaseImage)
        drawThumbnail(argPath)
        $pathLabelPainter.BackgroundColor = MikuruColor.Transparent(Me._GetLabelColor(), 128)
        $pathLabelPainter.Paint(argPath)
    Paint.End()
    
    Return yukiBaseImage.Picture
    
End

