' Gambas class file

Create Static

Property Read PathsCut As String[]
Property Read PathCopy As String[]

Private $timer As New Timer As "Timer"
Private $textUri As String
Private $nagatoSelectionCut As String

Event Changed

' Private Function getDirectories(argPaths As String[]) As String[]
'     
'     Dim yukiDirectories As New String[]
'     Dim yukiPath As String
'     
'     For Each yukiPath In argPaths
'         If Exist(yukiPath) Then yukiDirectories.Add(File.Dir(yukiPath))
'     Next
'     
'     Return yukiDirectories
'     
' End

Public Sub Activate()
    
    $timer.Enabled = True
    
End

Public Function HasPaths(argDirectory As String) As Boolean
    
    Dim yukiPath As String
    
    For Each yukiPath In $textUri
        If File.Dir(yukiPath) = argDirectory Then Return True
    Next
    
    For Each yukiPath In $nagatoSelectionCut
        If File.Dir(yukiPath) = argDirectory Then Return True
    Next
    
    Return False
    
End

Public Sub Timer_Timer()
    
    Dim yukiFlag As Boolean = False
    
    If $textUri <> Clipboard.Paste("text/uri-list") Then
        $textUri = Clipboard.Paste("text/uri-list")
        yukiFlag = True
    Endif
    
    If $nagatoSelectionCut <> Clipboard.Paste("text/nagato-selection-cut") Then
        $nagatoSelectionCut = Clipboard.Paste("text/nagato-selection-cut")
        yukiFlag = True
    Endif
    
    If yukiFlag Then Raise Changed
    
End

Private Function PathsCut_Read() As String[]

    Dim yukiPaths As String[] = NagatoDrag2.GetPaths($nagatoSelectionCut)

    Return IIf(yukiPaths.Count = 0, [""], yukiPaths)

End

Private Function PathCopy_Read() As String[]

    Dim yukiPaths As String[] = NagatoDrag2.GetPaths($textUri)

    Return IIf(yukiPaths.Count = 0, [""], yukiPaths)

End
