' Gambas class file

Inherits NagatoPainter

Private Function getPropertyText(argTemplate As String) As String
    
    Dim yukiStat As Stat = Stat(Me._$currentPath)
    Dim yukiSize As String = MikuruFile.GetFileSizeText(Me._$currentPath)
    Dim yukiPermission As String = MikuruFilePermission.GetText(Me._$currentPath)
    Dim yukiLastAccess As String = MikuruFile.GetTimeDifferenceText(yukiStat.LastAccess)
    Dim yukiLastModefy As String = MikuruFile.GetTimeDifferenceText(yukiStat.LastModified)
    Dim yukiLastChange As String = MikuruFile.GetTimeDifferenceText(yukiStat.LastChange)
    
    Return Subst$(argTemplate, yukiSize, yukiPermission, yukiLastAccess, yukiLastModefy, yukiLastChange)
    
Catch
    Return ""
    
End

Private Function drawProperties(argTopOffset As Integer) As Integer
    
    Dim yukiTemplate As String = "Size:<br>Permission:<br>Access:<br>Modefy:<br>Change:<br>"
    Dim yukiPropertiesTemplate As String = "&1<br>&2<br>&3<br>&4<br>&5<br>"
    Dim yukiProperties As String = getPropertyText(yukiPropertiesTemplate)
    
    Return Me._DrawProperties(argTopOffset, yukiTemplate, yukiProperties)
    
End

Private Function drawImageProperties(argTopOffset As Integer) As Integer
    
    Dim yukiImage As Image = Image.Load(Me._$currentPath)
    Dim yukiTemplate As String = "<br>Height:<br>Width:"
    Dim yukiProperties As String = Subst$("<br>&1<br>&2", yukiImage.H, yukiImage.W)
    
    Return Me._DrawProperties(argTopOffset, yukiTemplate, yukiProperties)
    
End

Private Function getCollapsedText(argTitle As String, argProperty As String) As String
    
    Dim yukiTitleLength As Integer = Me._$drawingArea.Font.RichTextWidth(argTitle)
    Dim yukiLength As Integer = Me._$drawingArea.W - Me.MarginDouble - yukiTitleLength
    
    Return MikuruCollapsedText.Get(argProperty, Me._$drawingArea.Font, yukiLength)
    
End

Private Sub getId3Tags() As String
    
    Dim yukiId3TagTemplate As String = "<br>&1<br>&2<br>&3<br>"
    Dim yukiTitle As String = MikuruId3TagInfo.GetTitle(Me._$currentPath)
    Dim yukiArtist As String = MikuruId3TagInfo.GetArtist(Me._$currentPath)
    Dim yukiAlbum As String = MikuruId3TagInfo.GetAlbum(Me._$currentPath)
    Dim yukiId3Tag As String
    
    yukiTitle = getCollapsedText("Title: ", yukiTitle)
    yukiArtist = getCollapsedText("Artist: ", yukiArtist)
    yukiAlbum = getCollapsedText("Album: ", yukiAlbum)
    yukiId3Tag = Subst$(yukiId3TagTemplate, yukiTitle, yukiArtist, yukiAlbum)
    
    Return yukiId3Tag
    
End

Private Function drawId3Tags(argTopOffset As Integer) As Integer
    
    Dim yukiTemplate As String = "<br>Title:<br>Artist:<br>Album:<br>"
    Dim yukiId3Tags As String = getId3Tags()
    
    Return Me._DrawProperties(argTopOffset, yukiTemplate, yukiId3Tags)
    
End

Private Function drawPageCount(argTopOffset As Integer, argPath As String) As Integer
    
    Dim yukiTemplate As String = "<br>Page:<br>"
    Dim yukiDocument As New PdfDocument(argPath)
    
    Return Me._DrawProperties(argTopOffset, yukiTemplate, yukiDocument.Count)
    
End

Private Function drawTrashProperty(argTopOffset As Integer) As Integer
    
    Dim yukiTemplate As String = "<br><u>Path To Restore:</u><br><br>&1<br>"
    Dim yukiText As String = Subst$(yukiTemplate, NagatoTrash.GetPreviousPath(Me._$currentPath))
    Dim yukiRect As Rect = Me._GetRect(argTopOffset, yukiText)
    
    Me._DrawRichText(yukiText, yukiRect, Align.Center)
    
    Return yukiRect.Y + yukiRect.H
    
End

Public Sub Paint(argY As Integer, argPath As String, argIsTrash As Boolean)
    
    Dim yukiMimeType As String = DesktopMime.FromFile(argPath).Type
    Dim yukiTopOffset As Integer
    
    Me._$currentPath = argPath
    
    yukiTopOffset = drawProperties(argY)
    
    If yukiMimeType Begins "image" Then yukiTopOffset = drawImageProperties(yukiTopOffset)
    If yukiMimeType Begins "audio" Then yukiTopOffset = drawId3Tags(yukiTopOffset)
    If yukiMimeType = "application/pdf" Then drawPageCount(yukiTopOffset, argPath)
    If argIsTrash Then drawTrashProperty(yukiTopOffset)
    
End
