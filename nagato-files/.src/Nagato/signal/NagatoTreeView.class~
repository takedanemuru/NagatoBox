' Gambas class file

Inherits NagatoLeftPaneContent

Private $treeView As TreeView

Private Function getFileIcon(argPath As String) As Picture
    
    Dim yukiMimeType As String = DesktopMime.FromFile(argPath).Type
    
    If yukiMimeType Begins "image" Then
        Return MikuruIcon.Get("image", 16)
    Else If yukiMimeType Begins "audio" Then
        Return MikuruIcon.Get("music", 16)
    Else If yukiMimeType Begins "video" Then
        Return MikuruIcon.Get("video", 16)
    Else 
        Return MikuruIcon.Get("document", 16)
    Endif
    
End

Private Sub setFile(argDirectory As String)
    
    Dim yukiPath As String
    
    For Each yukiPath In MikuruPath.GetChildrenFile(argDirectory, NagatoSettings.ShowHidden)
        $treeView.Add(argDirectory &/ yukiPath, yukiPath, getFileIcon(argDirectory &/ yukiPath), argDirectory)
    Next
    
End

Private Sub setDummyDirectory(argDirectory As String, argParent As String)
    
    $treeView.Add(argDirectory, File.Name(argDirectory), MikuruIcon.Get("folder", 24), argParent)
    
    If Dir(argDirectory, "*").Count > 0 Then
        $treeView.Add(argDirectory & "dummy", "dummy",, argDirectory)
    Endif
    
End

Private Sub setHomeDirectory(argDirectory As String)
    
    Dim yukiDirectoryName As String = File.Name(argDirectory)
    
    If Not $treeView.Exist(argDirectory) Then
        $treeView.Add(argDirectory, yukiDirectoryName, MikuruIcon.Get("home", 24))
    Endif
    
End

Private Sub setSubDirectory(argDirectory As String)
    
    Dim yukiPath As String
    
    For Each yukiPath In MikuruPath.GetChildrenDirectory(argDirectory, NagatoSettings.ShowHidden)
        setDummyDirectory(argDirectory &/ yukiPath, argDirectory)
    Next
    
End

Private Sub setDirectory(argDirectory As String)
    
    setHomeDirectory(argDirectory)
    setSubDirectory(argDirectory)
    setFile(argDirectory)
    
End

Private Sub expandHomeDirectory()
    
    Object.Lock($treeView)
        $treeView[User.Home].Expanded = True
    Object.Unlock($treeView)
    
End

Private Sub initializeTreeView(argContainer As Container)
    
    $treeView = New TreeView(argContainer) As "TreeView"
    
    With $treeView
        .Expand = True
        .Background = Color.Lighter(Color.Lighter(Color.Violet))
        .Foreground = Color.White
        .Visible = False
        .Drop = True
        .Mode = Select.Single
    End With
    
    setDirectory(User.Home)
    expandHomeDirectory()
    
End

Private Sub moveFiles()
    
    Dim yukiPath As String
    
    For Each yukiPath In NagatoDrag2.GetPaths(Drag.Data)
        If Exist(yukiPath) Then 
            Try Move yukiPath To MikuruPath.GetSafePathName($treeView.Item.Key &/ File.Name(yukiPath))
        Endif
    Next
    
End

Private Sub moveDroppedFiles()
    
    If Not Exist($treeView.Item.Key) Then
        $treeView.Remove($treeView.Item.Key)
    Else
        moveFiles()
    End If
    
End

Public Sub Refresh()
    
    $treeView.Clear()
    setDirectory(User.Home)
    expandHomeDirectory()
    
End

Public Sub _new(argContainer As Container)
    
    initializeTreeView(argContainer)
    Me._$mainContent = $treeView
    
End

Public Sub TreeView_Activate()
    
    If IsDir($treeView.Key) Then
        HaruhiMain.SetNewDirectory($treeView.Key)
    End If
    
End

Public Sub TreeView_Expand()
    
    If $treeView.Exist($treeView.Key & "dummy") Then 
        $treeView[$treeView.Key & "dummy"].Delete()
        setDirectory($treeView.Key)
    End If
    
End

Public Sub TreeView_DragMove()
    
    If Not $treeView.FindAt(Drag.X, Drag.Y) Then
        $treeView[$treeView.Item.Key].Selected = True
    Else
        $treeView.UnselectAll()
    End If
    
End

Public Sub TreeView_Drop()
    
    If Drag.Format = "text/uri-list" Then moveDroppedFiles()
    
End
