' Gambas class file

Inherits NagatoObject

Private $selection As New NagatoSelection
Private $iconView As NagatoIconViewInitializerTrashBin
Private $lastSelected As String

Event Selected(argCount As Integer)

Private Sub setIcons(argType As Integer, Optional argQuery As String)
    
    Dim yukiPath As String
    Dim yukiFullPath As String
    
    For Each yukiPath In Dir(MikuruTrashPath.Files, "*", argType).Sort(gb.IgnoreCase)
        yukiFullPath = MikuruTrashPath.Files &/ yukiPath
        If Not Exist(yukiFullPath) Then Continue
        If argQuery And If (yukiPath Not Like "*" & argQuery & "*") Then Continue
        $iconView.IconView.Add(yukiFullPath, "", MikuruTile(yukiFullPath, $selection.Exist(yukiFullPath)))
    Next
    
End

Private Sub ensureVisible(argPath As String)
    
    If Not $iconView.IconView.Exist(argPath) Then Return
    
    $iconView.IconView[argPath].EnsureVisible()
    
End

Public Sub Refresh(Optional argLastSelected As String)
    
    $iconView.IconView.Clear()
    
    setIcons(gb.Directory)
    setIcons(gb.File)
    NagatoDBThumbnailer.CleanUp(MikuruTrashPath.Files)
    
    If argLastSelected Then ensureVisible(argLastSelected)
    
    If $iconView.IconView.Count = 0 Then $iconView.IconView.Add("NOTFOUND", "", MikuruTile.GetNotFoundTile())
    
End

Public Sub Delete()
    
    If $selection.Count = 0 Then Return
    
    NagatoTrash.DeleteFromTrashBin($selection.Paths)
    
End

Public Sub Restore()
    
    If $selection.Count = 0 Then Return
    
    NagatoTrash.Restore($selection.Paths)
    
End

Public Sub UnselectAll()
    
    $selection.ClearAll()
    Me.Refresh()
    
End

Public Sub Ensure()
    
    If $iconView.IconView.Exist($lastSelected) Then $iconView.IconView[$lastSelected].EnsureVisible()
    
End

Public Sub Filter(argQuery As String)
    
    $iconView.IconView.Clear()
    setIcons(gb.Directory, argQuery)
    setIcons(gb.File, argQuery)
    If $iconView.IconView.Count = 0 Then $iconView.IconView.Add("NOTFOUND", "", MikuruTile.GetNotFoundTile())

End

Public Sub _new(argTabStrip As TabStrip)
    
    $iconView = New NagatoIconViewInitializerTrashBin(argTabStrip) As "TrashBinIconView"
    Me.Refresh()
    
End

Public Sub TrashBinIconView_MouseDown(argLastKey As String)
    
    Dim yukiLastKey As String = argLastKey
    
    If $iconView.IconView.FindAt(Mouse.X, Mouse.Y) Then ' NOTE: Returns True when NOT found.
        Try $iconView.IconView.Current.Selected = False
        $lastSelected = ""
    Else
        $lastSelected = yukiLastKey
        $selection.Toggle(yukiLastKey)
        $iconView.IconView[yukiLastKey].Picture = MikuruTile(yukiLastKey, $selection.Exist(yukiLastKey))
        TFEI.SetTrashProperty(yukiLastKey)
        Raise Selected($selection.Count)
    End If
    
End
