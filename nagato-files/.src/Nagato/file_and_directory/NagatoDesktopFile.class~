' Gambas class file

Property Read ProgramName As String
Property Read Name As String
Property Read CommonName As String
Property Read GenericName As String
Property Read Comment As String
Property Read LocaleName As String
Property Read LocaleGenericName As String
Property Read LocaleComment As String
Property Read Icon As Picture
Property Read Path As String
Property Read NotShowIn As String[]
Property Read OnlyShowIn As String
Property Read ShowIn As Boolean
Property Read IsSettingsApplication As Boolean

Private $locale As String
Private $language As String
Private $name As String = ""
Private $genericName As String = ""
Private $comment As String = ""
Private $localGenericName As String = ""
Private $localeComment As String = ""
Private $languageGenericName As String = ""
Private $languageComment As String = ""
Private $desktopFile As DesktopFile
Private $categories As String[]
Private $notShowIn As String[]
Private $onlyShowIn As String = ""

Static Public Sub Execute(argPath As String)
    
    Dim yukiDesktopFile As New DesktopFile(argPath)
    Dim yukiCommandArray As String[] = Split(yukiDesktopFile.Exec, " ", "")
    
    Try Shell yukiCommandArray[0]
    
End

Static Public Sub ExecuteAsSuperUser(argPath As String)
    
    Dim yukiDesktopFile As New DesktopFile(argPath)
    Dim yukiCommandArray As String[] = Split(yukiDesktopFile.Exec, " ", "")
    
    Try Shell Subst$("gksu &1", yukiCommandArray[0])
    
End

Private Function getDesktopType() As String
    
    If Desktop.Type = "KDE4" Then
        Return "KDE"
    Else
        Return Desktop.Type
    Endif
    
End

Private Sub setNotShowIn(argData As String)
    
    argData = Replace(argData, "NotShowIn=", "")
    $notShowIn = Split(argData, ";", "", True, False)
    
End

Private Sub setProperty(argLine As String)
    
    If argLine Begins "Categories=" Then
        $categories = Split(Replace(argLine, "Categories=", ""), ";", "", True, False)
    Else If argLine Begins "Name=" Then
        $name = Replace$(argLine, "Name=", "")
    Else If argLine Begins "GenericName=" Then
        $genericName = Replace$(argLine, "GenericName=", "")
    Else If argLine Begins "Comment=" Then
        $comment = Replace$(argLine, "Comment=", "")
    Else If argLine Begins Subst$("GenericName[&1]=", $locale) Then
        $localGenericName = Replace$(argLine, Subst$("GenericName[&1]=", $locale), "")
    Else If argLine Begins Subst$("Comment[&1]=", $locale) Then
        $localeComment = Replace$(argLine, Subst$("Comment[&1]=", $locale), "")
    Else If argLine Begins Subst$("GenericName[&1]=", $language) Then
        $languageGenericName = Replace$(argLine, Subst$("GenericName[&1]=", $language), "")
    Else If argLine Begins Subst$("Comment[&1]=", $language) Then
        $localeComment = Replace$(argLine, Subst$("Comment[&1]=", $language), "")
    Else If argLine Begins "NotShowIn=" Then
        setNotShowIn(argLine)
    Else If argLine Begins "OnlyShowIn=" Then
        $onlyShowIn = Replace$(argLine, "OnlyShowIn=", "")
    End If
    
End

Private Sub setPropertyFromDesktopFile(argPath As String)
    
    Dim yukiFlag As Boolean = False
    Dim yukiLine As String
    Dim yukiStream As Stream 
    
    yukiStream = Open argPath For Input
    
    Do While Not Eof(yukiStream)
        Line Input #yukiStream, yukiLine
        If yukiLine = "[Desktop Entry]" Then
            yukiFlag = True
            Continue
        Else If Not yukiFlag Then
            Continue
        Else If yukiLine Begins "[" Then
            Break
        Else
            setProperty(yukiLine)
        Endif 
    Loop
    
   Close #yukiStream
    
End

Public Sub _new(argPath As String)
    
    $locale = Replace$(System.Language, "." & System.Charset, "")
    $language = Left$($locale, 2)
    
    $desktopFile = New DesktopFile(argPath)
    setPropertyFromDesktopFile(argPath)
    
End

Public Function HasCategory(argCategory As String) As Boolean
    
    If $categories.Exist(argCategory, gb.IgnoreCase) Then
        Return True
    Else
        Return False
    Endif
    
Catch
    Return False
    
End

Public Function GetIcon(argSize As Integer) As Picture
    
    Dim yukiImage As Image
    
    If $desktopFile.Icon Begins "/" And If File.Ext($desktopFile.Icon) <> "svg" Then
        yukiImage = Image.Load($desktopFile.Icon)
        yukiImage.Stretch(argSize, argSize)
        Return yukiImage.Picture
    Else If $desktopFile.Icon Begins "/" And If File.Ext($desktopFile.Icon) = "svg" 
        Return Image.Load($desktopFile.Icon).Stretch(argSize, argSize).Picture
    Else
        Return $desktopFile.GetIcon(argSize).Picture
    Endif
    
End

Private Function Name_Read() As String

    Return $desktopFile.Name
    
Catch
    Return ""

End

Private Function Icon_Read() As Picture

    Return $desktopFile.Icon
    
Catch
    Return Null

End

Private Function Path_Read() As String

    Return $desktopFile.Path
    
Catch
    Return ""

End


Private Function NotShowIn_Read() As String[]

    If Not Object.IsValid($notShowIn) Then
        Return [""]
    Else
        Return $notShowIn
    Endif

End

Private Function OnlyShowIn_Read() As String

    Return $onlyShowIn

End

Private Function ShowIn_Read() As Boolean

    If Me.NotShowIn.Exist(getDesktopType(), gb.IgnoreCase) Then Return False
    
    If $onlyShowIn <> "" Then
        If InStr($onlyShowIn, getDesktopType(), gb.IgnoreCase) = 0 Then Return False
    End If

    Return True

End

Private Function GenericName_Read() As String

    If $genericName <> "" Then
        Return $genericName
    Else 
        Return $desktopFile.Name
    Endif
    
Catch
    Return ""

End

Private Function Comment_Read() As String

    Return $comment

End

Private Function ProgramName_Read() As String

    Return $desktopFile.ProgramName
    
Catch
    Return ""

End

Private Function CommonName_Read() As String

    Return $name

Catch 
    Return ""

End

Private Function LocaleName_Read() As String

    Return $desktopFile.Name

End

Private Function LocaleGenericName_Read() As String

    If $localGenericName <> "" Then
        Return $localGenericName
    Else If $languageGenericName <> "" Then
        Return $languageGenericName
    Else
        Return ""
    Endif

End

Private Function LocaleComment_Read() As String

    If $localeComment <> "" Then
        Return $localeComment
    Else If $languageComment <> "" Then
        Return $languageComment
    Else
        Return ""
    Endif

End

Private Function IsSettingsApplication_Read() As Boolean

    Return $categories.Exist("Settings")

Catch
    Return False

End
