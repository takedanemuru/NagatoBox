' Gambas class file

Inherits NagatoDesktopHandler

Property Read SelectedPaths As String[]

Private $iconView As IconView
Private $observer As Observer
Private $selection As NagatoSelection

Event RequestRefresh

Private Sub dropFile(argPath As String)
    
    Select Case MikuruDrop.GetType($iconView)
        Case MikuruDrop.TypeVoid ' Move to current directory
            If $iconView.Exist(argPath) Then Return
            Try Move argPath To MikuruPath.GetSafePathName(Desktop.Path &/ File.Name(argPath))
        Case MikuruDrop.TypeFile, MikuruDrop.TypeClock, MikuruDrop.TypeTrashBin
            Debug "Ignore"
        Case MikuruDrop.TypeDirectory
            Try Move argPath To MikuruPath.GetSafePathName($iconView.Item.Key &/ File.Name(argPath))
        Case MikuruDrop.TypeApplication
            Debug "Try execute app with: " & argPath
            MikuruDesktopEntry.ExecuteWithFile($iconView.Item.Key, argPath)
    End Select
    
End

Public Sub ClearAll()
    
    $selection.ClearAll()
    
End

Public Sub Delete(argPath As String)
    
    $selection.RemovePath(argPath)
    
End

Public Sub _new(argIconView As IconView)
    
    $iconView = argIconView
    $selection = New NagatoSelection
    $observer = New Observer($iconView) As "Asakura"
    
End

Public Sub Asakura_DragMove()
    
    Dim yukiScrollArea As ScrollArea = $iconView.Children[0]
    
    $iconView.UnselectAll()
    
    If Not $iconView.FindAt(Drag.X + yukiScrollArea.ScrollX, Drag.Y) 
        If IsDir($iconView.Item.Key) Then
            $iconView.Item.Selected = True
        End If
    End If
    
End

Public Sub Asakura_MouseDrag()
    
    If $selection.Count = 0 Then Return
    
    Drag.Icon = $iconView.Current.Picture
    $iconView.Drag(NagatoDrag2.GetUriList($selection.Paths), MikuruMimeType.UriList)
    
End

Public Sub Asakura_Drop()
    
    Dim yukiPath As String
    
    If Drag.Format <> MikuruMimeType.UriList Then Return 
    
    If $iconView.Item.Key = NagatoDesktop.SpecialKeyTrashBin Then
        NagatoTrash.Delete(NagatoDrag2.GetPaths(Drag.Data))
        Return
    Endif
    
Finally
    
    For Each yukiPath In NagatoDrag2.GetPaths(Drag.Data)
        'xdg-user-dirs will be ignored. 
        If NagatoXdg.IsUserDir(yukiPath) Then Continue
        dropFile(yukiPath)
    Next
    
End

Public Sub Asakura_MouseDown()
    
     If $iconView.Key = "" Then Return
    
    If $iconView.FindAt(Mouse.ScreenX, Mouse.ScreenY) Then
        $iconView.Current.Selected = False
    Else
        With $iconView
            If .Key = NagatoDesktop.SpecialKeyClock Then Return
            If .Key = NagatoDesktop.SpecialKeyTrashBin Then Return
            $selection.Push(.Key, Mouse.Left)
            .[.Key].Picture = MikuruTile(.Key, $selection.Paths.Exist(.Key))
        End With
    End If
    
End

Public Sub Asakura_Menu()
    
    Dim yukiPath As String = $iconView.Key
    Dim yukiContextMenu As Object
    
    If yukiPath = "NOTFOUND" Then 
        Return
    Else If yukiPath = NagatoDesktop.SpecialKeyClock Then
        yukiContextMenu = New NagatoContextMenuDesktopClock(HaruhiDesktop, "")
        yukiContextMenu.Popup()
    Else If yukiPath = NagatoDesktop.SpecialKeyTrashBin Then
        Return
    Else If $iconView.FindAt(Mouse.ScreenX, Mouse.ScreenY) Then
        Debug "IconViewContextMenu"
    Else If yukiPath = "" Or If $selection.Count = 0 Then
        Debug "IconViewContextMenu"
    Else 
        yukiContextMenu = New NagatoIconviewContextMenu2(HaruhiDesktop, yukiPath) As "Menu"
        yukiContextMenu.Popup()
    End If
    
End

Public Sub Asakura_Activate()
    
    Dim yukiPath As String = $iconView.Key
    
    If Not Exist(yukiPath) Then 
        Return
    Else If $iconView.FindAt(Mouse.ScreenX, Mouse.ScreenY) Then
        $iconView.Current.Selected = False
        Return
    Else If IsDir(yukiPath) Then
        Try Shell Subst$("nagato-files &1", Quote$(yukiPath))
    Else If MikuruMimeType.IsDesktopEntry(yukiPath) Then
        MikuruDesktopEntry.Execute(yukiPath)
    Else If yukiPath = NagatoDesktop.SpecialKeyClock Then
        ' ignore
    Else ' for files
        MikuruFile.Exec(yukiPath)
    End If
    
End

Public Sub Menu_MenuEventWithArg(argEvent As Integer, argValue As Variant)
    
    With NagatoMenuPipe
        Select Case argEvent
            Case .FileDelete
                NagatoTrash.Delete($selection.Paths)
            Case .FileCopyTo
                If Not argValue Then
                    MikuruFileManuever.CopyTo($selection.Paths)
                Else
                    MikuruFileManuever.CopyToDirectory($selection.Paths, argValue)
                End If
            Case .FileMoveTo
                If Not argValue Then
                    MikuruFileManuever.MoveTo($selection.Paths)
                Else
                    MikuruFileManuever.MoveToDirectory($selection.Paths, argValue)
                End If
            Case .TagAdd
                NagatoFilerDialogs.Tagging($selection.Paths) 
                Raise RequestRefresh
            Case .TagRemove
                NagatoDBSymbol.RemovePaths($selection.Paths)
                Raise RequestRefresh
        End Select
    End With
    
End

Private Function SelectedPaths_Read() As String[]

    Return $selection.Paths

End
