' Gambas class file

Inherits NagatoDesktopHandler

Property Read SelectedPaths As String[]

Private $iconView As IconView
Private $observer As Observer
Private $selection As NagatoSelection
Private $contextMenu As New NagatoContextMenuDesktop As "TFEI"

Event RequestRefresh

Public Sub ClearAll()
    
    $selection.ClearAll()
    
End

Public Sub Delete(argPath As String)
    
    $selection.RemovePath(argPath)
    
End

Public Sub _new(argIconView As IconView)
    
    $iconView = argIconView
    $selection = New NagatoSelection
    $observer = New Observer($iconView) As "Asakura"
    
End

Public Sub Asakura_DragMove()
    
    Dim yukiScrollArea As ScrollArea = $iconView.Children[0]
    
    $iconView.UnselectAll()
    
    If Not $iconView.FindAt(Drag.X + yukiScrollArea.ScrollX, Drag.Y) 
        If IsDir($iconView.Item.Key) Then $iconView.Item.Selected = True
    End If
    
End

Public Sub Asakura_MouseDrag()
    
    If $selection.Count = 0 Then Return
    
    Drag.Icon = $iconView.Current.Picture
    $iconView.Drag(NagatoDrag2.GetUriList($selection.Paths), MikuruMimeType.UriList)
    
End

Public Sub Asakura_MouseDown()
    
     If $iconView.Key = "" Then
        Return
    Else If $iconView.FindAt(Mouse.ScreenX, Mouse.ScreenY) Then
        $iconView.Current.Selected = False
    Else If Not NagatoDesktop.IsSpecialKey($iconView.Key) Then
        $selection.Push($iconView.Key, Mouse.Left)
        $iconView[$iconView.Key].Picture = MikuruTile($iconView.Key, $selection.Paths.Exist($iconView.Key))
    End If
    
End

Public Sub Asakura_Menu()
    
    Dim yukiRoot As Boolean = $iconView.FindAt(Mouse.ScreenX, Mouse.ScreenY) 

    $contextMenu.PopUp($iconView.Key, yukiRoot, $selection.Count)
    
End

Public Sub TFEI_Signal(argEvent As Integer, argValues As Variant[])
    
    Select Case argEvent
        Case NagatoObject.ViewReload
            Raise RequestRefresh
        Case NagatoObject.CreateArchive
            Shell "nagato-archiver " & $selection.Paths.Join(" ")
        Case NagatoObject.FileDelete
            NagatoTrash.Delete($selection.Paths)
        Case NagatoObject.FileCopyTo
            MikuruFileManuever.CopyTo($selection.Paths, argValues[0])
        Case NagatoObject.FileMoveTo
            MikuruFileManuever.MoveTo($selection.Paths, argValues[0])
        Case NagatoObject.TagAdd
            NagatoFilerDialogs.Tagging($selection.Paths) 
            Raise RequestRefresh
        Case NagatoObject.TagRemove
            NagatoDBSymbol.RemovePaths($selection.Paths)
            Raise RequestRefresh
        Case NagatoObject.ViewChangeThumbnail
            HaruhiThumbnailSelector.SetThumbnails(argValues[0])
            Raise RequestRefresh
    End Select
    
End

Private Function SelectedPaths_Read() As String[]

    Return $selection.Paths

End
