' Gambas class file

Inherits NagatoDesktopHandler

Property Read SelectedPaths As String[]

Private $iconView As IconView
Private $observer As Observer
Private $selection As NagatoSelection
Private $contextMenu As New NagatoContextMenuDesktop As "Menu"

Event RequestRefresh

Public Sub ClearAll()
    
    $selection.ClearAll()
    
End

Public Sub Delete(argPath As String)
    
    $selection.RemovePath(argPath)
    
End

Public Sub _new(argIconView As IconView)
    
    $iconView = argIconView
    $selection = New NagatoSelection
    $observer = New Observer($iconView) As "Asakura"
    
End

Public Sub Asakura_DragMove()
    
    Dim yukiScrollArea As ScrollArea = $iconView.Children[0]
    
    $iconView.UnselectAll()
    
    If Not $iconView.FindAt(Drag.X + yukiScrollArea.ScrollX, Drag.Y) 
        If IsDir($iconView.Item.Key) Then $iconView.Item.Selected = True
    End If
    
End

Public Sub Asakura_MouseDrag()
    
    If $selection.Count = 0 Then Return
    
    Drag.Icon = $iconView.Current.Picture
    $iconView.Drag(NagatoDrag2.GetUriList($selection.Paths), MikuruMimeType.UriList)
    
End

Public Sub Asakura_MouseDown()
    
     If $iconView.Key = "" Then Return
    
    If $iconView.FindAt(Mouse.ScreenX, Mouse.ScreenY) Then
        $iconView.Current.Selected = False
    Else
        With $iconView
            If .Key = NagatoDesktop.SpecialKeyClock Then Return
            If .Key = NagatoDesktop.SpecialKeyTrashBin Then Return
            $selection.Push(.Key, Mouse.Left)
            .[.Key].Picture = MikuruTile(.Key, $selection.Paths.Exist(.Key))
        End With
    End If
    
End

Public Sub Asakura_Menu()
    
    Dim yukiRoot As Boolean = $iconView.FindAt(Mouse.ScreenX, Mouse.ScreenY) 

    $contextMenu.PopUp($iconView.Key, yukiRoot, $selection.Count)
    
End

Public Sub Menu_MenuEvent(argEvent As Integer)
    
    If argEvent = NagatoMenuPipe.ViewReload Then Raise RequestRefresh
    
End

Public Sub Menu_MenuEventWithArg(argEvent As Integer, argValue As Variant)
    
    With NagatoMenuPipe
        Select Case argEvent
            Case .CreateArchive
                Shell "nagato-archiver " & $selection.Paths.Join(" ")
            Case .FileDelete
                NagatoTrash.Delete($selection.Paths)
            Case .FileCopyTo
                If Not argValue Then
                    MikuruFileManuever.CopyTo($selection.Paths)
                Else
                    MikuruFileManuever.CopyToDirectory($selection.Paths, argValue)
                End If
            Case .FileMoveTo
                If Not argValue Then
                    MikuruFileManuever.MoveTo($selection.Paths)
                Else
                    MikuruFileManuever.MoveToDirectory($selection.Paths, argValue)
                End If
            Case .TagAdd
                NagatoFilerDialogs.Tagging($selection.Paths) 
                Raise RequestRefresh
            Case .TagRemove
                NagatoDBSymbol.RemovePaths($selection.Paths)
                Raise RequestRefresh
        End Select
    End With
    
End

Private Function SelectedPaths_Read() As String[]

    Return $selection.Paths

End
