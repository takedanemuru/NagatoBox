' Gambas class file

Public Const SpecialKeyClock As String = "DesktopClock"
Public Const SpecialKeyTrashBin As String = "DesktopTrashBin"

'Private $iconView As IconView
Private $initializer As NagatoInitializerIconview
Private $observer As NagatoDesktopObserverHandler
Private $wallpaper As NagatoDesktopWallpaperHandler
Private $icons As NagatoDesktopIconsHandler
Private $keyboard As NagatoDesktopKeyboardHandler
Private $mouse As NagatoDesktopMouseHandler
Private $drop As NagatoDesktopDropHandler
Private $activation As NagatoDesktopActivationHandler

' Private Sub initializeIconView(argContainer As Container)
'     
'     $iconView = New IconView(argContainer) As "DesktopIconView"
'     
'     With $iconView
'         .Expand = True
'         .Orientation = Arrange.Horizontal
'         .Border = False
'         .Mode = Select.Single
'         .Drop = True
'     End With
'     
' End

Public Sub _new(argContainer As Container)
    
    'initializeIconView(argContainer)
    $initializer = New NagatoInitializerIconview(argContainer)
    $wallpaper = New NagatoDesktopWallpaperHandler($initializer.IconView)
    $icons = New NagatoDesktopIconsHandler($initializer.IconView)
    $mouse = New NagatoDesktopMouseHandler($initializer.IconView) As "Handler"
    $keyboard = New NagatoDesktopKeyboardHandler($initializer.IconView) As "Handler"
    $drop = New NagatoDesktopDropHandler($initializer.IconView)
    $activation = New NagatoDesktopActivationHandler($initializer.IconView)
    $observer = New NagatoDesktopObserverHandler($initializer.IconView) As "Handler"

End

Public Sub ReloadDesktopWallpaper()
    
    $wallpaper.ReloadDesktopWallpaper()
    
End

Public Sub Handler_RequestRefresh()
    
    $icons.Refresh($mouse.SelectedPaths)
    
End

Public Sub Handler_Signal(argEvent As Integer, argValue As Variant)
    
    Select Case argEvent
        Case NagatoMenuPipe.ObserverDelete
            $mouse.Delete(Desktop.Path &/ argValue)
            $icons.Refresh($mouse.SelectedPaths)
        Case NagatoMenuPipe.ObserverModefy, NagatoMenuPipe.ViewForceReload
            $mouse.ClearAll()
            $icons.Refresh($mouse.SelectedPaths)
    End Select
    
End

Public Sub Handler_KeyPressWithControl(argKeyCode As Integer)
    
    Select Case argKeyCode
        Case Key["x"]
            If $mouse.SelectedPaths.Count = 0 Then Return
            Clipboard.Copy(NagatoDrag2.GetUriListCopy($mouse.SelectedPaths), "text/nagato-selection-cut")
        Case Key["c"]
            If $mouse.SelectedPaths.Count = 0 Then Return
            Clipboard.Copy(NagatoDrag2.GetUriListCopy($mouse.SelectedPaths), "text/uri-list")
        Case Key["v"]
            If Clipboard.Format = "text/uri-list" Then 
                MikuruFileManuever.CopyUriList(Desktop.Path, Clipboard.Paste("text/uri-list"))
            Else If Clipboard.Format = "text/nagato-selection-cut" Then
                MikuruFileManuever.CutUriList(Desktop.Path, Clipboard.Paste("text/nagato-selection-cut"))
            End If
    End Select
    
End

Public Sub Handler_KeyPress(argKeyCode As Integer)
    
    Select Case argKeyCode
        Case Key.Enter, 16777220
            Debug "enter"
        Case Key.Esc, 16777216
            Debug "escape"
            Clipboard.Clear()
            $mouse.ClearAll()
            $icons.Refresh($mouse.SelectedPaths)
        Case Key.Delete
            Debug "delete"
            NagatoTrash.Delete($mouse.SelectedPaths)
    End Select
    
End
