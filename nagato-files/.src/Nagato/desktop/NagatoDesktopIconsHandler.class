' Gambas class file

Inherits NagatoDesktopHandler

Private $iconView As IconView
Private $clock As NagatoDesktopClock
Private $rss As NagatoDesktopRssFeeds
Private $systemMonitor As NagatoDesktopSystemMonitor
Private $trashBin As NagatoDesktopTrashBin 

Private Sub setIcon(argDirectory As String, argSelection As String[], argType As Integer)
    
    Dim yukiPath As String

    For Each yukiPath In NagatoSortDesktop.Get(argDirectory, argType)
        If Not Access(yukiPath, gb.Read) Then Continue
        $iconView.Add(yukiPath, "", MikuruTile(yukiPath, argSelection.Exist(yukiPath)))
    Next
    
End

Private Sub initializeIcons(argSelectedPaths As String[])
    
    If NagatoSettingsDesktop.ShowClock Then $clock = New NagatoDesktopClock($iconView)
    If NagatoSettingsDesktop.ShowRss Then $rss = New NagatoDesktopRssFeeds($iconView)
    If NagatoSettingsDesktop.ShowSystemMonitor Then $systemMonitor = New NagatoDesktopSystemMonitor($iconView)
    
    setIcon(Desktop.Path, argSelectedPaths, gb.Directory)
    setIcon(Desktop.Path, argSelectedPaths, gb.File)
    
    If NagatoSettingsDesktop.ShowTrashBin Then $trashBin = New NagatoDesktopTrashBin($iconView)
    
End

Private Sub detachObject(argObject As Object)
    
    If Object.IsValid(argObject) Then
        argObject.Stop()
        Object.Detach(argObject)
    End If
    
End

Private Sub clearAll()
    
    Try detachObject($clock)
    Try detachObject($trashBin)
    $iconView.Clear()
    
End

Public Sub Refresh(argSelectedPaths As String[])
    
    clearAll()
    initializeIcons(argSelectedPaths)
    $iconView.Refresh()

End

Public Sub _new(argIconView As IconView)
    
    $iconView = argIconView
    
    initializeIcons([""])
        
End
