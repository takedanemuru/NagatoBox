' Gambas class file

Inherits NagatoIconViewFilerFacade

Property Read Selection As String[]

Private $iconViewAction As NagatoIconViewAction
Private $iconView As NagatoIconViewSurface
Private $data As New NagatoIconViewFilerFacadeViewData
Private $observer As Observer
Private $userInput As NagatoFilerUserInput

Private Sub clearSelection()
    
    Dim yukiSelectedPaths As String[] = $userInput.Paths.Copy()
    
    $userInput.ClearWithoutLastSelected()
    $iconView.ClearSelection(yukiSelectedPaths)
    
End

Public Sub SetFocus(argPath As String)
    
    $iconViewAction.SetFocus(argPath)
    
End

Public Sub Refresh(argDirectory As String)
    
    $data.NewDirectory(argDirectory)
    $userInput.ClearAll()
    $iconView.Refresh($data.CurrentDirectory, $userInput.Selection, $userInput.LastSelected)
    
End

Public Sub RefreshWithSearchQuery(argPaths As String[])
    
    $data.NewQuery(argPaths)
    $iconView.RefreshWithSearchResult($data.Query, $userInput.Selection)
    
End

Public Sub Delete(argPath As String)
    
    If $iconViewAction.Delete(argPath) Then $userInput.Remove(argPath)
    If MikuruDirectory.GetCountNonRecursive($data.CurrentDirectory, NagatoSettings.ShowHidden) > 0 Then Return
    Me.Refresh($data.CurrentDirectory)
    
End

Public Sub HasKey(argPath As String) As Boolean
    
    Return $iconViewAction.Exist(argPath)
    
End

Public Sub SelectAll()
    
    If Not NagatoSettings.MultipleSelection Then NagatoSettings.MultipleSelection = True
    $userInput.SetPaths(MikuruDirectory.GetAll($data.CurrentDirectory))
    $iconView.Refresh($data.CurrentDirectory, $userInput.Selection, $userInput.LastSelected)
    
End

Public Sub InvertSelection()
    
    NagatoSettings.MultipleSelection = True
    $userInput.SetPaths(MikuruDirectory.GetInverted($data.CurrentDirectory, $userInput.Selection))
    $iconView.Refresh($data.CurrentDirectory, $userInput.Selection, $userInput.LastSelected)
    
End

Public Sub EnsureVisible()
    
    $iconView.Ensure($userInput.LastSelected)
    
End

Public Sub ShowLostDirectory()
    
    $iconView.ShowLostDirectory()
    
End

Public Sub MouseDown(argPath As String, argMouseLeft As Boolean)
    
    $userInput.Push(argPath, Mouse.Left)
    If Not NagatoSettings.MultipleSelection Then clearSelection()
    $iconView.ResetIcon(argPath, $userInput.Exist(argPath))
    TFEI.SetFileProperty($userInput.LastSelected)
    
End

Public Sub _new(argContainer As Container)
    
    Dim yukiInitializer As New NagatoIconViewInitializer(argContainer)

    $iconViewAction = New NagatoIconViewAction(yukiInitializer.IconView) 
    $iconView = New NagatoIconViewSurface(yukiInitializer.IconView) 
    $observer = New Observer(NagatoClipBoard) As "Asakura"
    $userInput = New NagatoFilerUserInput(yukiInitializer.IconView) As "TFEI"
    
End

Private Function Selection_Read() As String[]

    Return $userInput.Selection

End

Public Sub Asakura_Changed()
    
    If $data.Query.Count > 0 Then
        $iconView.RefreshWithSearchResult($data.Query, $userInput.Selection)
    Else
        $iconView.Refresh($data.CurrentDirectory, $userInput.Selection, $userInput.LastSelected)
    End If
    
End
