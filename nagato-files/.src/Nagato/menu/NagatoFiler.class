' Gambas class file

Inherits NagatoObject

Private $menuBar As NagatoMenuPanel
Private $iconView As NagatoIconViewFile
Private $log As NagatoDirectoryLog
Private $directoryObserver As NagatoFilerDirectoryObserver

Private Sub ensureObserver(argDirectory As String)
    
    If Object.IsValid($directoryObserver) Then Return
    
    $directoryObserver = New NagatoFilerDirectoryObserver(argDirectory) As "DirectoryObserver"
    
End

Private Sub move(argDirectory As String)
   
    Dim yukiDirectory As String = argDirectory
   
    If Not Exist(argDirectory) Then Return
    TFEI.SetMainTabStrip(File.BaseName(argDirectory), MikuruIcon.GetDirectoryMono(argDirectory))
    $log.Move(argDirectory)
    $menuBar.SetEnable($log.HasBack, Not ($log.Current = User.Home), True, $log.HasForward)
    refresh(argDirectory)
    ensureObserver(argDirectory)
    
    $directoryObserver.SetDirectory(yukiDirectory)
    
End

Private Sub fileEventHandler(argEvent As Integer, argArgument As Variant)
    
    Select Case argEvent
        Case NagatoObject.FileDelete
            NagatoTrash.Delete($iconView.Selection)
        Case NagatoObject.FileMoveToCurrentDir
            MikuruFileManuever.MoveToDirectory([argArgument], $log.Current)
        Case NagatoObject.FileMoveTo
            MikuruFileManuever.MoveTo($iconView.Selection, argArgument)
        Case NagatoObject.FileCopyTo
            MikuruFileManuever.CopyTo($iconView.Selection, argArgument)
        Case NagatoObject.FileCreate
            If Not Exist($log.Current) Then Return
            Copy argArgument To MikuruPath.GetSafePathName($log.Current &/ File.Name(argArgument))
    End Select
    
End

Private Sub viewEventHandler(argSignal As Integer, argValues As Variant[])
    
    Select Case argSignal
        Case NagatoObject.ViewChangeThumbnail
            HaruhiThumbnailSelector.SetThumbnails(argValues[0])
            refresh($log.Current)
        Case NagatoObject.ViewNewTab
            TFEI.AddNewDirectory(User.Home)
        Case NagatoObject.ViewForceReload
            NagatoDBThumbnailer.ForceCleanUp($log.Current)
            refresh($log.Current)
        Case NagatoObject.ViewSelectAll, NagatoObject.ViewUnselectAll, NagatoObject.ViewInvertSelection
            $iconView.SelectItems(argSignal)
        Case NagatoObject.ViewOpenTerminalHere
            NagatoOpen.OpenTerminal($log.Current)
        Case NagatoObject.ViewSearch
            Object.Lock($menuBar)
                Me.SetNewDirectory(argValues[0])
                Me.SetSeachResult(argValues[1], False)
                $menuBar.SetUnexistPath(argValues[0] &/ argValues[1])
            Object.Unlock($menuBar)
    End Select
    
End

Public Sub tagEventHandler(argSignal As Integer)
    
    Select Case argSignal
        Case NagatoObject.TagAdd
             If NagatoFilerDialogs.Tagging($iconView.Selection) Then $iconView.Refresh($log.Current)
        Case NagatoObject.TagRemove
             NagatoDBSymbol.RemovePaths($iconView.Selection)
             $iconView.Refresh($log.Current)
    End Select
    
End

Private Sub refresh(argDirectory As String)
    
    $menuBar.SetPath(argDirectory)
    $iconView.Refresh(argDirectory)
    
Catch
    Return
    
End

Public Sub SetNewDirectory(argDirectory As String)
    
    If $log.Current <> argDirectory Then move(argDirectory)
    
End

Public Sub SetSeachResult(argQuery As String, argRecursive As Boolean)
    
    Dim yukiQuery As String[] = MikuruFileSearch.SeachQuery($log.Current, argQuery, argRecursive)
    
    $iconView.RefreshWithSearchQuery(yukiQuery)
    
End

Public Sub SetRefresh()
    
    refresh($log.Current)
    
End

Public Sub EnsureVisible()
    
    $iconView.EnsureVisible()
    
End

Public Sub _new(argContainer As TabStrip, argDirectory As String)
    
    $log = New NagatoDirectoryLog
    $menuBar = New NagatoMenuPanel(argContainer) As "MenuItem"
    $iconView = New NagatoIconViewFile(argContainer) As "MenuItem"
    
    move(IIf(argDirectory = "", User.Home, argDirectory))
    
End

Public Sub MenuItem_Signal(argEvent As Integer, argArgument As Variant[])
    
    Select Case argEvent
        Case NagatoObject.DirOpen
            move(argArgument[0])
        Case NagatoObject.DirOpenInNewTab
            TFEI.AddNewDirectory(argArgument[0])
        Case NagatoObject.FileHeader To NagatoObject.FileHeader + 999
            fileEventHandler(argEvent, argArgument[0])
        Case NagatoObject.MoveHeader To NagatoObject.MoveHeader + 999
            move($log.GetMoveTo(argEvent))
        Case NagatoObject.ViewHeader To NagatoObject.ViewHeader + 999
            viewEventHandler(argEvent, argArgument)
        Case NagatoObject.TagHeader To NagatoObject.TagHeader + 999
            tagEventHandler()
        Case NagatoObject.PathNew
            If IsDir(argArgument) Then move(argArgument[0])
        Case NagatoObject.CreateCopyWholeDirectory
             MikuruFileManuever.CopyToDirectory([argArgument[0]], $log.Current)
        Case NagatoObject.CreateArchive
            MikuruCreate.Archive($iconView.Selection)
        Case NagatoObject.CreateBlankText
            MikuruCreate.BlankText($log.Current)
        Case NagatoObject.DirCreate
            MikuruCreate.NewDirectory($log.Current)
    End Select
    
End

Public Sub DirectoryObserver_Signal(argEvent As Integer, argValues As Variant[])
    
    Select Case argEvent
        Case NagatoObject.ObserverModefy
            If Not $iconView.HasKey($log.Current, argValues[0]) Then refresh($log.Current)
        Case NagatoObject.ObserverDelete
            $iconView.Delete($log.Current &/ argValues[0])
        Case NagatoObject.ObserverLost
            $iconView.ShowLostDirectory()
    End Select
    
End
