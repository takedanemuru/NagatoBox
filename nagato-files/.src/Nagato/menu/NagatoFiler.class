' Gambas class file

Inherits NagatoObject

Private $menuBar As NagatoMenuPanel
Private $surface As NagatoFilerSurface
Private $log As NagatoDirectoryLog
Private $directoryObserver As NagatoFilerDirectoryObserver

Private $fileEvent As New NagatoFilerEventFile

Private Sub refresh(argDirectory As String)
    
    $menuBar.SetPath(argDirectory)
    $surface.Refresh(argDirectory)
    
End

Private Sub move(argDirectory As String)
   
    If Not Exist(argDirectory) Then Return
    TFEI.SetMainTabStrip(File.BaseName(argDirectory), MikuruIcon.GetDirectoryMono(argDirectory))
    $log.Move(argDirectory)
    $menuBar.SetEnable($log.HasBack, Not ($log.Current = User.Home), True, $log.HasForward)
    refresh(argDirectory)
    $directoryObserver.SetDirectory(argDirectory)
    
End

Private Sub filtering(argDirectory As String, argQuery As String)
    
    Object.Lock($menuBar)
        Me.SetNewDirectory(argDirectory)
        Me.SetSeachResult(argQuery, False)
        $menuBar.SetUnexistPath(argDirectory &/ argQuery)
    Object.Unlock($menuBar)
    
End

Private Sub viewEventHandler(argSignal As Integer, argValues As Variant[])
    
    Select Case argSignal
        Case NagatoObject.ViewChangeThumbnail
            HaruhiThumbnailSelector.SetThumbnails(argValues[0])
            refresh($log.Current)
        Case NagatoObject.ViewNewTab
            TFEI.AddNewDirectory(User.Home)
        Case NagatoObject.ViewForceReload
            NagatoDBThumbnailer.ForceCleanUp($log.Current)
            refresh($log.Current)
        Case NagatoObject.ViewSelectAll
            $surface.SelectAll($log.Current)
        Case NagatoObject.ViewUnselectAll
            Clipboard.Clear()
            $surface.Refresh($log.Current)
        Case NagatoObject.ViewInvertSelection
            $surface.InvertSelection($log.Current)
        Case NagatoObject.ViewOpenTerminalHere
            NagatoOpen.OpenTerminal($log.Current)
        Case NagatoObject.ViewSearch
            filtering(argValues[0], argValues[1])
        Case NagatoObject.ViewContextMenu
            popUpContextMenu()
    End Select
    
End

Public Sub tagEventHandler(argSignal As Integer)
    
    Select Case argSignal
        Case NagatoObject.TagAdd
             If NagatoFilerDialogs.Tagging($surface.Selection) Then $surface.Refresh($log.Current)
        Case NagatoObject.TagRemove
             NagatoDBSymbol.RemovePaths($surface.Selection)
             $surface.Refresh($log.Current)
    End Select
    
End

Private Sub popUpContextMenu()
    
    Dim yukiMenu As New NagatoContextMenuIconViewFiler(HaruhiMain, $log.Current)
    
    yukiMenu.PopUp()
    
End

Public Sub SetNewDirectory(argDirectory As String)
    
    If $log.Current <> argDirectory Then move(argDirectory)
    
End

Public Sub SetSeachResult(argQuery As String, argRecursive As Boolean)
    
    $surface.RefreshWithSearchQuery(MikuruFileSearch[$log.Current, argQuery, argRecursive])
    
End

Public Sub SetRefresh()
    
    refresh($log.Current)
    
End

Public Sub EnsureVisible()
    
    $surface.EnsureVisible()
    
End

Public Sub _new(argContainer As TabStrip, argDirectory As String)
    
    $log = New NagatoDirectoryLog
    $menuBar = New NagatoMenuPanel(argContainer) As "MenuItem"
    $surface = New NagatoFilerSurface(argContainer) As "MenuItem"
    $directoryObserver = New NagatoFilerDirectoryObserver(argDirectory) As "DirectoryObserver"

    move(IIf(argDirectory = "", User.Home, argDirectory))
    
End

Public Sub MenuItem_Signal(argEvent As Integer, argArgument As Variant[])
    
    Select Case argEvent
        Case NagatoObject.DirOpen
            move(argArgument[0])
        Case NagatoObject.DirOpenInNewTab
            TFEI.AddNewDirectory(argArgument[0])
        Case NagatoObject.FileHeader To NagatoObject.FileHeader + 999
            $fileEvent($log.Current, $surface.Selection, argEvent, argArgument)
        Case NagatoObject.MoveHeader To NagatoObject.MoveHeader + 999
            move($log.GetMoveTo(argEvent))
        Case NagatoObject.ViewHeader To NagatoObject.ViewHeader + 999
            viewEventHandler(argEvent, argArgument)
        Case NagatoObject.TagHeader To NagatoObject.TagHeader + 999
            tagEventHandler(argEvent)
        Case NagatoObject.PathNew
            If IsDir(argArgument[0]) Then move(argArgument[0])
        Case NagatoObject.CreateCopyWholeDirectory
             MikuruFileManuever.CopyToDirectory([argArgument[0]], $log.Current)
        Case NagatoObject.CreateArchive
            MikuruCreate.Archive($surface.Selection)
        Case NagatoObject.CreateBlankText
            MikuruCreate.BlankText($log.Current)
        Case NagatoObject.DirCreate
            MikuruCreate.NewDirectory($log.Current)
        Case NagatoObject.UserInputMouseDown
            $surface.MouseDown(argArgument[0], argArgument[1])
    End Select
    
End

Public Sub DirectoryObserver_Signal(argEvent As Integer, argValues As Variant[])
    
    Select Case argEvent
        Case NagatoObject.ObserverModefy
            If Not $surface.HasKey($log.Current &/ argValues[0]) Then refresh($log.Current)
        Case NagatoObject.ObserverDelete
            $surface.Delete($log.Current, $log.Current &/ argValues[0])
        Case NagatoObject.ObserverLost
            $surface.ShowLostDirectory()
        Case NagatoObject.ObserverClipboardChanged
            $surface.RefreshKeepQuery($log.Current)
    End Select
    
End
