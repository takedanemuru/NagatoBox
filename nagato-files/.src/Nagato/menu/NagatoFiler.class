' Gambas class file

Inherits NagatoMenuPipe

Private $menuBar As NagatoMenuPanel
Private $iconView As NagatoIconViewFile
Private $log As NagatoDirectoryLog
Private $directoryObserver As NagatoFilerDirectoryObserver

Private Sub ensureObserver(argDirectory As String)
    
    If Object.IsValid($directoryObserver) Then Return
    
    $directoryObserver = New NagatoFilerDirectoryObserver(argDirectory) As "DirectoryObserver"
    
End

Private Sub move(argDirectory As String)
   
    Dim yukiDirectory As String = argDirectory
   
    If Not Exist(argDirectory) Then Return
    TFEI.SetMainTabStrip(File.BaseName(argDirectory), MikuruIcon.GetDirectoryMono(argDirectory))
    $log.Move(argDirectory)
    $menuBar.SetEnable($log.HasBack, Not ($log.Current = User.Home), True, $log.HasForward)
    refresh(argDirectory)
    ensureObserver(argDirectory)
    
    $directoryObserver.SetDirectory(yukiDirectory)
    
End

Private Sub fileEventHandler(argEvent As Integer, argArgument As Variant)
    
    With NagatoMenuPipe
        Select Case argEvent
            Case .FileDelete
                NagatoTrash.Delete($iconView.Selection)
            Case .FileMoveToCurrentDir
                MikuruFileManuever.MoveToDirectory([argArgument], $log.Current)
            Case .FileMoveTo
                If argArgument Then
                    MikuruFileManuever.MoveToDirectory($iconView.Selection, argArgument)
                Else
                    MikuruFileManuever.MoveTo($iconView.Selection)
                Endif
            Case .FileCopyTo
                If argArgument Then
                    MikuruFileManuever.CopyToDirectory($iconView.Selection, argArgument)
                Else
                    MikuruFileManuever.CopyTo($iconView.Selection)
                Endif
            Case .FileCreate
                If Not Exist($log.Current) Then Return
                Copy argArgument To MikuruPath.GetSafePathName($log.Current &/ File.Name(argArgument))
        End Select
    End With
    
End

Private Sub refresh(argDirectory As String)
    
    $menuBar.SetPath(argDirectory)
    $iconView.Refresh(argDirectory)
    
Catch
    Return
    
End

Public Sub SetNewDirectory(argDirectory As String)
    
    If $log.Current <> argDirectory Then move(argDirectory)
    
End

Public Sub SetSeachResult(argQuery As String, argRecursive As Boolean)
    
    Dim yukiQuery As String[] = MikuruFileSearch.SeachQuery($log.Current, argQuery, argRecursive)
    
    $iconView.RefreshWithSearchQuery(yukiQuery)
    
End

Public Sub SetRefresh()
    
    refresh($log.Current)
    
End

Public Sub EnsureVisible()
    
    $iconView.EnsureVisible()
    
End

Public Sub _new(argContainer As TabStrip, argDirectory As String)
    
    $log = New NagatoDirectoryLog
    $menuBar = New NagatoMenuPanel(argContainer) As "MenuItem"
    $iconView = New NagatoIconViewFile(argContainer) As "MenuItem"
    
    move(IIf(argDirectory = "", User.Home, argDirectory))
    
End

Public Sub MenuItem_MenuEventWithArg(argEvent As Integer, argArgument As Variant)
    
    With NagatoMenuPipe
        Select Case argEvent
            Case .DirOpen
                move(argArgument)
            Case .DirOpenInNewTab
                TFEI.AddNewDirectory(argArgument)
            Case .FileHeader To .FileHeader + 999
                fileEventHandler(argEvent, argArgument)
            Case .CreateArchive
                MikuruCreate.Archive($iconView.Selection)
             Case .TagAdd
                 If NagatoFilerDialogs.Tagging($iconView.Selection) Then $iconView.Refresh($log.Current)
             Case .TagRemove
                 NagatoDBSymbol.RemovePaths($iconView.Selection)
                 $iconView.Refresh($log.Current)
             Case .PathNew
                If IsDir(argArgument) Then move(argArgument)
             Case .CreateCopyWholeDirectory
                 MikuruFileManuever.CopyToDirectory([argArgument], $log.Current)
        End Select
    End With
    
End

Public Sub MenuItem_MenuEvent(argEvent As Integer)
    
    With NagatoMenuPipe
        Select Case argEvent
            Case .MoveHeader To .MoveHeader + 999
                move($log.GetMoveTo(argEvent))
            Case .ViewNewTab
                TFEI.AddNewDirectory(User.Home)
            Case .ViewForceReload
                NagatoDBThumbnailer.ForceCleanUp($log.Current)
                refresh($log.Current)
            Case .ViewSelectAll, .ViewUnselectAll, .ViewInvertSelection
                $iconView.SelectItems(argEvent)
            Case .ViewOpenTerminalHere
                NagatoOpen.OpenTerminal($log.Current)
                ' 'Try Desktop.OpenTerminal($log.Current)
                'Try Exec ["x-terminal-emulator", "-d", $log.Current]
            Case .DirCreate
                If Not Exist($log.Current) Then Return
                HaruhiNewDirectory.SetPath($log.Current &/ ("New directory"))
                HaruhiNewDirectory.ShowDialog()
            Case .CreateBlankText
                If Not Exist($log.Current) Then Return
                File.Save(MikuruPath.GetSafePathName($log.Current &/ ("blank.text")), "")
        End Select
    End With
    
End

Public Sub MenuItem_MenuEventWithArgs(argEvent As Integer, argArguments As Variant[])
    
    If argEvent = NagatoMenuPipe.ViewSearch Then
        Object.Lock($menuBar)
            Me.SetNewDirectory(argArguments[0])
            Me.SetSeachResult(argArguments[1], False)
            $menuBar.SetUnexistPath(argArguments[0] &/ argArguments[1])
        Object.Unlock($menuBar)
    End If
    
End

Public Sub DirectoryObserver_MenuEventWithArg(argEvent As Integer, argFileName As Variant)
    
    Select Case argEvent
        Case NagatoMenuPipe.ObserverModefy
            If Not $iconView.HasKey($log.Current, argFileName) Then refresh($log.Current)
        Case NagatoMenuPipe.ObserverDelete
            $iconView.Delete($log.Current &/ argFileName)
        Case NagatoMenuPipe.ObserverLost
            $iconView.ShowLostDirectory()
    End Select
    
End
