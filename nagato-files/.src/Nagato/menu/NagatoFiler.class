' Gambas class file

Inherits NagatoObject

Private $log As NagatoDirectoryLog
Private $directoryObserver As NagatoFilerDirectoryObserver
Private $menuBar As NagatoMenuPanel
Private $surface As NagatoFilerSurface
Private $eventFacade As NagatoFilerEventFacade

Private Sub refresh(argDirectory As String)
    
    $menuBar.SetPath(argDirectory)
    $surface.SurfaceRefresh(argDirectory)
    
End

Private Sub move(argDirectory As String)
   
    If Not Exist(argDirectory) Then Return
    TFEI.SetMainTabStrip(File.Name(argDirectory), MikuruIcon.GetDirectoryMono(argDirectory))
    $log.Move(argDirectory)
    $menuBar.SetEnable($log.HasBack, Not ($log.Current = User.Home), argDirectory <> "/", $log.HasForward)
    refresh(argDirectory)
    $directoryObserver.Directory = argDirectory
    
End

Private Sub filtering(argDirectory As String, argQuery As String)
    
    Object.Lock($menuBar)
        Me.SetNewDirectory(argDirectory)
        Me.SetSearchResult(argQuery, False)
        $menuBar.SetUnexistPath(argDirectory &/ argQuery)
    Object.Unlock($menuBar)
    
End

Public Sub SetNewDirectory(argDirectory As String)
    
    If $log.Current <> argDirectory Then move(argDirectory)
    
End

Public Sub SetSearchResult(argQuery As String, argRecursive As Boolean)
    
    Dim yukiSearchResult As String[] = MikuruFileSearch[$log.Current, argQuery, argRecursive]
    
    $surface.SetSearchResult(yukiSearchResult)
    
End

Public Sub SetRefresh()
    
    refresh($log.Current)
    
End

Public Sub EnsureVisible()
    
    $surface.EnsureVisible()
    
End

Public Sub _new(argContainer As TabStrip, argDirectory As String)
    
    $log = New NagatoDirectoryLog
    $menuBar = New NagatoMenuPanel(argContainer) As "UserInterface"
    $surface = New NagatoFilerSurface(argContainer) As "UserInterface"
    $directoryObserver = New NagatoFilerDirectoryObserver(argDirectory) As "DirectoryObserver"
    $eventFacade = New NagatoFilerEventFacade($log, $surface.UserInput) As "EventHandler"
    
    move(IIf(argDirectory = "", User.Home, argDirectory))
    
End

Public Sub UserInterface_Signal(argEvent As Integer, argArgument As Variant[])
    
    $eventFacade(argEvent, argArgument)
    
End

Public Sub DirectoryObserver_Signal(argEvent As Integer, argValues As Variant[])
    
    Select Case argEvent
        Case NagatoObject.ObserverModefy
            If Not $surface.Exist($log.Current &/ argValues[0]) Then refresh($log.Current)
        Case NagatoObject.ObserverDelete
            $surface.SurfaceDelete($log.Current, $log.Current &/ argValues[0])
        Case NagatoObject.ObserverLost
            $surface.ShowLostDirectory()
        Case NagatoObject.ObserverClipboardChanged
            $surface.RefreshKeepQuery($log.Current)
    End Select
    
End

Public Sub EventHandler_Request(argRequest As Integer, argValues As Variant[])
    
    If argRequest = NagatoFilerEvent.RequestFocus Then Debug argValues[0]
    
    Select Case argRequest
        Case NagatoFilerEvent.RequestFiltering
            filtering(argValues[0], argValues[1])
        Case NagatoFilerEvent.RequestNewSelection
            $surface.NewSelection($log.Current, argValues[0])
        Case NagatoFilerEvent.RequestRefresh
            refresh(argValues[0])
        Case NagatoFilerEvent.RequestSurfaceRefresh
            $surface.SurfaceRefresh(argValues[0])
        Case NagatoFilerEvent.RequestMove
            move(argValues[0])
        Case NagatoFilerEvent.RequestMouseDown
            $surface.MouseDown(argValues[0], argValues[1])
        Case NagatoFilerEvent.RequestFocus
            $surface.Focus(argValues[0])
    End Select
    
End
