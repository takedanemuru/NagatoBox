' Gambas class file

Inherits NagatoObject

Private $path As String
Private $paths As New String[]

Private Sub resetPaths()
    
    Dim yukiDirectory As String = File.Dir($path)
    Dim yukiPath As String
    Dim yukiFullPath As String
    
    $paths.Clear()

    For Each yukiPath In Dir(yukiDirectory)
        yukiFullPath = yukiDirectory &/ yukiPath
        If DesktopMime.FromFile(yukiFullPath).Type Not Begins "image/" Then Continue
        $paths.Add(yukiFullPath)
    Next
    
End

Private Sub open() 
    
    If Dialog.OpenFile(False) Then Return
    If DesktopMime.FromFile(Dialog.Path).Type Not Begins "image/" Then Return 
    
    $path = Dialog.Path
    resetPaths()
    
    Raise Signal(MikuruSignal.FileNew, [$path])
    
End

Private Sub back()
    
    Dim yukiCurrent As Integer
    
    If 2 > $paths.Count Then Return
    yukiCurrent = $paths.Find($path) - 1
    If 0 > yukiCurrent Then yukiCurrent = $paths.Max
    $path = $paths[yukiCurrent]
    
    Raise Signal(MikuruSignal.FileNew, [$path])
    
End

Private Sub next()
    
    Dim yukiCurrent As Integer
    
    If 2 > $paths.Count Then Return
    yukiCurrent = $paths.Find($path) + 1
    If yukiCurrent > $paths.Max Then yukiCurrent = 0
    $path = $paths[yukiCurrent]
    
    Raise Signal(MikuruSignal.FileNew, [$path])
    
End

Public Sub _OnCallMain(argSignal As Integer, argValues As Variant[])
    
    Select Case argSignal
        Case MikuruSignal.FileOpen
            open()
        Case MikuruSignal.FileBack
            back()
        Case MikuruSignal.FileNext
            next()
    End Select
    
End

Public Sub _new()
    
    If Not Exist(NagatoArgs.Path) Then Return
    
    $path = NagatoArgs.Path
    resetPaths()
    
    Raise Signal(MikuruSignal.FileNew, [$path])

End

