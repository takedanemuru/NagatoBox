' Gambas class file

Inherits NagatoTabContentsHandler

Property Read ApplicationDirectory As String 'act as const
Property Read IconSize As Integer 'act as const

Private $iconView As IconView = Kyon.ApplicationsIconView

Private Sub add()
    
    Copy $iconView.Key To MikuruAutostartDirectory.User &/ File.Name($iconView.Key)
    
    NagatoGridsHandler.Refresh()
    
End

Private Sub setApplicationIcons()
    
    Dim yukiPath As String
    Dim yukiDesktopFile As DesktopFile
    
    For Each yukiPath In Dir(Me.ApplicationDirectory, "*", gb.File).Sort()
        yukiDesktopFile = New DesktopFile(Me.ApplicationDirectory &/ yukiPath)
        $iconView.Add(Me.ApplicationDirectory &/ yukiPath, yukiDesktopFile.Name, yukiDesktopFile.GetIcon(Me.IconSize).Picture)
    Next
    
End

Public Sub _InitializeGearMenu()
    
    Kyon.ApplicationsMenuButton.Menu = "ApplicationsMenu"
    Me._$gearMenu = New NagatoApplicationsMenu(Kyon.ApplicationsMenuButton.Menu) As "Menu"
    
End

Public Sub _InitializeObserver()
    
    Me._$observer = New Observer(Kyon.ApplicationsIconView) As "Asakura"
    
End

Public Sub _Initialize()
    
    $iconView.Clear()
    setApplicationIcons()
    
End

Public Sub Asakura_Activate()
    
    add()
    
End

Public Sub Menu_Add()
    
    If $iconView.Key = "" Then Return
    If Not NagatoGridsHandler.HasUserAutostart($iconView.Key) Then
        add()
    End If
    
End

Public Sub Menu_Edit()
    
    If $iconView.Key = "" Then Return
    If Not NagatoGridsHandler.HasUserAutostart($iconView.Key) Then
        NagatoEditorHandler.CurrentPath = MikuruAutostartDirectory.User &/ File.Name($iconView.Key)
        NagatoEditorHandler.SetText(File.Load($iconView.Key), False)
        Kyon.RefreshTabStrip(File.Name($iconView.Key), Stock["medium/pen"])
    Endif
    
End

Private Function IconSize_Read() As Integer

    Return 64

End

Private Function ApplicationDirectory_Read() As String

    Return "/usr/share/applications"

End
