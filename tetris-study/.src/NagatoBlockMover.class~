' Gambas class file

Property Read CurrentPosition As Integer[]
Property Read Color As Integer
Property Read NextPosition As Integer[]
Property Read NextColor As Integer

Private $currentBlock As NagatoBlock
Private $nextBlock As NagatoBlock

Private Function GetPositions(argX As Integer, argY As Integer, argRotate As Boolean, argBlock As NagatoBlock) As Integer[]
        
        Dim yukiRotate As Integer = argBlock.RotateTimes
        Dim yukiBlock As NagatoBlock
        
        If argRotate Then Inc yukiRotate
        
        With argBlock
                yukiBlock = New NagatoBlock(.CenterX + argX, .CenterY + argY, .OtherBlocks, yukiRotate)
        End With
        
        Return NagatoPositionCalc.GetPosition(yukiBlock)
        
End

Private Function IsConflict(argX As Integer, argY As Integer, argRotate As Boolean, Optional argBlock As NagatoBlock) As Boolean
        
        Dim yukiCounter As Integer
        Dim yukiPositions As Integer[]
        
        If Not argBlock Then argBlock = $currentBlock
        yukiPositions = GetPositions(argX, argY, argRotate, argBlock)
        
        For yukiCounter = 0 To 7 Step 2
                If NagatoBoard.GetBlock(yukiPositions[yukiCounter], yukiPositions[yukiCounter + 1]) <> 0 Then
                        Return True
                Endif
        Next
        
        Return False
        
End

Public Sub _new()
        
        $currentBlock = New NagatoBlock
        $nextBlock = New NagatoBlock
        
End

Public Sub Next()
        
        $currentBlock = $nextBlock
        $nextBlock = New NagatoBlock
        
End

Public Sub MoveDown()
        
        If IsConflict(0, 1, False) Then Return
        
        $currentBlock.Down()
        
End

Public Sub MoveLeft()
        
        If IsConflict(-1, 0, False) Then Return
        
        $currentBlock.Left()
        
End

Public Sub MoveRight()
        
        If IsConflict(1, 0, False) Then Return
        
        $currentBlock.Right()
        
End

Public Sub MoveRotate()
        
        If Not $currentBlock.IsRotate Then Return
        If IsConflict(0, 0, True) Then Return
        
        $currentBlock.Rotate()
        
End

Public Function IsDead() As Boolean
        
        Return IsConflict(0, 1, False)
        
End

Public Function IsGameOver() As Boolean
        
        Return IsConflict(0, 0, False, $nextBlock)
        
End

Public Sub TurnToBlack()
        
        $currentBlock.TurnToBlack()
        
End

Private Function CurrentPosition_Read() As Integer[]

        Return NagatoPositionCalc.GetPosition($currentBlock)

End

Private Function Color_Read() As Integer

        Return $currentBlock.Color

End

Private Function NextPosition_Read() As Integer[]

        Return NagatoPositionCalc.GetPosition($nextBlock)

End

Private Function NextColor_Read() As Integer

        Return $nextBlock.Color

End
