' Gambas class file

Create Static

Private Const BaseSize As Integer = 280 ' 15+250+15
Private Const HalfSize As Integer = 140
Private Const RoundMergin As Integer = 15

Private $cpuUsageData As New Float[]
Private $memoryUsageData As New Float[]
Private $swapUsageData As New Float[]

Private Sub setData(argDataArray As Float[], argData As Float)
    
    argDataArray.Add(argData)
    If argDataArray.Count > 112 Then argDataArray.Extract(0, 1)
    
End

Private Function getBaseImage(argSize As Integer) As Image
    
    Dim yukiBaseImage As New Image(argSize, argSize, Color.Transparent)
    
    With Paint
        .Begin(yukiBaseImage)
        .Brush = .Color(Color.White)
        .Rectangle(0, 0, argSize, argSize)
        .Fill()
        .End()
    End With
    
    Return yukiBaseImage
    
End

Private Function getLayerBaseImage() As Image
    
    Dim yukiBaseImage As New Image(BaseSize, BaseSize, Color.Transparent)
    
    Return yukiBaseImage
    
End

Private Sub drawGrid()
    
    Dim yukiCount As Integer
    
    With Paint
        .Brush = .Color(Color.Lighter(Color.Gray))
        .LineWidth = 0.2
        For yukiCount = RoundMergin To BaseSize Step 25
            'vertical lines
            .MoveTo(yukiCount, 0)
            .LineTo(yukiCount, BaseSize)
            'horizontal lines
            .MoveTo(0, yukiCount)
            .LineTo(BaseSize, yukiCount)
        Next
        .Stroke()
    End With
    
End

Private Sub drawGraph(argColor As Integer, argDataArray As Float[])
    
    Dim yukiCount As Integer
    Dim yukiXStart As Integer
    
    Paint.Brush = Paint.Color(argColor)
    Paint.LineJoin = Paint.LineJoinRound
    Paint.LineWidth = 2
    
    yukiXStart = BaseSize - 2.5 * (argDataArray.Max)
    
    For yukiCount = 0 To argDataArray.Max - 1
        Paint.MoveTo(yukiXStart + 2.5 * yukiCount, (BaseSize - RoundMergin) - 2.5 * argDataArray[yukiCount] * 100)
        Paint.LineTo(yukiXStart + 2.5 * yukiCount + 2.5, (BaseSize - RoundMergin) - 2.5 * argDataArray[yukiCount + 1] * 100)
    Next
    
    Paint.Stroke()
    
End

Private Sub drawCpuUsageGraph()
    
    setData($cpuUsageData, NagatoSystemObserver.CpuUsage)
    drawGraph(Color.Red, $cpuUsageData)
    
End

Private Sub drawMemoryUsageGraph()
    
    setData($memoryUsageData, NagatoSystemObserver.MemoryUsage)
    drawGraph(Color.Blue, $memoryUsageData)
    
End

Private Sub drawSwapUsageGraph()
    
    setData($swapUsageData, NagatoSystemObserver.SwapUsage)
    drawGraph(Color.Gray, $swapUsageData)
    
End

Private Function getGraphImage() As Image
    
    Dim yukiLayer As Image = getLayerBaseImage()
    
    Paint.Begin(yukiLayer)
        drawGrid()
        drawCpuUsageGraph()
        drawMemoryUsageGraph()
        drawSwapUsageGraph()
    Paint.End()
    
    Return yukiLayer
    
End

Public Sub Get(argSize As Integer) As Image
    
    Dim yukiBaseImage As Image = getBaseImage(argSize)
    
    Paint.Begin(yukiBaseImage)
        Paint.DrawImage(getGraphImage().Stretch(argSize, argSize), 0, 0)
    Paint.End()
    
    Return yukiBaseImage
    
End

