#!/usr/bin/python3

import gi.repository.GLib
import dbus
import dbus.service
import dbus.mainloop.glib
import subprocess

DBUS_SERVICE    =  'org.freedesktop.Notifications'
DBUS_OBJECT_PATH = '/org/freedesktop/Notifications'
DBUS_INTERFACE   =  'org.freedesktop.Notifications'

class NotificationServer(dbus.service.Object):
    _id = 0

    @dbus.service.method(DBUS_INTERFACE, in_signature='susssasa{sv}i', out_signature='u')
    def Notify(self, app_name, replace_id, app_icon, summary, body, actions, hints, expire_timeout):
        if not replace_id:
            self._id += 1
            notification_id = self._id
        subprocess.call(["zenity","--warning"])
        return notification_id

    @dbus.service.method(DBUS_INTERFACE, in_signature='', out_signature='as')
    def GetCapabilities(self):
        return ('YUKI.N >...', )

    @dbus.service.signal(DBUS_INTERFACE, signature='uu')
    def NotificationClosed(self, id_in, reason_in):
        pass

    @dbus.service.method(DBUS_INTERFACE, in_signature='u', out_signature='')
    def CloseNotification(self, id):
        pass

    @dbus.service.method(DBUS_INTERFACE, in_signature='', out_signature='ssss')
    def GetServerInformation(self):
        return ('under the heavy construction', 'http://takedanemuru.github.io', '42.5.1', '1.2') # name vendor version spec_version

if __name__ == '__main__':
    import argparse
    parser = argparse.ArgumentParser()
    args = parser.parse_args()

    dbus.mainloop.glib.DBusGMainLoop(set_as_default=True)
    bus = dbus.SessionBus()
    name = dbus.service.BusName(DBUS_SERVICE, bus, do_not_queue=True) # don't remove the binding: to avoid to call dtor
    NotificationServer(bus, DBUS_OBJECT_PATH)
    mainloop = gi.repository.GLib.MainLoop()
    mainloop.run() # don't quit
