#!/usr/bin/env python3

# (c) takeda.nemuru <takeda.nemuru@yandex.com> 2016-
# this script is licensed under S.O.S. License

import subprocess
import gi.repository.GLib
import dbus
import dbus.service
import dbus.mainloop.glib

DBusService =  "org.freedesktop.Notifications"
DBusObjectPath = "/org/freedesktop/Notifications"
DBusInterface =  "org.freedesktop.Notifications"

class NotificationServer(dbus.service.Object):
    _id = 0
	
    @dbus.service.method(DBusInterface, in_signature='susssasa{sv}i', out_signature='u')
    def Notify(self, app_name, replace_id, app_icon, summary, body, actions, hints, expire_timeout):
        yuki_command = ["dataovermind-notifications","--notify"]
        if not replace_id:
            self._id += 1
            notification_id = self._id
        if app_name : yuki_command.extend(["--app", app_name])
        if summary : yuki_command.extend(["--summary", summary])
        if body : yuki_command.extend(["--body", body])
        for yuki_key, yuki_value in hints.items():
            if yuki_key == "urgency":
                #subprocess.call(["zenity", "--info", "--text=" + str(int(yuki_value))])
                yuki_command.extend("--urgency", str(int(yuki_value)))
        subprocess.call(yuki_command)
        return notification_id

    @dbus.service.method(DBusInterface, in_signature='', out_signature='as')
    def GetCapabilities(self):
        return ("YUKI.N > Can you see this ? ", )

    @dbus.service.signal(DBusInterface, signature='uu')
    def NotificationClosed(self, id_in, reason_in):
        #Gambas3 dbus implementation cannot raise signal...
        pass

    @dbus.service.method(DBusInterface, in_signature='u', out_signature='')
    def CloseNotification(self, id):
        yuki_command = ["dataovermind-notifications","--close"]
        subprocess.call(yuki_command)

    @dbus.service.method(DBusInterface, in_signature='', out_signature='ssss')
    def GetServerInformation(self):
        return ("developping", "https://takedanemuru.github.io", "42.5.14", "1.2") 

if __name__ == '__main__':
    import argparse
    parser = argparse.ArgumentParser()
    args = parser.parse_args()

    dbus.mainloop.glib.DBusGMainLoop(set_as_default=True)
    bus = dbus.SessionBus()
    name = dbus.service.BusName(DBusService, bus, do_not_queue=True) 
    NotificationServer(bus, DBusObjectPath)
    mainloop = gi.repository.GLib.MainLoop()
    mainloop.run() # parsistent loop.

