' Gambas class file

Create Static

Property Read IsReady As Boolean

Private $cache As New Collection
Private $ready As Boolean = False
Private $client As New NagatoWeatherHttpClient As "HttpClient"

Event Finished

Private Sub setAdditionalData(argWeatherElement As NagatoWeatherElement, argData As XmlElement[], argTimeStamp As String)
    
    If Not Object.IsValid(argWeatherElement) Then
        Return
    Else If Not argWeatherElement[MikuruWeatherKey.HasIcon] Then
        argWeatherElement.SetAdditionalData(argData)
    Else
        $cache.Add(argWeatherElement, argTimeStamp)
    End If 
    
End

Private Sub refresh()
    
    Dim yukiXmlElement As XmlElement
    Dim yukiWeatherElement As NagatoWeatherElement
    Dim yukiChildElements As XmlElement[]
    
    Debug "refresh"
    Debug $client.Elements.Count
    
    For Each yukiXmlElement In $client.Elements
        yukiChildElements = yukiXmlElement.ChildElements[0].ChildElements
        If yukiChildElements.Count > 2 Then
            yukiWeatherElement = New NagatoWeatherElement
            yukiWeatherElement.SetEssentialData(yukiChildElements)
        Else
            setAdditionalData(yukiWeatherElement, yukiChildElements, yukiXmlElement.Attributes["to"])
        Endif
    Next
    
    $ready = True
    
    Raise Finished
    
Catch
    Return
    
End

Public Sub Activate(argLatitude As Float, argLongtude As Float)
    
    $ready = False
    $client.Activate(argLatitude, argLongtude)
    
End

Public Function GetWeatherElementMostRecent() As NagatoWeatherElement
    
    Return $cache[MikuruTimeStamp[0]]
    
End

Public Function HasElement(argTime As String) As Boolean
    
    Return $cache.Exist(argTime)
    
End

Public Function GetElement(argTime As String) As NagatoWeatherElement
    
    Return $cache[argTime]
    
Catch
    Return Null
    
End

Public Sub HttpClient_Finished()
    
    refresh()
    
End

Private Function IsReady_Read() As Boolean

    Return $ready

End
