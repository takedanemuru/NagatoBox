' Gambas class file

Create Static

Private $settings As New Settings

Property BackgroundFile As Integer
Property BackgroundApplication As Integer
Property BackgroundHighlight As Integer
Property BackGroundStickyNote As Integer
'Property SlideShowDirectory As String
Property UserLatitude As Float
Property UserLongitude As Float
Property UserLocationName As String

Public Sub LoadGridsSettings(argGrids As GridView)
    
    Dim yukiCount As Integer
    
    For yukiCount = 0 To argGrids.Columns.Max
        With argGrids.Columns[yukiCount]
            .Width = $settings[Subst$("&1/column&2width", argGrids.Name, yukiCount), .Width]
        End With
    Next
    
End

Public Sub SaveGridsSettings(argGrids As GridView)
    
    Dim yukiCount As Integer
    
    For yukiCount = 0 To argGrids.Columns.Max
        With argGrids.Columns[yukiCount]
            $settings[Subst$("&1/column&2width", argGrids.Name, yukiCount)] = .Width
        End With
    Next
    
    $settings.Save()
    
End

Private Function BackgroundFile_Read() As Integer

    Return $settings["bg/file", Color.Lighter(Color.Blue)]

End

Private Sub BackgroundFile_Write(Value As Integer)

    $settings["bg/file"] = Value
    $settings.Save()

End

Private Function BackgroundApplication_Read() As Integer

    Return $settings["bg/application", Color.Lighter(Color.Blue)]

End

Private Sub BackgroundApplication_Write(Value As Integer)

    $settings["bg/application"] = Value
    $settings.Save()

End

Private Function BackgroundHighlight_Read() As Integer

    Return $settings["bg/application", Color.Pink]

End

Private Sub BackgroundHighlight_Write(Value As Integer)

    $settings["bg/highlight"] = Value
    $settings.Save()

End

Private Function BackGroundStickyNote_Read() As Integer

    Return $settings["bg/stickynote", 16764735]

End

Private Sub BackGroundStickyNote_Write(Value As Integer)

    $settings["bg/stickynote"] = Value
    $settings.Save()

End

' Private Function SlideShowDirectory_Read() As String
' 
'     Return $settings["slideshow/directory", MikuruPath.Pictures]
' 
' End
' 
' Private Sub SlideShowDirectory_Write(Value As String)
' 
'     $settings["slideshow/directory"] = Value
'     $settings.Save()
' 
' End

Private Function UserLatitude_Read() As Float

    Dim yukiLatitude As String = $settings["geo/latitude", ""]

    If yukiLatitude = "" Then
        Return 34.773632
    Else
        Return CFloat(NagatoCipher.Decryption(yukiLatitude))
    Endif


End

Private Sub UserLatitude_Write(Value As Float)

    $settings["geo/latitude"] = NagatoCipher.Encryption(Value)
    $settings.Save()

End

Private Function UserLongitude_Read() As Float

    Dim yukiLongitude As String = $settings["geo/longitude", ""]

    If yukiLongitude = "" Then
        Return 135.3166017
    Else
        Return CFloat(NagatoCipher.Decryption(yukiLongitude))
    Endif

End

Private Sub UserLongitude_Write(Value As Float)

    $settings["geo/longitude"] = NagatoCipher.Encryption(Value)
    $settings.Save()

End

Private Function UserLocationName_Read() As String

    Dim yukiVisibleName As String = $settings["geo/visible-name", ""]

    If yukiVisibleName = "" Then
        Return "Nishinomiya-City Japan"
    Else
        Return NagatoCipher.Decryption(yukiVisibleName)
    Endif

End

Private Sub UserLocationName_Write(Value As String)

    $settings["geo/visible-name"] = NagatoCipher.Encryption(Value)
    $settings.Save()

End
