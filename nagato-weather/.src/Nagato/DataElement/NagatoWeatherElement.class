' Gambas class file

Property Read HasIcon As Boolean

Private $cache As New Collection

Private Sub setAttribute(argXmlElement As XmlElement, argTag As String, argAttribute As String, argKey As Integer)
    
    Dim yukiXmlElement As XmlElement = argXmlElement.GetChildrenByTagName(argTag)[0]
    
    $cache.Add(yukiXmlElement.Attributes[argAttribute], argKey)
    
Catch ' if tag not found
    Return
    
End

Public Sub SetEssentialData(argXmlElement As XmlElement)
    
    setAttribute(argXmlElement, "temperature", "value", MikuruWeatherKey.Temperature)
    setAttribute(argXmlElement, "windDirection", "name", MikuruWeatherKey.WindDirection)
    setAttribute(argXmlElement, "windSpeed", "mps", MikuruWeatherKey.WindSpeed)
    setAttribute(argXmlElement, "humidity", "value", MikuruWeatherKey.Humidity)
    setAttribute(argXmlElement, "pressure", "value", MikuruWeatherKey.Pressure)
    setAttribute(argXmlElement, "cloudiness", "percent", MikuruWeatherKey.Cloudiness)
    setAttribute(argXmlElement, "fog", "percent", MikuruWeatherKey.Fog)
    setAttribute(argXmlElement, "lowClouds", "percent", MikuruWeatherKey.LowCloud)
    setAttribute(argXmlElement, "mediumClouds", "percent", MikuruWeatherKey.MediumCloud)
    setAttribute(argXmlElement, "highClouds", "percent", MikuruWeatherKey.HighCloud)
    
End

Public Sub SetAdditionalData(argXmlElement As XmlElement)
    
    If $cache.Exist(MikuruWeatherKey.IconId) Then Return
    
    setAttribute(argXmlElement, "precipitation", "value", MikuruWeatherKey.Precipitation)
    setAttribute(argXmlElement, "symbol", "id", MikuruWeatherKey.IconName)
    setAttribute(argXmlElement, "symbol", "number", MikuruWeatherKey.IconId)
    
End

Public Sub _get(argKey As Integer) As Variant
    
    If argKey = MikuruWeatherKey.IconId Then
        If Not $cache.Exist(MikuruWeatherKey.IconId) Then Return 0
    End If
    
    Return $cache[argKey]
    
End

Private Function HasIcon_Read() As Boolean

    Return $cache.Exist(MikuruWeatherKey.IconId)

End
