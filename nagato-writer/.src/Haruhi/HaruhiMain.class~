' Gambas class file

' Private $fileHandler As New NagatoFileHandler
Private $menuPanel As NagatoMenuPanel
Private $sourceEditor As NagatoSourceEditor
Private $previewer As NagatoPreviewer

' Private Function ensureSaved() As Boolean ' False means cancel to open file
'     
'     If $sourceEditor.Text = $fileHandler.Buffer Then Return True
'     
'     Select Case HaruhiDialogClose.ShowDialog()
'         Case HaruhiDialogClose.ResponseCancel
'             Return False
'         Case HaruhiDialogClose.ResponseDiscard
'             Return True
'         Case HaruhiDialogClose.ResponseSave
'             fileEvent(MikuruSignal.FileSave)
'             Return True
'     End Select
'     
' End

' Private Sub fileEvent(argEvent As Integer, Optional argArgs As Variant[] = Null)
'     
'      If argEvent > (MikuruSignal.FileNone + 100) And If Not ensureSaved() Then Return
'     
'     Select Case argEvent
'         Case MikuruSignal.FileNew
'             $sourceEditor.Text = $fileHandler.New()
'         Case MikuruSignal.FileOpenPath
'             $sourceEditor.Text = $fileHandler.SetPath(argArgs[0])
'         Case MikuruSignal.FileOpen
'             If $fileHandler.Open() Then $sourceEditor.Text = $fileHandler.Buffer
'         Case MikuruSignal.FileSave, MikuruSignal.FileSaveAs
'             If argEvent = MikuruSignal.FileSave Then $fileHandler.Save($sourceEditor.Text)
'             If argEvent = MikuruSignal.FileSaveAs Then $fileHandler.SaveAs($sourceEditor.Text)
'     End Select
'     
'     If Not NagatoSettings.LivePreview Then $previewer.Refresh($sourceEditor.Text)
'     NagatoSettings.PushRecentPath($fileHandler.Path)
'     
' End

Private Sub appEvent(argEvent As Integer)
    
    Select Case argEvent
        Case MikuruSignal.AppAbout
            HaruhiAbout.ShowDialog()
        Case MikuruSignal.AppQuit
            Me.Close() ' This method calls Form_Close()
    End Select
    
End

Public Sub SetPath(argPath As String)
    
    '$sourceEditor.Text = $fileHandler.SetPath(argPath)
    $sourceEditor.FileEvent(MikuruSignal.FileOpenPath, [argPath])
    
End

Public Sub _new()

    Application.MainWindow = Me

End

Public Sub Form_Open()

    NagatoSettings.LoadFormSettings(Me)

    $menuPanel = New NagatoMenuPanel(MenuPanelContainer) As "TFEI"
    $sourceEditor = New NagatoSourceEditor(MainContainer) As "TFEI"
    $previewer = New NagatoPreviewer(MainContainer) ' has no user control

End

Public Sub Form_Close()
    
    'If ensureSaved() Then 
    If $sourceEditor.IsSaved() Then 
        NagatoSettings.SaveFormSettings(Me)
    Else
        Stop Event
    Endif
    
End

Public Sub TFEI_Signal(argEvent As Integer, argArgs As Variant[])
    
    Select Case argEvent
        Case MikuruSignal.FileNone To MikuruSignal.FileNone + 999
            'fileEvent(argEvent, argArgs)
            $sourceEditor.FileEvent(argEvent, argArgs)
        Case MikuruSignal.PublishNone To MikuruSignal.PublishNone + 999
            MikuruPublisher($sourceEditor.Text, argEvent)
        Case MikuruSignal.ViewPreview
            $previewer.Refresh($sourceEditor.Text)
        Case MikuruSignal.AppNone To MikuruSignal.AppNone + 999
            appEvent(argEvent)
    End Select
    
End
