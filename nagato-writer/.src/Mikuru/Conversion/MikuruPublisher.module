' Gambas module file

Private Function getPathToSave(argExtend As String) As String
    
    Dialog.Title = ("Save file")
    Dialog.Path = User.Home &/ "your_document." & argExtend
    
    Return IIf(Dialog.SaveFile(), "", Dialog.Path)
    
End

Public Sub ToPdf(argSource As String, argFormat As String)
    
    Dim yukiPath As String = getPathToSave("pdf")

    If Not yukiPath Then Return

    Exec ["wkhtmltopdf", "--encoding", "UTF-8", "--page-size", "A4", "--dpi", "300", MikuruHtmlConverter.TempFile, yukiPath] Wait

    Message.Info("YUKI.N > It's done", ("OK"))
    
End

Public Sub ToHtml(argSource As String, Optional argFormat As String = "markdown_github")
    
    Dim yukiPath As String = getPathToSave("html")
    
    Copy MikuruHtmlConverter.TempFile To yukiPath
    
    Message.Info("YUKI.N > It's done", ("OK"))
    
End

Public Sub ToPlainText(argSource As String, Optional argFormat As String = "markdown_github")
    
    Dim yukiTempPathSource As String = Temp$() & ".txt"
    Dim yukiPath As String = getPathToSave("txt")
    Dim yukiOutput As String
    
    If Not yukiPath Then Return
    
    File.Save(yukiTempPathSource, argSource)
    
    Exec ["pandoc", "-f", argFormat, "-t", "plain", yukiTempPathSource] To yukiOutput
    
    File.Save(yukiPath, yukiOutput)
    
    Message.Info("YUKI.N > It's done", ("OK"))
    
End

Public Sub _call(argSource As String, argSignal As Integer, argFormat As String)
    
    If Not argSource Then Return
    
    Select Case argSignal
        Case MikuruSignal.PublishHtml
            Me.ToHtml(argSource)
        Case MikuruSignal.PublishPdf
            Me.ToPdf(argSource, argFormat)
        Case MikuruSignal.PublishPlainText
            Me.ToPlainText(argSource)
    End Select
    
End
