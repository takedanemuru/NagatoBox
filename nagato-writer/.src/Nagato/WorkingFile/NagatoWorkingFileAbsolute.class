' Gambas class file

Inherits NagatoWorkingFile

Property Read IDs As String[]
Property Read BottomId As String

Private $htmlDocument As HtmlDocument
Private $ids As New String[]
Private $bottomId As String

Private Function getSafeId(argTag As String) As String
    
    Dim yukiNumber As Integer = 0
    Dim yukiTag As String
    
    If Not $ids.Exist(argTag) And If argTag Then Return argTag
    
    Do
        yukiTag = IIf(argTag, argTag, "nagato-auto-tag-") & CString(yukiNumber)
        If Not $ids.Exist(yukiTag) Then Return CString(yukiTag)
        Inc yukiNumber
    Loop
    
End

Private Sub parseIds(argXmlElements As XmlElement[])
    
    Dim yukiIndex As Integer
    Dim yukiId As String
    
    For yukiIndex = 0 To argXmlElements.Count - 1
        yukiId = getSafeId(argXmlElements[yukiIndex].GetAttribute("id"))
        argXmlElements[yukiIndex].SetAttribute("id", yukiId)
        $ids.Add(yukiId)
    Next
    
End

Private Sub setId(argTargetPath As String)
    
    Dim yukiTag As String
    
    $htmlDocument = New HtmlDocument(argTargetPath)
    $ids.Clear()
    
    For Each yukiTag In ["h1", "h2", "h3", "h4", "h5", "h6"]
        parseIds($htmlDocument.GetElementsByTagName(yukiTag))
    Next
    
    'File.Save(argTargetPath, $htmlDocument.Content)
    
End

Private Sub setHiddenBottomId(argTargetPath As String)
    
    $bottomId = getSafeId("nagato-auto-tag-bottom-")
    
    $htmlDocument.Body.NewElement("div")
    $htmlDocument.Body.LastChild.NewAttribute("id", $bottomId)
    
    File.Save(argTargetPath, $htmlDocument.Content)
    
End

Private Sub convert(argSourcePath As String, argTargetPath As String)
    
    Dim yukiSyntax As String = NagatoSettingsView.Syntax
    Dim yukiCss As String = Subst$("--css=&1", NagatoValueListCssPreview.Current)
    
    Exec ["pandoc", "-f", yukiSyntax, "-s", "-t", "html5", yukiCss, argSourcePath, "-o", argTargetPath] Wait
    
    If NagatoSettings.UseMathjax Then MikuruMathjax.Convert(argTargetPath)
    
    setId(argTargetPath)
    setHiddenBottomId(argTargetPath)
    
End

Public Sub Set(argSourceText As String)
    
    Dim yukiSourcePath As String = Temp$()
    
    Me._ResetWorkingPath()
    File.Save(yukiSourcePath, MikuruMacro.ConvertToAbsolute(argSourceText))
    convert(yukiSourcePath, Me._$workingPath)
    
End

Private Function IDs_Read() As String[]

    Return $ids

End

Private Function BottomId_Read() As String

    Return $bottomId

End
