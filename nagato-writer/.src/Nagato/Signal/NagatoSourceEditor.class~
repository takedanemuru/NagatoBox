' Gambas class file

Inherits NagatoUxContainer

Property Read Text As String
Property Read Path As String

Private $hBox As HBox
Private $fileHandler As New NagatoFileHandler As "TFEI"
Private $headersList As NagatoListViewSourceHeaders
Private $textArea As NagatoTextArea 
Private $appClosure As New NagatoAppClosure As "TFEI"

Public Sub _Initialize()
    
    $hBox = New HBox(Me._$parentContainer)
    $headersList = New NagatoListViewSourceHeaders($hBox) As "TFEI"
    $textArea = New NagatoTextArea($hBox) As "TFEI"

End

Public Sub FileEvent(argEvent As Integer, Optional argArgs As Variant[] = Null)
    
    If argEvent > (MikuruSignal.FileNone + 100) And If Not $fileHandler.EnsureSaved($textArea.Text) Then Return
    
    Select Case argEvent
        Case MikuruSignal.FileNewMarkdown
            $textArea.Text = $fileHandler.New()
        Case MikuruSignal.FileOpenPath
            $textArea.Text = $fileHandler.SetPath(argArgs[0])
        Case MikuruSignal.FileOpen
            If $fileHandler.Open() Then $textArea.Text = $fileHandler.Buffer
        Case MikuruSignal.FileSave
            $fileHandler.Save($textArea.Text)
        Case MikuruSignal.FileSaveAs
            $fileHandler.SaveAs($textArea.Text)
    End Select
    
    If Not NagatoSettings.LivePreview Then Raise Signal(MikuruSignal.ViewPreview, Null)
    NagatoSettings.PushRecentPath($fileHandler.Path)
    $headersList.Refresh($fileHandler.Headers)
    If $fileHandler.Path Then HaruhiMain.Title = File.Name($fileHandler.Path)
    Raise Signal(MikuruSignal.ViewMoveTag, [$fileHandler.GetHeaderIndex($textArea.Line)])

End

Public Sub EditEvent(argEvent As Integer, Optional argValues As Variant[])
    
    Select Case argEvent
        Case MikuruSignal.EditInsertBullets
            $textArea.InsertBullets()
        Case MikuruSignal.EditInsertNumbers
            $textArea.InsertNembers()
        Case MikuruSignal.EditInsertImage
            $textArea.InsertImageAbsolute($fileHandler.Path)
        Case MikuruSignal.EditInsertImageRelative
            $textArea.InsertImagePathRelative($fileHandler.Path)
        Case MikuruSignal.EditInsertUrl
            $textArea.InsertUrlTemplate()
        Case MikuruSignal.EditMoveToLine
            $textArea.MoveToLine(argValues[0])
    End Select
    
End

Public Sub GetSaveStatus() As Integer
    
    If $textArea.Text = $fileHandler.Buffer Then Return NagatoAppClosure.ResponseHasBeenSaved
    
    Return $appClosure.GetStatus()
    
End

Public Sub TFEI_Signal(argSignal As Integer, argValues As Variant[])
    
    If argSignal = MikuruSignal.ViewMoveCursor Then
        Raise Signal(MikuruSignal.ViewMoveTag, [$fileHandler.GetHeaderIndex(argValues[0])])
    Else
        Raise Signal(argSignal, argValues)
    Endif
    
End

Private Function Text_Read() As String

    Return $textArea.Text

End

Private Function Path_Read() As String

    Return $fileHandler.Path

End
