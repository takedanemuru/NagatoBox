' Gambas class file

Inherits NagatoUxContainer

Property Text As String

Public Enum ResponseHasBeenSaved, ResponseSaved, ResponseCancel

Private $fileHandler As New NagatoFileHandler
Private $textArea As NagatoTextArea

Private Function ensureSaved() As Boolean ' False means cancel to open file
    
    If $textArea.Text = $fileHandler.Buffer Then Return True
    
    Select Case HaruhiDialogClose.ShowDialog()
        Case HaruhiDialogClose.ResponseCancel
            Return False
        Case HaruhiDialogClose.ResponseDiscard
            Return True
        Case HaruhiDialogClose.ResponseSave
            Raise Signal(MikuruSignal.FileSave, Null)
            'fileEvent(MikuruSignal.FileSave)
            Return True
    End Select
    
End

Public Sub _Initialize()
    
    $textArea = New NagatoTextArea(Me._$parentContainer) As "TFEI"
    
End

Public Sub FileEvent(argEvent As Integer, Optional argArgs As Variant[] = Null)
    
    If argEvent > (MikuruSignal.FileNone + 100) And If Not ensureSaved() Then Return
    
    Select Case argEvent
        Case MikuruSignal.FileNew
            $textArea.Text = $fileHandler.New()
        Case MikuruSignal.FileOpenPath
            $textArea.Text = $fileHandler.SetPath(argArgs[0])
        Case MikuruSignal.FileOpen
            If $fileHandler.Open() Then $textArea.Text = $fileHandler.Buffer
        Case MikuruSignal.FileSave, MikuruSignal.FileSaveAs
            If argEvent = MikuruSignal.FileSave Then $fileHandler.Save($textArea.Text)
            If argEvent = MikuruSignal.FileSaveAs Then $fileHandler.SaveAs($textArea.Text)
    End Select
    
    If Not NagatoSettings.LivePreview Then Raise Signal(MikuruSignal.ViewPreview, Null)
    NagatoSettings.PushRecentPath($fileHandler.Path)

End

Public Sub GetSaveStatus() As Integer
    
    If $textArea.Text = $fileHandler.Buffer Then Return Me.ResponseHasBeenSaved
    
    If ensureSaved() Then
        Return Me.ResponseSaved
    Else
        Return Me.ResponseCancel
    Endif
    
End

Private Function Text_Read() As String

    Return $textArea.Text

End

Private Sub Text_Write(Value As String)

    $textArea.Text = Value

End
