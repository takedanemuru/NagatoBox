' Gambas class file

Inherits NagatoUxContainer

Property Read Text As String
Property Read DialogPosition As Point
Property Read TextArea As TextArea
Property Read Line As Integer

Private $textArea As TextArea
Private $observer As Observer

Public Sub _initialize() ' override
    
    $textArea = New TextArea(Me._$parentContainer) As "TextArea"
    
    With $textArea
        .Expand = True
        .Foreground = Color.Violet
        .Wrap = True
        .SetFocus()
    End With
    
    $observer = New Observer(NagatoSearchAndReplacementSignal) As "Asakura"
    
End

Public Sub Insert(argText As String)
    
    $textArea.Insert(argText)
    
End

Public Sub MoveToLine(argLine As Integer)
    
    $textArea.SetFocus()
    Try $textArea.Line = argLine + Int($textArea.H / $textArea.Font.H * 0.7)
    If Not Error Then $textArea.EnsureVisible()
    $textArea.Line = argLine

Finally
    $textArea.EnsureVisible()
     
End

Public Sub SetTextWithNoSignal(argText As String)
    
    Object.Lock($textArea)
        $textArea.Text = argText
        $textArea.SetFocus()
        $textArea.Line = 0
    Object.Unlock($textArea)
    
End

Public Sub CheckCursorPosition()
    
    Me.TextArea_Cursor()
    
End

Public Sub Asakura_Opened()
    
    HaruhiReplacement.X = Me.DialogPosition.X
    HaruhiReplacement.Y = Me.DialogPosition.Y
    
End

Public Sub TextArea_Cursor()
    
    If $textArea.Pos + 4 > $textArea.Length Then
        Raise Signal(MikuruSignal.ViewMoveToBottom, Null)
    Else
        Raise Signal(MikuruSignal.ViewMoveCursor, [$textArea.Line])
    Endif
    
End

Public Sub TextArea_Change()
    
    If NagatoSettings.LivePreview Then Raise Signal(MikuruSignal.ViewPreview, Null)
    
End

Private Function Text_Read() As String

    Return $textArea.Text

End

Private Function DialogPosition_Read() As Point

    Dim yukiPoint As New Point

    yukiPoint.X = $textArea.ScreenX + $textArea.W + 64
    yukiPoint.Y = $textArea.Y + 64

    Return yukiPoint

End

Private Function TextArea_Read() As TextArea

    Return $textArea

End

Private Function Line_Read() As Integer

    Return $textArea.Line

End
