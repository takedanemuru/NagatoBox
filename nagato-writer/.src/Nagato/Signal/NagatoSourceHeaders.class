' Gambas class file

Inherits NagatoObject

Property Read Headers As Collection ' HeaderText , LineNumber

Private $headers As New Collection
Private $headerLines As New NagatoHeaderLines
Private $textBuffer As New NagatoTextBuffer

Private Sub removeMeta(argText As String) As String
    
    Dim yukiStart As Integer = String.InStr(argText, "![image:") 
    Dim yukiEnd As Integer = String.InStr(argText, ")", yukiStart)
    Dim yukiMeta As String 
    
    If yukiStart >= yukiEnd Then Return argText
    
    yukiMeta = String.Mid(argText, yukiStart, yukiEnd - yukiStart + 1)
    
    Return Replace(argText, yukiMeta, "")
    
End

Private Sub addHeader(argHeaderLevel As Integer, argLine As Integer)
    
    Dim yukiText As String
    
    If argHeaderLevel = 0 Then Return
    
    yukiText = $textBuffer[argLine]
    If String.InStr(yukiText, "![image:") > 0 Then yukiText = removeMeta(yukiText)
    $headerLines.Add(argHeaderLevel, argLine)
    $headers.Add(yukiText, CString(argLine))
    
End

Private Sub parseHeaderData()
    
    Dim yukiLine As Integer
    Dim yukiLock As Boolean = False
    
    For yukiLine = 0 To $textBuffer.Max
        If $textBuffer[yukiLine] Begins "```" Then yukiLock = Not yukiLock
        If Not yukiLock Then addHeader($textBuffer.GetHeaderLevel(yukiLine), yukiLine)
    Next
    
End

Public Sub Refresh(argBuffer As String)
    
    $textBuffer.Set(argBuffer)
    $headers.Clear()
    $headerLines.Clear()
    parseHeaderData()
    
End

Public Function GetHeaderIndex(argLine As Integer) As Integer
    
    Dim yukiLine As String
    Dim yukiData As New NagatoDualInteger
    
    For Each yukiLine In $headers
        yukiData.Push(CInteger($headers.Key))
        If yukiData.Current = argLine Then Return $headerLines[yukiData.Current] 
        If yukiData.Current > argLine Then Return $headerLines[yukiData.Previous]
    Next
    
    Return $headerLines[yukiData.Current]
    
End

Private Function Headers_Read() As Collection

    Return $headers

End
