' Gambas class file

Property Read Count As Integer
Property Read GridData As Variant[]
Property Read Message As String
Property Read MethodCount As Integer

Private $targetPath As String
Private $pathCollection As New Collection
Private $dataGrid As New NagatoDataGrid 
Private $counter As New NagatoCounter

Private Sub setRowData(argDirectory As String, argFileName As String)
    
    Dim yukiJointPath As String = argDirectory &/ argFileName
    Dim yukiType As String = $counter.GetType(argDirectory, argFileName)
    
    $pathCollection.Add(yukiJointPath, File.Name(yukiJointPath))
    $dataGrid.AddToGridData(yukiType, yukiJointPath)
    
End

Private Sub countLine(argDirectory As String)
    
    Dim yukiPath As String
    Dim yukiType As Integer
    
    For Each yukiPath In RDir(argDirectory)
        yukiType = NagatoFileType.GetType(argDirectory &/ yukiPath)
        If yukiType = NagatoFileType.FileToRead Then
            setRowData(argDirectory, yukiPath)
        End If
    Next
    
End

Public Sub Refresh()
    
    $counter.Clear()
    $pathCollection.Clear()
    $dataGrid.Clear()
    countLine($targetPath)
    
End

Public Sub Clear(argPath As String)
    
     $targetPath = argPath
     $dataGrid.Reset()
    
End

Public Sub SetTargetIndex(argIndex As Integer)
    
    $dataGrid.SetTargetIndex(argIndex)
    
End

Public Function GetPath(argKey As String) As String
    
    Return $pathCollection[argKey]
    
End

Public Function GetLinesOfCode(argIgnoreVoid As Boolean) As Integer
    
    Return $dataGrid.GetLinesOfCode(argIgnoreVoid)
    
End

Private Function GridData_Read() As Variant[]

    Return $dataGrid.Data

End

Private Function Count_Read() As Integer

    Return $dataGrid.Count

End

Private Function Message_Read() As String

    Dim yukiLinesOfCode As String = Format$($dataGrid.GetLinesOfCode(False), "###,###,##0")

    Return Subst$($counter.Message, File.Name($targetPath), yukiLinesOfCode)

End

Private Function MethodCount_Read() As Integer

    Return $dataGrid.MothodCount

End
